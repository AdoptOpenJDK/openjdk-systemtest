/*******************************************************************************
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*      https://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*******************************************************************************/
package net.adoptopenjdk.test.math;

import junit.framework.TestCase;

/**
* MathAPITest
* ======================
*
* A simple collection of JUnit assertions covering the java.lang.Math API. Automatically generated using MathAPITestGenerator.java
*
* Do not modify this file - it will be overwritten whenever MathAPITestGenerator.java is reexecuted.
* If test cases require modification make the changes to MathAPITestGenerator.java and regenerate this file.
*
* This version of MathAPITest was generated using the following JDK :
*
* java.vendor : Oracle Corporation
* java.vendor.url : http://java.oracle.com/
* java.version : 1.7
* os.name : Linux
* os.arch : amd64
*
**/

public class MathAPITest extends TestCase
{

private double Infinity = Double.MAX_VALUE * Double.MAX_VALUE;

private String generatorJdkRange = "preJdk9";
private String runtimeJdkRange = "";
private Float javaVersion = 0.0f;

public void setUp()
{
javaVersion = Float.parseFloat(System.getProperty("java.specification.version"));
if ( javaVersion < 9 ) {
runtimeJdkRange = "preJdk9";
}
else {
runtimeJdkRange = "notPreJdk9";
}
}

public void testAbs_double()
{
assertEquals("abs(double)[0] ::", -Double.MAX_VALUE*-1.0d, StrictMath.abs(-Double.MAX_VALUE));
assertEquals("abs(double)[1] ::", -Double.MAX_VALUE*-1.0d, Math.abs(-Double.MAX_VALUE));
assertEquals("abs(double)[2] ::", -Double.MAX_VALUE*-1.0d * 2d, StrictMath.abs(-Double.MAX_VALUE * 2d));
assertEquals("abs(double)[3] ::", -Double.MAX_VALUE*-1.0d * 2d, Math.abs(-Double.MAX_VALUE * 2d));
assertEquals("abs(double)[4] ::", -Double.MAX_VALUE*-1.0d * 2d, StrictMath.abs(-Double.MAX_VALUE * -2d));
assertEquals("abs(double)[5] ::", -Double.MAX_VALUE*-1.0d * 2d, Math.abs(-Double.MAX_VALUE * -2d));
assertEquals("abs(double)[6] ::", (-Double.MAX_VALUE / 200)*-1.0d, StrictMath.abs((-Double.MAX_VALUE / 200)));
assertEquals("abs(double)[7] ::", (-Double.MAX_VALUE / 200)*-1.0d, Math.abs((-Double.MAX_VALUE / 200)));
assertEquals("abs(double)[8] ::", (-Double.MAX_VALUE / 200)*-1.0d * 2d, StrictMath.abs((-Double.MAX_VALUE / 200) * 2d));
assertEquals("abs(double)[9] ::", (-Double.MAX_VALUE / 200)*-1.0d * 2d, Math.abs((-Double.MAX_VALUE / 200) * 2d));
assertEquals("abs(double)[10] ::", (-Double.MAX_VALUE / 200)*-1.0d * 2d, StrictMath.abs((-Double.MAX_VALUE / 200) * -2d));
assertEquals("abs(double)[11] ::", (-Double.MAX_VALUE / 200)*-1.0d * 2d, Math.abs((-Double.MAX_VALUE / 200) * -2d));
assertEquals("abs(double)[12] ::", (-Double.MAX_VALUE / 500)*-1.0d, StrictMath.abs((-Double.MAX_VALUE / 500)));
assertEquals("abs(double)[13] ::", (-Double.MAX_VALUE / 500)*-1.0d, Math.abs((-Double.MAX_VALUE / 500)));
assertEquals("abs(double)[14] ::", (-Double.MAX_VALUE / 500)*-1.0d * 2d, StrictMath.abs((-Double.MAX_VALUE / 500) * 2d));
assertEquals("abs(double)[15] ::", (-Double.MAX_VALUE / 500)*-1.0d * 2d, Math.abs((-Double.MAX_VALUE / 500) * 2d));
assertEquals("abs(double)[16] ::", (-Double.MAX_VALUE / 500)*-1.0d * 2d, StrictMath.abs((-Double.MAX_VALUE / 500) * -2d));
assertEquals("abs(double)[17] ::", (-Double.MAX_VALUE / 500)*-1.0d * 2d, Math.abs((-Double.MAX_VALUE / 500) * -2d));
assertEquals("abs(double)[18] ::", (-Double.MIN_VALUE * 2000)*-1.0d, StrictMath.abs((-Double.MIN_VALUE * 2000)));
assertEquals("abs(double)[19] ::", (-Double.MIN_VALUE * 2000)*-1.0d, Math.abs((-Double.MIN_VALUE * 2000)));
assertEquals("abs(double)[20] ::", (-Double.MIN_VALUE * 2000)*-1.0d * 2d, StrictMath.abs((-Double.MIN_VALUE * 2000) * 2d));
assertEquals("abs(double)[21] ::", (-Double.MIN_VALUE * 2000)*-1.0d * 2d, Math.abs((-Double.MIN_VALUE * 2000) * 2d));
assertEquals("abs(double)[22] ::", (-Double.MIN_VALUE * 2000)*-1.0d * 2d, StrictMath.abs((-Double.MIN_VALUE * 2000) * -2d));
assertEquals("abs(double)[23] ::", (-Double.MIN_VALUE * 2000)*-1.0d * 2d, Math.abs((-Double.MIN_VALUE * 2000) * -2d));
assertEquals("abs(double)[24] ::", (-Double.MIN_VALUE * 1000)*-1.0d, StrictMath.abs((-Double.MIN_VALUE * 1000)));
assertEquals("abs(double)[25] ::", (-Double.MIN_VALUE * 1000)*-1.0d, Math.abs((-Double.MIN_VALUE * 1000)));
assertEquals("abs(double)[26] ::", (-Double.MIN_VALUE * 1000)*-1.0d * 2d, StrictMath.abs((-Double.MIN_VALUE * 1000) * 2d));
assertEquals("abs(double)[27] ::", (-Double.MIN_VALUE * 1000)*-1.0d * 2d, Math.abs((-Double.MIN_VALUE * 1000) * 2d));
assertEquals("abs(double)[28] ::", (-Double.MIN_VALUE * 1000)*-1.0d * 2d, StrictMath.abs((-Double.MIN_VALUE * 1000) * -2d));
assertEquals("abs(double)[29] ::", (-Double.MIN_VALUE * 1000)*-1.0d * 2d, Math.abs((-Double.MIN_VALUE * 1000) * -2d));
assertEquals("abs(double)[30] ::", -2929112212.129231481346*-1.0d, StrictMath.abs(-2929112212.129231481346));
assertEquals("abs(double)[31] ::", -2929112212.129231481346*-1.0d, Math.abs(-2929112212.129231481346));
assertEquals("abs(double)[32] ::", -2929112212.129231481346*-1.0d * 2d, StrictMath.abs(-2929112212.129231481346 * 2d));
assertEquals("abs(double)[33] ::", -2929112212.129231481346*-1.0d * 2d, Math.abs(-2929112212.129231481346 * 2d));
assertEquals("abs(double)[34] ::", -2929112212.129231481346*-1.0d * 2d, StrictMath.abs(-2929112212.129231481346 * -2d));
assertEquals("abs(double)[35] ::", -2929112212.129231481346*-1.0d * 2d, Math.abs(-2929112212.129231481346 * -2d));
assertEquals("abs(double)[36] ::", -2372.228212D*-1.0d, StrictMath.abs(-2372.228212D));
assertEquals("abs(double)[37] ::", -2372.228212D*-1.0d, Math.abs(-2372.228212D));
assertEquals("abs(double)[38] ::", -2372.228212D*-1.0d * 2d, StrictMath.abs(-2372.228212D * 2d));
assertEquals("abs(double)[39] ::", -2372.228212D*-1.0d * 2d, Math.abs(-2372.228212D * 2d));
assertEquals("abs(double)[40] ::", -2372.228212D*-1.0d * 2d, StrictMath.abs(-2372.228212D * -2d));
assertEquals("abs(double)[41] ::", -2372.228212D*-1.0d * 2d, Math.abs(-2372.228212D * -2d));
assertEquals("abs(double)[42] ::", -1.2232D*-1.0d, StrictMath.abs(-1.2232D));
assertEquals("abs(double)[43] ::", -1.2232D*-1.0d, Math.abs(-1.2232D));
assertEquals("abs(double)[44] ::", -1.2232D*-1.0d * 2d, StrictMath.abs(-1.2232D * 2d));
assertEquals("abs(double)[45] ::", -1.2232D*-1.0d * 2d, Math.abs(-1.2232D * 2d));
assertEquals("abs(double)[46] ::", -1.2232D*-1.0d * 2d, StrictMath.abs(-1.2232D * -2d));
assertEquals("abs(double)[47] ::", -1.2232D*-1.0d * 2d, Math.abs(-1.2232D * -2d));
assertEquals("abs(double)[48] ::", 0D*1.0d, StrictMath.abs(0D));
assertEquals("abs(double)[49] ::", 0D*1.0d, Math.abs(0D));
assertEquals("abs(double)[50] ::", 0D*1.0d * 2d, StrictMath.abs(0D * 2d));
assertEquals("abs(double)[51] ::", 0D*1.0d * 2d, Math.abs(0D * 2d));
assertEquals("abs(double)[52] ::", 0D*1.0d * 2d, StrictMath.abs(0D * -2d));
assertEquals("abs(double)[53] ::", 0D*1.0d * 2d, Math.abs(0D * -2d));
assertEquals("abs(double)[54] ::", 2.43223D*1.0d, StrictMath.abs(2.43223D));
assertEquals("abs(double)[55] ::", 2.43223D*1.0d, Math.abs(2.43223D));
assertEquals("abs(double)[56] ::", 2.43223D*1.0d * 2d, StrictMath.abs(2.43223D * 2d));
assertEquals("abs(double)[57] ::", 2.43223D*1.0d * 2d, Math.abs(2.43223D * 2d));
assertEquals("abs(double)[58] ::", 2.43223D*1.0d * 2d, StrictMath.abs(2.43223D * -2d));
assertEquals("abs(double)[59] ::", 2.43223D*1.0d * 2d, Math.abs(2.43223D * -2d));
assertEquals("abs(double)[60] ::", 18232155.3323566D*1.0d, StrictMath.abs(18232155.3323566D));
assertEquals("abs(double)[61] ::", 18232155.3323566D*1.0d, Math.abs(18232155.3323566D));
assertEquals("abs(double)[62] ::", 18232155.3323566D*1.0d * 2d, StrictMath.abs(18232155.3323566D * 2d));
assertEquals("abs(double)[63] ::", 18232155.3323566D*1.0d * 2d, Math.abs(18232155.3323566D * 2d));
assertEquals("abs(double)[64] ::", 18232155.3323566D*1.0d * 2d, StrictMath.abs(18232155.3323566D * -2d));
assertEquals("abs(double)[65] ::", 18232155.3323566D*1.0d * 2d, Math.abs(18232155.3323566D * -2d));
assertEquals("abs(double)[66] ::", Double.MIN_VALUE*1.0d, StrictMath.abs(Double.MIN_VALUE));
assertEquals("abs(double)[67] ::", Double.MIN_VALUE*1.0d, Math.abs(Double.MIN_VALUE));
assertEquals("abs(double)[68] ::", Double.MIN_VALUE*1.0d * 2d, StrictMath.abs(Double.MIN_VALUE * 2d));
assertEquals("abs(double)[69] ::", Double.MIN_VALUE*1.0d * 2d, Math.abs(Double.MIN_VALUE * 2d));
assertEquals("abs(double)[70] ::", Double.MIN_VALUE*1.0d * 2d, StrictMath.abs(Double.MIN_VALUE * -2d));
assertEquals("abs(double)[71] ::", Double.MIN_VALUE*1.0d * 2d, Math.abs(Double.MIN_VALUE * -2d));
assertEquals("abs(double)[72] ::", (Double.MIN_VALUE * 200)*1.0d, StrictMath.abs((Double.MIN_VALUE * 200)));
assertEquals("abs(double)[73] ::", (Double.MIN_VALUE * 200)*1.0d, Math.abs((Double.MIN_VALUE * 200)));
assertEquals("abs(double)[74] ::", (Double.MIN_VALUE * 200)*1.0d * 2d, StrictMath.abs((Double.MIN_VALUE * 200) * 2d));
assertEquals("abs(double)[75] ::", (Double.MIN_VALUE * 200)*1.0d * 2d, Math.abs((Double.MIN_VALUE * 200) * 2d));
assertEquals("abs(double)[76] ::", (Double.MIN_VALUE * 200)*1.0d * 2d, StrictMath.abs((Double.MIN_VALUE * 200) * -2d));
assertEquals("abs(double)[77] ::", (Double.MIN_VALUE * 200)*1.0d * 2d, Math.abs((Double.MIN_VALUE * 200) * -2d));
assertEquals("abs(double)[78] ::", (Double.MAX_VALUE / 500)*1.0d, StrictMath.abs((Double.MAX_VALUE / 500)));
assertEquals("abs(double)[79] ::", (Double.MAX_VALUE / 500)*1.0d, Math.abs((Double.MAX_VALUE / 500)));
assertEquals("abs(double)[80] ::", (Double.MAX_VALUE / 500)*1.0d * 2d, StrictMath.abs((Double.MAX_VALUE / 500) * 2d));
assertEquals("abs(double)[81] ::", (Double.MAX_VALUE / 500)*1.0d * 2d, Math.abs((Double.MAX_VALUE / 500) * 2d));
assertEquals("abs(double)[82] ::", (Double.MAX_VALUE / 500)*1.0d * 2d, StrictMath.abs((Double.MAX_VALUE / 500) * -2d));
assertEquals("abs(double)[83] ::", (Double.MAX_VALUE / 500)*1.0d * 2d, Math.abs((Double.MAX_VALUE / 500) * -2d));
assertEquals("abs(double)[84] ::", (Double.MAX_VALUE / 200)*1.0d, StrictMath.abs((Double.MAX_VALUE / 200)));
assertEquals("abs(double)[85] ::", (Double.MAX_VALUE / 200)*1.0d, Math.abs((Double.MAX_VALUE / 200)));
assertEquals("abs(double)[86] ::", (Double.MAX_VALUE / 200)*1.0d * 2d, StrictMath.abs((Double.MAX_VALUE / 200) * 2d));
assertEquals("abs(double)[87] ::", (Double.MAX_VALUE / 200)*1.0d * 2d, Math.abs((Double.MAX_VALUE / 200) * 2d));
assertEquals("abs(double)[88] ::", (Double.MAX_VALUE / 200)*1.0d * 2d, StrictMath.abs((Double.MAX_VALUE / 200) * -2d));
assertEquals("abs(double)[89] ::", (Double.MAX_VALUE / 200)*1.0d * 2d, Math.abs((Double.MAX_VALUE / 200) * -2d));
assertEquals("abs(double)[90] ::", Double.MAX_VALUE*1.0d, StrictMath.abs(Double.MAX_VALUE));
assertEquals("abs(double)[91] ::", Double.MAX_VALUE*1.0d, Math.abs(Double.MAX_VALUE));
assertEquals("abs(double)[92] ::", Double.MAX_VALUE*1.0d * 2d, StrictMath.abs(Double.MAX_VALUE * 2d));
assertEquals("abs(double)[93] ::", Double.MAX_VALUE*1.0d * 2d, Math.abs(Double.MAX_VALUE * 2d));
assertEquals("abs(double)[94] ::", Double.MAX_VALUE*1.0d * 2d, StrictMath.abs(Double.MAX_VALUE * -2d));
assertEquals("abs(double)[95] ::", Double.MAX_VALUE*1.0d * 2d, Math.abs(Double.MAX_VALUE * -2d));
assertEquals("abs(double)[96] ::", Double.MAX_VALUE + 1*1.0d, StrictMath.abs(Double.MAX_VALUE + 1));
assertEquals("abs(double)[97] ::", Double.MAX_VALUE + 1*1.0d, Math.abs(Double.MAX_VALUE + 1));
assertEquals("abs(double)[98] ::", Double.MAX_VALUE + 1*1.0d * 2d, StrictMath.abs(Double.MAX_VALUE + 1 * 2d));
assertEquals("abs(double)[99] ::", Double.MAX_VALUE + 1*1.0d * 2d, Math.abs(Double.MAX_VALUE + 1 * 2d));
assertEquals("abs(double)[100] ::", Double.MAX_VALUE + 1*1.0d * 2d, StrictMath.abs(Double.MAX_VALUE + 1 * -2d));
assertEquals("abs(double)[101] ::", Double.MAX_VALUE + 1*1.0d * 2d, Math.abs(Double.MAX_VALUE + 1 * -2d));
}

public void testAbs_float()
{
assertEquals("abs(float)[0] ::", -Float.MAX_VALUE*-1.0f, StrictMath.abs(-Float.MAX_VALUE));
assertEquals("abs(float)[1] ::", -Float.MAX_VALUE*-1.0f, Math.abs(-Float.MAX_VALUE));
assertEquals("abs(float)[2] ::", -Float.MAX_VALUE*-1.0f * 2f, StrictMath.abs(-Float.MAX_VALUE * 2f));
assertEquals("abs(float)[3] ::", -Float.MAX_VALUE*-1.0f * 2f, Math.abs(-Float.MAX_VALUE * 2f));
assertEquals("abs(float)[4] ::", -Float.MAX_VALUE*-1.0f * 2f, StrictMath.abs(-Float.MAX_VALUE * -2f));
assertEquals("abs(float)[5] ::", -Float.MAX_VALUE*-1.0f * 2f, Math.abs(-Float.MAX_VALUE * -2f));
assertEquals("abs(float)[6] ::", (-Float.MAX_VALUE / 200)*-1.0f, StrictMath.abs((-Float.MAX_VALUE / 200)));
assertEquals("abs(float)[7] ::", (-Float.MAX_VALUE / 200)*-1.0f, Math.abs((-Float.MAX_VALUE / 200)));
assertEquals("abs(float)[8] ::", (-Float.MAX_VALUE / 200)*-1.0f * 2f, StrictMath.abs((-Float.MAX_VALUE / 200) * 2f));
assertEquals("abs(float)[9] ::", (-Float.MAX_VALUE / 200)*-1.0f * 2f, Math.abs((-Float.MAX_VALUE / 200) * 2f));
assertEquals("abs(float)[10] ::", (-Float.MAX_VALUE / 200)*-1.0f * 2f, StrictMath.abs((-Float.MAX_VALUE / 200) * -2f));
assertEquals("abs(float)[11] ::", (-Float.MAX_VALUE / 200)*-1.0f * 2f, Math.abs((-Float.MAX_VALUE / 200) * -2f));
assertEquals("abs(float)[12] ::", (-Float.MAX_VALUE / 500)*-1.0f, StrictMath.abs((-Float.MAX_VALUE / 500)));
assertEquals("abs(float)[13] ::", (-Float.MAX_VALUE / 500)*-1.0f, Math.abs((-Float.MAX_VALUE / 500)));
assertEquals("abs(float)[14] ::", (-Float.MAX_VALUE / 500)*-1.0f * 2f, StrictMath.abs((-Float.MAX_VALUE / 500) * 2f));
assertEquals("abs(float)[15] ::", (-Float.MAX_VALUE / 500)*-1.0f * 2f, Math.abs((-Float.MAX_VALUE / 500) * 2f));
assertEquals("abs(float)[16] ::", (-Float.MAX_VALUE / 500)*-1.0f * 2f, StrictMath.abs((-Float.MAX_VALUE / 500) * -2f));
assertEquals("abs(float)[17] ::", (-Float.MAX_VALUE / 500)*-1.0f * 2f, Math.abs((-Float.MAX_VALUE / 500) * -2f));
assertEquals("abs(float)[18] ::", (-Float.MIN_VALUE * 2000)*-1.0f, StrictMath.abs((-Float.MIN_VALUE * 2000)));
assertEquals("abs(float)[19] ::", (-Float.MIN_VALUE * 2000)*-1.0f, Math.abs((-Float.MIN_VALUE * 2000)));
assertEquals("abs(float)[20] ::", (-Float.MIN_VALUE * 2000)*-1.0f * 2f, StrictMath.abs((-Float.MIN_VALUE * 2000) * 2f));
assertEquals("abs(float)[21] ::", (-Float.MIN_VALUE * 2000)*-1.0f * 2f, Math.abs((-Float.MIN_VALUE * 2000) * 2f));
assertEquals("abs(float)[22] ::", (-Float.MIN_VALUE * 2000)*-1.0f * 2f, StrictMath.abs((-Float.MIN_VALUE * 2000) * -2f));
assertEquals("abs(float)[23] ::", (-Float.MIN_VALUE * 2000)*-1.0f * 2f, Math.abs((-Float.MIN_VALUE * 2000) * -2f));
assertEquals("abs(float)[24] ::", (-Float.MIN_VALUE * 1000)*-1.0f, StrictMath.abs((-Float.MIN_VALUE * 1000)));
assertEquals("abs(float)[25] ::", (-Float.MIN_VALUE * 1000)*-1.0f, Math.abs((-Float.MIN_VALUE * 1000)));
assertEquals("abs(float)[26] ::", (-Float.MIN_VALUE * 1000)*-1.0f * 2f, StrictMath.abs((-Float.MIN_VALUE * 1000) * 2f));
assertEquals("abs(float)[27] ::", (-Float.MIN_VALUE * 1000)*-1.0f * 2f, Math.abs((-Float.MIN_VALUE * 1000) * 2f));
assertEquals("abs(float)[28] ::", (-Float.MIN_VALUE * 1000)*-1.0f * 2f, StrictMath.abs((-Float.MIN_VALUE * 1000) * -2f));
assertEquals("abs(float)[29] ::", (-Float.MIN_VALUE * 1000)*-1.0f * 2f, Math.abs((-Float.MIN_VALUE * 1000) * -2f));
assertEquals("abs(float)[30] ::", -32948748.958324F*-1.0f, StrictMath.abs(-32948748.958324F));
assertEquals("abs(float)[31] ::", -32948748.958324F*-1.0f, Math.abs(-32948748.958324F));
assertEquals("abs(float)[32] ::", -32948748.958324F*-1.0f * 2f, StrictMath.abs(-32948748.958324F * 2f));
assertEquals("abs(float)[33] ::", -32948748.958324F*-1.0f * 2f, Math.abs(-32948748.958324F * 2f));
assertEquals("abs(float)[34] ::", -32948748.958324F*-1.0f * 2f, StrictMath.abs(-32948748.958324F * -2f));
assertEquals("abs(float)[35] ::", -32948748.958324F*-1.0f * 2f, Math.abs(-32948748.958324F * -2f));
assertEquals("abs(float)[36] ::", -0.000000009F*-1.0f, StrictMath.abs(-0.000000009F));
assertEquals("abs(float)[37] ::", -0.000000009F*-1.0f, Math.abs(-0.000000009F));
assertEquals("abs(float)[38] ::", -0.000000009F*-1.0f * 2f, StrictMath.abs(-0.000000009F * 2f));
assertEquals("abs(float)[39] ::", -0.000000009F*-1.0f * 2f, Math.abs(-0.000000009F * 2f));
assertEquals("abs(float)[40] ::", -0.000000009F*-1.0f * 2f, StrictMath.abs(-0.000000009F * -2f));
assertEquals("abs(float)[41] ::", -0.000000009F*-1.0f * 2f, Math.abs(-0.000000009F * -2f));
assertEquals("abs(float)[42] ::", -0.0000002F*-1.0f, StrictMath.abs(-0.0000002F));
assertEquals("abs(float)[43] ::", -0.0000002F*-1.0f, Math.abs(-0.0000002F));
assertEquals("abs(float)[44] ::", -0.0000002F*-1.0f * 2f, StrictMath.abs(-0.0000002F * 2f));
assertEquals("abs(float)[45] ::", -0.0000002F*-1.0f * 2f, Math.abs(-0.0000002F * 2f));
assertEquals("abs(float)[46] ::", -0.0000002F*-1.0f * 2f, StrictMath.abs(-0.0000002F * -2f));
assertEquals("abs(float)[47] ::", -0.0000002F*-1.0f * 2f, Math.abs(-0.0000002F * -2f));
assertEquals("abs(float)[48] ::", 0F*1.0f, StrictMath.abs(0F));
assertEquals("abs(float)[49] ::", 0F*1.0f, Math.abs(0F));
assertEquals("abs(float)[50] ::", 0F*1.0f * 2f, StrictMath.abs(0F * 2f));
assertEquals("abs(float)[51] ::", 0F*1.0f * 2f, Math.abs(0F * 2f));
assertEquals("abs(float)[52] ::", 0F*1.0f * 2f, StrictMath.abs(0F * -2f));
assertEquals("abs(float)[53] ::", 0F*1.0f * 2f, Math.abs(0F * -2f));
assertEquals("abs(float)[54] ::", 0.456232334F*1.0f, StrictMath.abs(0.456232334F));
assertEquals("abs(float)[55] ::", 0.456232334F*1.0f, Math.abs(0.456232334F));
assertEquals("abs(float)[56] ::", 0.456232334F*1.0f * 2f, StrictMath.abs(0.456232334F * 2f));
assertEquals("abs(float)[57] ::", 0.456232334F*1.0f * 2f, Math.abs(0.456232334F * 2f));
assertEquals("abs(float)[58] ::", 0.456232334F*1.0f * 2f, StrictMath.abs(0.456232334F * -2f));
assertEquals("abs(float)[59] ::", 0.456232334F*1.0f * 2f, Math.abs(0.456232334F * -2f));
assertEquals("abs(float)[60] ::", 1224257.312321263F*1.0f, StrictMath.abs(1224257.312321263F));
assertEquals("abs(float)[61] ::", 1224257.312321263F*1.0f, Math.abs(1224257.312321263F));
assertEquals("abs(float)[62] ::", 1224257.312321263F*1.0f * 2f, StrictMath.abs(1224257.312321263F * 2f));
assertEquals("abs(float)[63] ::", 1224257.312321263F*1.0f * 2f, Math.abs(1224257.312321263F * 2f));
assertEquals("abs(float)[64] ::", 1224257.312321263F*1.0f * 2f, StrictMath.abs(1224257.312321263F * -2f));
assertEquals("abs(float)[65] ::", 1224257.312321263F*1.0f * 2f, Math.abs(1224257.312321263F * -2f));
assertEquals("abs(float)[66] ::", 9999832342.12365F*1.0f, StrictMath.abs(9999832342.12365F));
assertEquals("abs(float)[67] ::", 9999832342.12365F*1.0f, Math.abs(9999832342.12365F));
assertEquals("abs(float)[68] ::", 9999832342.12365F*1.0f * 2f, StrictMath.abs(9999832342.12365F * 2f));
assertEquals("abs(float)[69] ::", 9999832342.12365F*1.0f * 2f, Math.abs(9999832342.12365F * 2f));
assertEquals("abs(float)[70] ::", 9999832342.12365F*1.0f * 2f, StrictMath.abs(9999832342.12365F * -2f));
assertEquals("abs(float)[71] ::", 9999832342.12365F*1.0f * 2f, Math.abs(9999832342.12365F * -2f));
assertEquals("abs(float)[72] ::", Float.MIN_VALUE*1.0f, StrictMath.abs(Float.MIN_VALUE));
assertEquals("abs(float)[73] ::", Float.MIN_VALUE*1.0f, Math.abs(Float.MIN_VALUE));
assertEquals("abs(float)[74] ::", Float.MIN_VALUE*1.0f * 2f, StrictMath.abs(Float.MIN_VALUE * 2f));
assertEquals("abs(float)[75] ::", Float.MIN_VALUE*1.0f * 2f, Math.abs(Float.MIN_VALUE * 2f));
assertEquals("abs(float)[76] ::", Float.MIN_VALUE*1.0f * 2f, StrictMath.abs(Float.MIN_VALUE * -2f));
assertEquals("abs(float)[77] ::", Float.MIN_VALUE*1.0f * 2f, Math.abs(Float.MIN_VALUE * -2f));
assertEquals("abs(float)[78] ::", (Float.MIN_VALUE * 200)*1.0f, StrictMath.abs((Float.MIN_VALUE * 200)));
assertEquals("abs(float)[79] ::", (Float.MIN_VALUE * 200)*1.0f, Math.abs((Float.MIN_VALUE * 200)));
assertEquals("abs(float)[80] ::", (Float.MIN_VALUE * 200)*1.0f * 2f, StrictMath.abs((Float.MIN_VALUE * 200) * 2f));
assertEquals("abs(float)[81] ::", (Float.MIN_VALUE * 200)*1.0f * 2f, Math.abs((Float.MIN_VALUE * 200) * 2f));
assertEquals("abs(float)[82] ::", (Float.MIN_VALUE * 200)*1.0f * 2f, StrictMath.abs((Float.MIN_VALUE * 200) * -2f));
assertEquals("abs(float)[83] ::", (Float.MIN_VALUE * 200)*1.0f * 2f, Math.abs((Float.MIN_VALUE * 200) * -2f));
assertEquals("abs(float)[84] ::", (Float.MAX_VALUE / 500)*1.0f, StrictMath.abs((Float.MAX_VALUE / 500)));
assertEquals("abs(float)[85] ::", (Float.MAX_VALUE / 500)*1.0f, Math.abs((Float.MAX_VALUE / 500)));
assertEquals("abs(float)[86] ::", (Float.MAX_VALUE / 500)*1.0f * 2f, StrictMath.abs((Float.MAX_VALUE / 500) * 2f));
assertEquals("abs(float)[87] ::", (Float.MAX_VALUE / 500)*1.0f * 2f, Math.abs((Float.MAX_VALUE / 500) * 2f));
assertEquals("abs(float)[88] ::", (Float.MAX_VALUE / 500)*1.0f * 2f, StrictMath.abs((Float.MAX_VALUE / 500) * -2f));
assertEquals("abs(float)[89] ::", (Float.MAX_VALUE / 500)*1.0f * 2f, Math.abs((Float.MAX_VALUE / 500) * -2f));
assertEquals("abs(float)[90] ::", (Float.MAX_VALUE / 200)*1.0f, StrictMath.abs((Float.MAX_VALUE / 200)));
assertEquals("abs(float)[91] ::", (Float.MAX_VALUE / 200)*1.0f, Math.abs((Float.MAX_VALUE / 200)));
assertEquals("abs(float)[92] ::", (Float.MAX_VALUE / 200)*1.0f * 2f, StrictMath.abs((Float.MAX_VALUE / 200) * 2f));
assertEquals("abs(float)[93] ::", (Float.MAX_VALUE / 200)*1.0f * 2f, Math.abs((Float.MAX_VALUE / 200) * 2f));
assertEquals("abs(float)[94] ::", (Float.MAX_VALUE / 200)*1.0f * 2f, StrictMath.abs((Float.MAX_VALUE / 200) * -2f));
assertEquals("abs(float)[95] ::", (Float.MAX_VALUE / 200)*1.0f * 2f, Math.abs((Float.MAX_VALUE / 200) * -2f));
assertEquals("abs(float)[96] ::", Float.MAX_VALUE*1.0f, StrictMath.abs(Float.MAX_VALUE));
assertEquals("abs(float)[97] ::", Float.MAX_VALUE*1.0f, Math.abs(Float.MAX_VALUE));
assertEquals("abs(float)[98] ::", Float.MAX_VALUE*1.0f * 2f, StrictMath.abs(Float.MAX_VALUE * 2f));
assertEquals("abs(float)[99] ::", Float.MAX_VALUE*1.0f * 2f, Math.abs(Float.MAX_VALUE * 2f));
assertEquals("abs(float)[100] ::", Float.MAX_VALUE*1.0f * 2f, StrictMath.abs(Float.MAX_VALUE * -2f));
assertEquals("abs(float)[101] ::", Float.MAX_VALUE*1.0f * 2f, Math.abs(Float.MAX_VALUE * -2f));
assertEquals("abs(float)[102] ::", (Float.MAX_VALUE + 1)*1.0f, StrictMath.abs((Float.MAX_VALUE + 1)));
assertEquals("abs(float)[103] ::", (Float.MAX_VALUE + 1)*1.0f, Math.abs((Float.MAX_VALUE + 1)));
assertEquals("abs(float)[104] ::", (Float.MAX_VALUE + 1)*1.0f * 2f, StrictMath.abs((Float.MAX_VALUE + 1) * 2f));
assertEquals("abs(float)[105] ::", (Float.MAX_VALUE + 1)*1.0f * 2f, Math.abs((Float.MAX_VALUE + 1) * 2f));
assertEquals("abs(float)[106] ::", (Float.MAX_VALUE + 1)*1.0f * 2f, StrictMath.abs((Float.MAX_VALUE + 1) * -2f));
assertEquals("abs(float)[107] ::", (Float.MAX_VALUE + 1)*1.0f * 2f, Math.abs((Float.MAX_VALUE + 1) * -2f));
}

public void testAbs_long()
{
assertEquals("abs(long)[0] ::", Long.MIN_VALUE, StrictMath.abs(Long.MIN_VALUE));
assertEquals("abs(long)[1] ::", Long.MIN_VALUE, Math.abs(Long.MIN_VALUE));
assertEquals("abs(long)[2] ::", Long.MIN_VALUE * 2, StrictMath.abs(Long.MIN_VALUE * 2));
assertEquals("abs(long)[3] ::", Long.MIN_VALUE * 2, Math.abs(Long.MIN_VALUE * 2));
assertEquals("abs(long)[4] ::", Long.MIN_VALUE * 2, StrictMath.abs(Long.MIN_VALUE * -2));
assertEquals("abs(long)[5] ::", Long.MIN_VALUE * 2, Math.abs(Long.MIN_VALUE * -2));
assertEquals("abs(long)[6] ::", (Long.MIN_VALUE + 1) * -1, StrictMath.abs(Long.MIN_VALUE + 1));
assertEquals("abs(long)[7] ::", (Long.MIN_VALUE + 1) * -1, Math.abs(Long.MIN_VALUE + 1));
assertEquals("abs(long)[8] ::", (Long.MIN_VALUE + 1) * -1 * -2, StrictMath.abs((Long.MIN_VALUE + 1) * 2));
assertEquals("abs(long)[9] ::", (Long.MIN_VALUE + 1) * -1 * -2, Math.abs((Long.MIN_VALUE + 1) * 2));
assertEquals("abs(long)[10] ::", (Long.MIN_VALUE + 1) * 2, StrictMath.abs((Long.MIN_VALUE + 1) * -2));
assertEquals("abs(long)[11] ::", (Long.MIN_VALUE + 1) * 2, Math.abs((Long.MIN_VALUE + 1) * -2));
assertEquals("abs(int)[12] ::", -332342L*-1, StrictMath.abs(-332342L));
assertEquals("abs(int)[13] ::", -332342L*-1, Math.abs(-332342L));
assertEquals("abs(int)[14] ::", -2L*-1, StrictMath.abs(-2L));
assertEquals("abs(int)[15] ::", -2L*-1, Math.abs(-2L));
assertEquals("abs(int)[16] ::", -1L*-1, StrictMath.abs(-1L));
assertEquals("abs(int)[17] ::", -1L*-1, Math.abs(-1L));
assertEquals("abs(int)[18] ::", 0L*1, StrictMath.abs(0L));
assertEquals("abs(int)[19] ::", 0L*1, Math.abs(0L));
assertEquals("abs(int)[20] ::", 1L*1, StrictMath.abs(1L));
assertEquals("abs(int)[21] ::", 1L*1, Math.abs(1L));
assertEquals("abs(int)[22] ::", 2L*1, StrictMath.abs(2L));
assertEquals("abs(int)[23] ::", 2L*1, Math.abs(2L));
assertEquals("abs(int)[24] ::", 348238234234L*1, StrictMath.abs(348238234234L));
assertEquals("abs(int)[25] ::", 348238234234L*1, Math.abs(348238234234L));
assertEquals("abs(int)[26] ::", (Long.MAX_VALUE - 2)*1, StrictMath.abs((Long.MAX_VALUE - 2)));
assertEquals("abs(int)[27] ::", (Long.MAX_VALUE - 2)*1, Math.abs((Long.MAX_VALUE - 2)));
assertEquals("abs(int)[28] ::", (Long.MAX_VALUE - 1)*1, StrictMath.abs((Long.MAX_VALUE - 1)));
assertEquals("abs(int)[29] ::", (Long.MAX_VALUE - 1)*1, Math.abs((Long.MAX_VALUE - 1)));
assertEquals("abs(int)[30] ::", Long.MAX_VALUE*1, StrictMath.abs(Long.MAX_VALUE));
assertEquals("abs(int)[31] ::", Long.MAX_VALUE*1, Math.abs(Long.MAX_VALUE));
}

public void testAbs_integer()
{
assertEquals("abs(int)[0] ::", Integer.MIN_VALUE, StrictMath.abs(Integer.MIN_VALUE));
assertEquals("abs(int)[1] ::", Integer.MIN_VALUE, Math.abs(Integer.MIN_VALUE));
assertEquals("abs(int)[2] ::", Integer.MIN_VALUE * 2, StrictMath.abs(Integer.MIN_VALUE * 2));
assertEquals("abs(int)[3] ::", Integer.MIN_VALUE * 2, Math.abs(Integer.MIN_VALUE * 2));
assertEquals("abs(int)[4] ::", Integer.MIN_VALUE * 2, StrictMath.abs(Integer.MIN_VALUE * -2));
assertEquals("abs(int)[5] ::", Integer.MIN_VALUE * 2, Math.abs(Integer.MIN_VALUE * -2));
assertEquals("abs(int)[6] ::", (Integer.MIN_VALUE + 1) * -1, StrictMath.abs(Integer.MIN_VALUE + 1));
assertEquals("abs(int)[7] ::", (Integer.MIN_VALUE + 1) * -1, Math.abs(Integer.MIN_VALUE + 1));
assertEquals("abs(int)[8] ::", (Integer.MIN_VALUE + 1) * -1 * -2, StrictMath.abs((Integer.MIN_VALUE + 1) * 2));
assertEquals("abs(int)[9] ::", (Integer.MIN_VALUE + 1) * -1 * -2, Math.abs((Integer.MIN_VALUE + 1) * 2));
assertEquals("abs(int)[10] ::", (Integer.MIN_VALUE + 1) * 2, StrictMath.abs((Integer.MIN_VALUE + 1) * -2));
assertEquals("abs(int)[11] ::", (Integer.MIN_VALUE + 1) * 2, Math.abs((Integer.MIN_VALUE + 1) * -2));
assertEquals("abs(int)[12] ::", -42218*-1, StrictMath.abs(-42218));
assertEquals("abs(int)[13] ::", -42218*-1, Math.abs(-42218));
assertEquals("abs(int)[14] ::", -2*-1, StrictMath.abs(-2));
assertEquals("abs(int)[15] ::", -2*-1, Math.abs(-2));
assertEquals("abs(int)[16] ::", -1*-1, StrictMath.abs(-1));
assertEquals("abs(int)[17] ::", -1*-1, Math.abs(-1));
assertEquals("abs(int)[18] ::", 0*1, StrictMath.abs(0));
assertEquals("abs(int)[19] ::", 0*1, Math.abs(0));
assertEquals("abs(int)[20] ::", 1*1, StrictMath.abs(1));
assertEquals("abs(int)[21] ::", 1*1, Math.abs(1));
assertEquals("abs(int)[22] ::", 2*1, StrictMath.abs(2));
assertEquals("abs(int)[23] ::", 2*1, Math.abs(2));
assertEquals("abs(int)[24] ::", 892389*1, StrictMath.abs(892389));
assertEquals("abs(int)[25] ::", 892389*1, Math.abs(892389));
assertEquals("abs(int)[26] ::", (Integer.MAX_VALUE - 2)*1, StrictMath.abs((Integer.MAX_VALUE - 2)));
assertEquals("abs(int)[27] ::", (Integer.MAX_VALUE - 2)*1, Math.abs((Integer.MAX_VALUE - 2)));
assertEquals("abs(int)[28] ::", (Integer.MAX_VALUE - 1)*1, StrictMath.abs((Integer.MAX_VALUE - 1)));
assertEquals("abs(int)[29] ::", (Integer.MAX_VALUE - 1)*1, Math.abs((Integer.MAX_VALUE - 1)));
assertEquals("abs(int)[30] ::", Integer.MAX_VALUE*1, StrictMath.abs(Integer.MAX_VALUE));
assertEquals("abs(int)[31] ::", Integer.MAX_VALUE*1, Math.abs(Integer.MAX_VALUE));
}

public void testAcos()
{
assertEquals("acos(double)[0] ::", 1.5707963267948966, StrictMath.acos((-Double.MIN_VALUE * 2000)));
assertTrue("acos(double)[1] ::", 1.5707963267948963 <= Math.acos((-Double.MIN_VALUE * 2000)) && 1.5707963267948968 >= Math.acos((-Double.MIN_VALUE * 2000)));
assertTrue("acos(double)[2] ::", 1.5707963267948963 <= Math.acos((-Double.MIN_VALUE * 2000)) && 1.5707963267948968 >= Math.acos((-Double.MIN_VALUE * 2000)));
assertEquals("acos(double)[3] ::", 1.5707963267948966, StrictMath.acos((-Double.MIN_VALUE * 1000)));
assertTrue("acos(double)[4] ::", 1.5707963267948963 <= Math.acos((-Double.MIN_VALUE * 1000)) && 1.5707963267948968 >= Math.acos((-Double.MIN_VALUE * 1000)));
assertTrue("acos(double)[5] ::", 1.5707963267948963 <= Math.acos((-Double.MIN_VALUE * 1000)) && 1.5707963267948968 >= Math.acos((-Double.MIN_VALUE * 1000)));
assertEquals("acos(double)[6] ::", 1.5707963267948966, StrictMath.acos(0D));
assertTrue("acos(double)[7] ::", 1.5707963267948963 <= Math.acos(0D) && 1.5707963267948968 >= Math.acos(0D));
assertTrue("acos(double)[8] ::", 1.5707963267948963 <= Math.acos(0D) && 1.5707963267948968 >= Math.acos(0D));
assertEquals("acos(double)[9] ::", 1.5707963267948966, StrictMath.acos(Double.MIN_VALUE));
assertTrue("acos(double)[10] ::", 1.5707963267948963 <= Math.acos(Double.MIN_VALUE) && 1.5707963267948968 >= Math.acos(Double.MIN_VALUE));
assertTrue("acos(double)[11] ::", 1.5707963267948963 <= Math.acos(Double.MIN_VALUE) && 1.5707963267948968 >= Math.acos(Double.MIN_VALUE));
assertEquals("acos(double)[12] ::", 1.5707963267948966, StrictMath.acos((Double.MIN_VALUE * 200)));
assertTrue("acos(double)[13] ::", 1.5707963267948963 <= Math.acos((Double.MIN_VALUE * 200)) && 1.5707963267948968 >= Math.acos((Double.MIN_VALUE * 200)));
assertTrue("acos(double)[14] ::", 1.5707963267948963 <= Math.acos((Double.MIN_VALUE * 200)) && 1.5707963267948968 >= Math.acos((Double.MIN_VALUE * 200)));
assertEquals("acos(float)[15] ::", 1.5707963267948966, StrictMath.acos((-Float.MIN_VALUE * 2000)));
assertTrue("acos(float)[16] ::", 1.5707963267948963 <= Math.acos((-Float.MIN_VALUE * 2000)) && 1.5707963267948968 >= Math.acos((-Float.MIN_VALUE * 2000)));
assertEquals("acos(float)[17] ::", 1.5707963267948966, StrictMath.acos((-Float.MIN_VALUE * 1000)));
assertTrue("acos(float)[18] ::", 1.5707963267948963 <= Math.acos((-Float.MIN_VALUE * 1000)) && 1.5707963267948968 >= Math.acos((-Float.MIN_VALUE * 1000)));
assertEquals("acos(float)[19] ::", 1.5707963357948964, StrictMath.acos(-0.000000009F));
assertTrue("acos(float)[20] ::", 1.5707963357948962 <= Math.acos(-0.000000009F) && 1.5707963357948966 >= Math.acos(-0.000000009F));
assertEquals("acos(float)[21] ::", 1.570796526794899, StrictMath.acos(-0.0000002F));
assertTrue("acos(float)[22] ::", 1.5707965267948987 <= Math.acos(-0.0000002F) && 1.5707965267948991 >= Math.acos(-0.0000002F));
assertEquals("acos(float)[23] ::", 1.5707963267948966, StrictMath.acos(0F));
assertTrue("acos(float)[24] ::", 1.5707963267948963 <= Math.acos(0F) && 1.5707963267948968 >= Math.acos(0F));
assertEquals("acos(float)[25] ::", 1.0970397360295143, StrictMath.acos(0.456232334F));
assertTrue("acos(float)[26] ::", 1.097039736029514 <= Math.acos(0.456232334F) && 1.0970397360295145 >= Math.acos(0.456232334F));
assertEquals("acos(float)[27] ::", 1.5707963267948966, StrictMath.acos(Float.MIN_VALUE));
assertTrue("acos(float)[28] ::", 1.5707963267948963 <= Math.acos(Float.MIN_VALUE) && 1.5707963267948968 >= Math.acos(Float.MIN_VALUE));
assertEquals("acos(float)[29] ::", 1.5707963267948966, StrictMath.acos((Float.MIN_VALUE * 200)));
assertTrue("acos(float)[30] ::", 1.5707963267948963 <= Math.acos((Float.MIN_VALUE * 200)) && 1.5707963267948968 >= Math.acos((Float.MIN_VALUE * 200)));
assertEquals("acos(long)[31] ::", 3.141592653589793, StrictMath.acos(-1L));
assertTrue("acos(long)[32] ::", 3.1415926535897927 <= Math.acos(-1L) && 3.1415926535897936 >= Math.acos(-1L));
assertEquals("acos(long)[33] ::", 1.5707963267948966, StrictMath.acos(0L));
assertTrue("acos(long)[34] ::", 1.5707963267948963 <= Math.acos(0L) && 1.5707963267948968 >= Math.acos(0L));
assertEquals("acos(long)[35] ::", 0.0, StrictMath.acos(1L));
assertTrue("acos(long)[36] ::", -4.9E-324 <= Math.acos(1L) && 4.9E-324 >= Math.acos(1L));
assertEquals("acos(int)[37] ::", 3.141592653589793, StrictMath.acos(-1));
assertTrue("acos(int)[38] ::", 3.1415926535897927 <= Math.acos(-1) && 3.1415926535897936 >= Math.acos(-1));
assertEquals("acos(int)[39] ::", 1.5707963267948966, StrictMath.acos(0));
assertTrue("acos(int)[40] ::", 1.5707963267948963 <= Math.acos(0) && 1.5707963267948968 >= Math.acos(0));
assertEquals("acos(int)[41] ::", 0.0, StrictMath.acos(1));
assertTrue("acos(int)[42] ::", -4.9E-324 <= Math.acos(1) && 4.9E-324 >= Math.acos(1));
}

public void testAsin()
{
assertEquals("asin(double)[0] ::", -9.88E-321, StrictMath.asin((-Double.MIN_VALUE * 2000)));
assertTrue("asin(double)[1] ::", -9.886E-321 <= Math.asin((-Double.MIN_VALUE * 2000)) && -9.876E-321 >= Math.asin((-Double.MIN_VALUE * 2000)));
assertEquals("asin(double)[2] ::", -4.94E-321, StrictMath.asin((-Double.MIN_VALUE * 1000)));
assertTrue("asin(double)[3] ::", -4.946E-321 <= Math.asin((-Double.MIN_VALUE * 1000)) && -4.936E-321 >= Math.asin((-Double.MIN_VALUE * 1000)));
assertEquals("asin(double)[4] ::", 0.0, StrictMath.asin(0D));
assertTrue("asin(double)[5] ::", -4.9E-324 <= Math.asin(0D) && 4.9E-324 >= Math.asin(0D));
assertEquals("asin(double)[6] ::", 4.9E-324, StrictMath.asin(Double.MIN_VALUE));
assertTrue("asin(double)[7] ::", 0.0 <= Math.asin(Double.MIN_VALUE) && 1.0E-323 >= Math.asin(Double.MIN_VALUE));
assertEquals("asin(double)[8] ::", 9.9E-322, StrictMath.asin((Double.MIN_VALUE * 200)));
assertTrue("asin(double)[9] ::", 9.83E-322 <= Math.asin((Double.MIN_VALUE * 200)) && 9.93E-322 >= Math.asin((Double.MIN_VALUE * 200)));
assertEquals("asin(float)[10] ::", -2.802596928649634E-42, StrictMath.asin((-Float.MIN_VALUE * 2000)));
assertTrue("asin(float)[11] ::", -2.8025969286496345E-42 <= Math.asin((-Float.MIN_VALUE * 2000)) && -2.8025969286496338E-42 >= Math.asin((-Float.MIN_VALUE * 2000)));
assertEquals("asin(float)[12] ::", -1.401298464324817E-42, StrictMath.asin((-Float.MIN_VALUE * 1000)));
assertTrue("asin(float)[13] ::", -1.4012984643248172E-42 <= Math.asin((-Float.MIN_VALUE * 1000)) && -1.4012984643248169E-42 >= Math.asin((-Float.MIN_VALUE * 1000)));
assertEquals("asin(float)[14] ::", -8.99999985648492E-9, StrictMath.asin(-0.000000009F));
assertTrue("asin(float)[15] ::", -8.999999856484921E-9 <= Math.asin(-0.000000009F) && -8.999999856484918E-9 >= Math.asin(-0.000000009F));
assertEquals("asin(float)[16] ::", -2.000000023372208E-7, StrictMath.asin(-0.0000002F));
assertTrue("asin(float)[17] ::", -2.0000000233722083E-7 <= Math.asin(-0.0000002F) && -2.0000000233722078E-7 >= Math.asin(-0.0000002F));
assertEquals("asin(float)[18] ::", 0.0, StrictMath.asin(0F));
assertTrue("asin(float)[19] ::", -4.9E-324 <= Math.asin(0F) && 4.9E-324 >= Math.asin(0F));
assertEquals("asin(float)[20] ::", 0.47375659076538235, StrictMath.asin(0.456232334F));
assertTrue("asin(float)[21] ::", 0.4737565907653823 <= Math.asin(0.456232334F) && 0.4737565907653824 >= Math.asin(0.456232334F));
assertEquals("asin(float)[22] ::", 1.401298464324817E-45, StrictMath.asin(Float.MIN_VALUE));
assertTrue("asin(float)[23] ::", 1.4012984643248168E-45 <= Math.asin(Float.MIN_VALUE) && 1.4012984643248174E-45 >= Math.asin(Float.MIN_VALUE));
assertEquals("asin(float)[24] ::", 2.802596928649634E-43, StrictMath.asin((Float.MIN_VALUE * 200)));
assertTrue("asin(float)[25] ::", 2.8025969286496337E-43 <= Math.asin((Float.MIN_VALUE * 200)) && 2.8025969286496345E-43 >= Math.asin((Float.MIN_VALUE * 200)));
assertEquals("asin(long)[26] ::", -1.5707963267948966, StrictMath.asin(-1L));
assertTrue("asin(long)[27] ::", -1.5707963267948968 <= Math.asin(-1L) && -1.5707963267948963 >= Math.asin(-1L));
assertEquals("asin(long)[28] ::", 0.0, StrictMath.asin(0L));
assertTrue("asin(long)[29] ::", -4.9E-324 <= Math.asin(0L) && 4.9E-324 >= Math.asin(0L));
assertEquals("asin(long)[30] ::", 1.5707963267948966, StrictMath.asin(1L));
assertTrue("asin(long)[31] ::", 1.5707963267948963 <= Math.asin(1L) && 1.5707963267948968 >= Math.asin(1L));
assertEquals("asin(int)[32] ::", -1.5707963267948966, StrictMath.asin(-1));
assertTrue("asin(int)[33] ::", -1.5707963267948968 <= Math.asin(-1) && -1.5707963267948963 >= Math.asin(-1));
assertEquals("asin(int)[34] ::", 0.0, StrictMath.asin(0));
assertTrue("asin(int)[35] ::", -4.9E-324 <= Math.asin(0) && 4.9E-324 >= Math.asin(0));
assertEquals("asin(int)[36] ::", 1.5707963267948966, StrictMath.asin(1));
assertTrue("asin(int)[37] ::", 1.5707963267948963 <= Math.asin(1) && 1.5707963267948968 >= Math.asin(1));
}

public void testAtan()
{
assertEquals("atan(double)[0] ::", -1.5707963267948966, StrictMath.atan(-Double.MAX_VALUE));
assertTrue("atan(double)[1] ::", -1.5707963267948968 <= Math.atan(-Double.MAX_VALUE) && -1.5707963267948963 >= Math.atan(-Double.MAX_VALUE));
assertEquals("atan(double)[2] ::", -1.5707963267948966, StrictMath.atan((-Double.MAX_VALUE / 200)));
assertTrue("atan(double)[3] ::", -1.5707963267948968 <= Math.atan((-Double.MAX_VALUE / 200)) && -1.5707963267948963 >= Math.atan((-Double.MAX_VALUE / 200)));
assertEquals("atan(double)[4] ::", -1.5707963267948966, StrictMath.atan((-Double.MAX_VALUE / 500)));
assertTrue("atan(double)[5] ::", -1.5707963267948968 <= Math.atan((-Double.MAX_VALUE / 500)) && -1.5707963267948963 >= Math.atan((-Double.MAX_VALUE / 500)));
assertEquals("atan(double)[6] ::", -9.88E-321, StrictMath.atan((-Double.MIN_VALUE * 2000)));
assertTrue("atan(double)[7] ::", -9.886E-321 <= Math.atan((-Double.MIN_VALUE * 2000)) && -9.876E-321 >= Math.atan((-Double.MIN_VALUE * 2000)));
assertEquals("atan(double)[8] ::", -4.94E-321, StrictMath.atan((-Double.MIN_VALUE * 1000)));
assertTrue("atan(double)[9] ::", -4.946E-321 <= Math.atan((-Double.MIN_VALUE * 1000)) && -4.936E-321 >= Math.atan((-Double.MIN_VALUE * 1000)));
assertEquals("atan(double)[10] ::", -1.5707963264534963, StrictMath.atan(-2929112212.129231481346));
assertTrue("atan(double)[11] ::", -1.5707963264534965 <= Math.atan(-2929112212.129231481346) && -1.570796326453496 >= Math.atan(-2929112212.129231481346));
assertEquals("atan(double)[12] ::", -1.5703747822168042, StrictMath.atan(-2372.228212D));
assertTrue("atan(double)[13] ::", -1.5703747822168044 <= Math.atan(-2372.228212D) && -1.570374782216804 >= Math.atan(-2372.228212D));
assertEquals("atan(double)[14] ::", -0.8854587072790011, StrictMath.atan(-1.2232D));
assertTrue("atan(double)[15] ::", -0.8854587072790012 <= Math.atan(-1.2232D) && -0.885458707279001 >= Math.atan(-1.2232D));
assertEquals("atan(double)[16] ::", 0.0, StrictMath.atan(0D));
assertTrue("atan(double)[17] ::", -4.9E-324 <= Math.atan(0D) && 4.9E-324 >= Math.atan(0D));
assertEquals("atan(double)[18] ::", 1.1807189853657203, StrictMath.atan(2.43223D));
assertTrue("atan(double)[19] ::", 1.18071898536572 <= Math.atan(2.43223D) && 1.1807189853657205 >= Math.atan(2.43223D));
assertEquals("atan(double)[20] ::", 1.570796271946746, StrictMath.atan(18232155.3323566D));
assertTrue("atan(double)[21] ::", 1.5707962719467459 <= Math.atan(18232155.3323566D) && 1.5707962719467463 >= Math.atan(18232155.3323566D));
assertEquals("atan(double)[22] ::", 4.9E-324, StrictMath.atan(Double.MIN_VALUE));
assertTrue("atan(double)[23] ::", 0.0 <= Math.atan(Double.MIN_VALUE) && 1.0E-323 >= Math.atan(Double.MIN_VALUE));
assertEquals("atan(double)[24] ::", 9.9E-322, StrictMath.atan((Double.MIN_VALUE * 200)));
assertTrue("atan(double)[25] ::", 9.83E-322 <= Math.atan((Double.MIN_VALUE * 200)) && 9.93E-322 >= Math.atan((Double.MIN_VALUE * 200)));
assertEquals("atan(double)[26] ::", 1.5707963267948966, StrictMath.atan((Double.MAX_VALUE / 500)));
assertTrue("atan(double)[27] ::", 1.5707963267948963 <= Math.atan((Double.MAX_VALUE / 500)) && 1.5707963267948968 >= Math.atan((Double.MAX_VALUE / 500)));
assertEquals("atan(double)[28] ::", 1.5707963267948966, StrictMath.atan((Double.MAX_VALUE / 200)));
assertTrue("atan(double)[29] ::", 1.5707963267948963 <= Math.atan((Double.MAX_VALUE / 200)) && 1.5707963267948968 >= Math.atan((Double.MAX_VALUE / 200)));
assertEquals("atan(double)[30] ::", 1.5707963267948966, StrictMath.atan(Double.MAX_VALUE));
assertTrue("atan(double)[31] ::", 1.5707963267948963 <= Math.atan(Double.MAX_VALUE) && 1.5707963267948968 >= Math.atan(Double.MAX_VALUE));
assertEquals("atan(double)[32] ::", 1.5707963267948966, StrictMath.atan(Double.MAX_VALUE + 1));
assertTrue("atan(double)[33] ::", 1.5707963267948963 <= Math.atan(Double.MAX_VALUE + 1) && 1.5707963267948968 >= Math.atan(Double.MAX_VALUE + 1));
assertEquals("atan(float)[34] ::", -1.5707963267948966, StrictMath.atan(-Float.MAX_VALUE));
assertTrue("atan(float)[35] ::", -1.5707963267948968 <= Math.atan(-Float.MAX_VALUE) && -1.5707963267948963 >= Math.atan(-Float.MAX_VALUE));
assertEquals("atan(float)[36] ::", -1.5707963267948966, StrictMath.atan((-Float.MAX_VALUE / 200)));
assertTrue("atan(float)[37] ::", -1.5707963267948968 <= Math.atan((-Float.MAX_VALUE / 200)) && -1.5707963267948963 >= Math.atan((-Float.MAX_VALUE / 200)));
assertEquals("atan(float)[38] ::", -1.5707963267948966, StrictMath.atan((-Float.MAX_VALUE / 500)));
assertTrue("atan(float)[39] ::", -1.5707963267948968 <= Math.atan((-Float.MAX_VALUE / 500)) && -1.5707963267948963 >= Math.atan((-Float.MAX_VALUE / 500)));
assertEquals("atan(float)[40] ::", -2.802596928649634E-42, StrictMath.atan((-Float.MIN_VALUE * 2000)));
assertTrue("atan(float)[41] ::", -2.8025969286496345E-42 <= Math.atan((-Float.MIN_VALUE * 2000)) && -2.8025969286496338E-42 >= Math.atan((-Float.MIN_VALUE * 2000)));
assertEquals("atan(float)[42] ::", -1.401298464324817E-42, StrictMath.atan((-Float.MIN_VALUE * 1000)));
assertTrue("atan(float)[43] ::", -1.4012984643248172E-42 <= Math.atan((-Float.MIN_VALUE * 1000)) && -1.4012984643248169E-42 >= Math.atan((-Float.MIN_VALUE * 1000)));
assertEquals("atan(float)[44] ::", -1.5707962964447297, StrictMath.atan(-32948748.958324F));
assertTrue("atan(float)[45] ::", -1.57079629644473 <= Math.atan(-32948748.958324F) && -1.5707962964447295 >= Math.atan(-32948748.958324F));
assertEquals("atan(float)[46] ::", -8.99999985648492E-9, StrictMath.atan(-0.000000009F));
assertTrue("atan(float)[47] ::", -8.999999856484921E-9 <= Math.atan(-0.000000009F) && -8.999999856484918E-9 >= Math.atan(-0.000000009F));
assertEquals("atan(float)[48] ::", -2.000000023372168E-7, StrictMath.atan(-0.0000002F));
assertTrue("atan(float)[49] ::", -2.0000000233721684E-7 <= Math.atan(-0.0000002F) && -2.0000000233721678E-7 >= Math.atan(-0.0000002F));
assertEquals("atan(float)[50] ::", 0.0, StrictMath.atan(0F));
assertTrue("atan(float)[51] ::", -4.9E-324 <= Math.atan(0F) && 4.9E-324 >= Math.atan(0F));
assertEquals("atan(float)[52] ::", 0.42802463886854475, StrictMath.atan(0.456232334F));
assertTrue("atan(float)[53] ::", 0.4280246388685447 <= Math.atan(0.456232334F) && 0.4280246388685448 >= Math.atan(0.456232334F));
assertEquals("atan(float)[54] ::", 1.5707955099731052, StrictMath.atan(1224257.312321263F));
assertTrue("atan(float)[55] ::", 1.570795509973105 <= Math.atan(1224257.312321263F) && 1.5707955099731055 >= Math.atan(1224257.312321263F));
assertEquals("atan(float)[56] ::", 1.570796326694895, StrictMath.atan(9999832342.12365F));
assertTrue("atan(float)[57] ::", 1.5707963266948948 <= Math.atan(9999832342.12365F) && 1.5707963266948952 >= Math.atan(9999832342.12365F));
assertEquals("atan(float)[58] ::", 1.401298464324817E-45, StrictMath.atan(Float.MIN_VALUE));
assertTrue("atan(float)[59] ::", 1.4012984643248168E-45 <= Math.atan(Float.MIN_VALUE) && 1.4012984643248174E-45 >= Math.atan(Float.MIN_VALUE));
assertEquals("atan(float)[60] ::", 2.802596928649634E-43, StrictMath.atan((Float.MIN_VALUE * 200)));
assertTrue("atan(float)[61] ::", 2.8025969286496337E-43 <= Math.atan((Float.MIN_VALUE * 200)) && 2.8025969286496345E-43 >= Math.atan((Float.MIN_VALUE * 200)));
assertEquals("atan(float)[62] ::", 1.5707963267948966, StrictMath.atan((Float.MAX_VALUE / 500)));
assertTrue("atan(float)[63] ::", 1.5707963267948963 <= Math.atan((Float.MAX_VALUE / 500)) && 1.5707963267948968 >= Math.atan((Float.MAX_VALUE / 500)));
assertEquals("atan(float)[64] ::", 1.5707963267948966, StrictMath.atan((Float.MAX_VALUE / 200)));
assertTrue("atan(float)[65] ::", 1.5707963267948963 <= Math.atan((Float.MAX_VALUE / 200)) && 1.5707963267948968 >= Math.atan((Float.MAX_VALUE / 200)));
assertEquals("atan(float)[66] ::", 1.5707963267948966, StrictMath.atan(Float.MAX_VALUE));
assertTrue("atan(float)[67] ::", 1.5707963267948963 <= Math.atan(Float.MAX_VALUE) && 1.5707963267948968 >= Math.atan(Float.MAX_VALUE));
assertEquals("atan(float)[68] ::", 1.5707963267948966, StrictMath.atan((Float.MAX_VALUE + 1)));
assertTrue("atan(float)[69] ::", 1.5707963267948963 <= Math.atan((Float.MAX_VALUE + 1)) && 1.5707963267948968 >= Math.atan((Float.MAX_VALUE + 1)));
assertEquals("atan(long)[70] ::", -1.5707963267948966, StrictMath.atan(Long.MIN_VALUE));
assertTrue("atan(long)[71] ::", -1.5707963267948968 <= Math.atan(Long.MIN_VALUE) && -1.5707963267948963 >= Math.atan(Long.MIN_VALUE));
assertEquals("atan(long)[72] ::", -1.5707963267948966, StrictMath.atan((Long.MIN_VALUE + 1)));
assertTrue("atan(long)[73] ::", -1.5707963267948968 <= Math.atan((Long.MIN_VALUE + 1)) && -1.5707963267948963 >= Math.atan((Long.MIN_VALUE + 1)));
assertEquals("atan(long)[74] ::", -1.5707963267948966, StrictMath.atan((Long.MIN_VALUE + 2)));
assertTrue("atan(long)[75] ::", -1.5707963267948968 <= Math.atan((Long.MIN_VALUE + 2)) && -1.5707963267948963 >= Math.atan((Long.MIN_VALUE + 2)));
assertEquals("atan(long)[76] ::", -1.5707933178462834, StrictMath.atan(-332342L));
assertTrue("atan(long)[77] ::", -1.5707933178462836 <= Math.atan(-332342L) && -1.5707933178462832 >= Math.atan(-332342L));
assertEquals("atan(long)[78] ::", -1.1071487177940904, StrictMath.atan(-2L));
assertTrue("atan(long)[79] ::", -1.1071487177940906 <= Math.atan(-2L) && -1.1071487177940902 >= Math.atan(-2L));
assertEquals("atan(long)[80] ::", -0.7853981633974483, StrictMath.atan(-1L));
assertTrue("atan(long)[81] ::", -0.7853981633974484 <= Math.atan(-1L) && -0.7853981633974482 >= Math.atan(-1L));
assertEquals("atan(long)[82] ::", 0.0, StrictMath.atan(0L));
assertTrue("atan(long)[83] ::", -4.9E-324 <= Math.atan(0L) && 4.9E-324 >= Math.atan(0L));
assertEquals("atan(long)[84] ::", 0.7853981633974483, StrictMath.atan(1L));
assertTrue("atan(long)[85] ::", 0.7853981633974482 <= Math.atan(1L) && 0.7853981633974484 >= Math.atan(1L));
assertEquals("atan(long)[86] ::", 1.1071487177940904, StrictMath.atan(2L));
assertTrue("atan(long)[87] ::", 1.1071487177940902 <= Math.atan(2L) && 1.1071487177940906 >= Math.atan(2L));
assertEquals("atan(long)[88] ::", 1.570796326792025, StrictMath.atan(348238234234L));
assertTrue("atan(long)[89] ::", 1.5707963267920249 <= Math.atan(348238234234L) && 1.5707963267920253 >= Math.atan(348238234234L));
assertEquals("atan(long)[90] ::", 1.5707963267948966, StrictMath.atan((Long.MAX_VALUE - 2)));
assertTrue("atan(long)[91] ::", 1.5707963267948963 <= Math.atan((Long.MAX_VALUE - 2)) && 1.5707963267948968 >= Math.atan((Long.MAX_VALUE - 2)));
assertEquals("atan(long)[92] ::", 1.5707963267948966, StrictMath.atan((Long.MAX_VALUE - 1)));
assertTrue("atan(long)[93] ::", 1.5707963267948963 <= Math.atan((Long.MAX_VALUE - 1)) && 1.5707963267948968 >= Math.atan((Long.MAX_VALUE - 1)));
assertEquals("atan(long)[94] ::", 1.5707963267948966, StrictMath.atan(Long.MAX_VALUE));
assertTrue("atan(long)[95] ::", 1.5707963267948963 <= Math.atan(Long.MAX_VALUE) && 1.5707963267948968 >= Math.atan(Long.MAX_VALUE));
assertEquals("atan(int)[96] ::", -1.5707963263292353, StrictMath.atan(Integer.MIN_VALUE));
assertTrue("atan(int)[97] ::", -1.5707963263292355 <= Math.atan(Integer.MIN_VALUE) && -1.570796326329235 >= Math.atan(Integer.MIN_VALUE));
assertEquals("atan(int)[98] ::", -1.5707963263292353, StrictMath.atan((Integer.MIN_VALUE + 1)));
assertTrue("atan(int)[99] ::", -1.5707963263292355 <= Math.atan((Integer.MIN_VALUE + 1)) && -1.570796326329235 >= Math.atan((Integer.MIN_VALUE + 1)));
assertEquals("atan(int)[100] ::", -1.5707963263292353, StrictMath.atan((Integer.MIN_VALUE + 2)));
assertTrue("atan(int)[101] ::", -1.5707963263292355 <= Math.atan((Integer.MIN_VALUE + 2)) && -1.570796326329235 >= Math.atan((Integer.MIN_VALUE + 2)));
assertEquals("atan(int)[102] ::", -1.5707726402157167, StrictMath.atan(-42218));
assertTrue("atan(int)[103] ::", -1.570772640215717 <= Math.atan(-42218) && -1.5707726402157165 >= Math.atan(-42218));
assertEquals("atan(int)[104] ::", -1.1071487177940904, StrictMath.atan(-2));
assertTrue("atan(int)[105] ::", -1.1071487177940906 <= Math.atan(-2) && -1.1071487177940902 >= Math.atan(-2));
assertEquals("atan(int)[106] ::", -0.7853981633974483, StrictMath.atan(-1));
assertTrue("atan(int)[107] ::", -0.7853981633974484 <= Math.atan(-1) && -0.7853981633974482 >= Math.atan(-1));
assertEquals("atan(int)[108] ::", 0.0, StrictMath.atan(0));
assertTrue("atan(int)[109] ::", -4.9E-324 <= Math.atan(0) && 4.9E-324 >= Math.atan(0));
assertEquals("atan(int)[110] ::", 0.7853981633974483, StrictMath.atan(1));
assertTrue("atan(int)[111] ::", 0.7853981633974482 <= Math.atan(1) && 0.7853981633974484 >= Math.atan(1));
assertEquals("atan(int)[112] ::", 1.1071487177940904, StrictMath.atan(2));
assertTrue("atan(int)[113] ::", 1.1071487177940902 <= Math.atan(2) && 1.1071487177940906 >= Math.atan(2));
assertEquals("atan(int)[114] ::", 1.5707952062073502, StrictMath.atan(892389));
assertTrue("atan(int)[115] ::", 1.57079520620735 <= Math.atan(892389) && 1.5707952062073505 >= Math.atan(892389));
assertEquals("atan(int)[116] ::", 1.5707963263292353, StrictMath.atan((Integer.MAX_VALUE - 2)));
assertTrue("atan(int)[117] ::", 1.570796326329235 <= Math.atan((Integer.MAX_VALUE - 2)) && 1.5707963263292355 >= Math.atan((Integer.MAX_VALUE - 2)));
assertEquals("atan(int)[118] ::", 1.5707963263292353, StrictMath.atan((Integer.MAX_VALUE - 1)));
assertTrue("atan(int)[119] ::", 1.570796326329235 <= Math.atan((Integer.MAX_VALUE - 1)) && 1.5707963263292355 >= Math.atan((Integer.MAX_VALUE - 1)));
assertEquals("atan(int)[120] ::", 1.5707963263292353, StrictMath.atan(Integer.MAX_VALUE));
assertTrue("atan(int)[121] ::", 1.570796326329235 <= Math.atan(Integer.MAX_VALUE) && 1.5707963263292355 >= Math.atan(Integer.MAX_VALUE));
}

public void testAtan2()
{
assertEquals("atan2(double,double)[0] ::", -1.575796285128855, StrictMath.atan2(-Double.MAX_VALUE,(-Double.MAX_VALUE / 200)));
assertTrue("atan2(double,double)[1] ::", -1.5757962851288552 <= Math.atan2(-Double.MAX_VALUE,(-Double.MAX_VALUE / 200)) && -1.5757962851288547 >= Math.atan2(-Double.MAX_VALUE,(-Double.MAX_VALUE / 200)));
assertEquals("atan2(double,double)[2] ::", -1.9513027039072617, StrictMath.atan2((-Double.MAX_VALUE / 200),(-Double.MAX_VALUE / 500)));
assertTrue("atan2(double,double)[3] ::", -1.951302703907262 <= Math.atan2((-Double.MAX_VALUE / 200),(-Double.MAX_VALUE / 500)) && -1.9513027039072615 >= Math.atan2((-Double.MAX_VALUE / 200),(-Double.MAX_VALUE / 500)));
assertEquals("atan2(double,double)[4] ::", -1.5707963267948968, StrictMath.atan2((-Double.MAX_VALUE / 500),(-Double.MIN_VALUE * 2000)));
assertTrue("atan2(double,double)[5] ::", -1.570796326794897 <= Math.atan2((-Double.MAX_VALUE / 500),(-Double.MIN_VALUE * 2000)) && -1.5707963267948966 >= Math.atan2((-Double.MAX_VALUE / 500),(-Double.MIN_VALUE * 2000)));
assertEquals("atan2(double,double)[6] ::", -2.0344439357957027, StrictMath.atan2((-Double.MIN_VALUE * 2000),(-Double.MIN_VALUE * 1000)));
assertTrue("atan2(double,double)[7] ::", -2.034443935795703 <= Math.atan2((-Double.MIN_VALUE * 2000),(-Double.MIN_VALUE * 1000)) && -2.0344439357957023 >= Math.atan2((-Double.MIN_VALUE * 2000),(-Double.MIN_VALUE * 1000)));
assertEquals("atan2(double,double)[8] ::", -3.141592653589793, StrictMath.atan2((-Double.MIN_VALUE * 1000),-2929112212.129231481346));
assertTrue("atan2(double,double)[9] ::", -3.1415926535897936 <= Math.atan2((-Double.MIN_VALUE * 1000),-2929112212.129231481346) && -3.1415926535897927 >= Math.atan2((-Double.MIN_VALUE * 1000),-2929112212.129231481346));
assertEquals("atan2(double,double)[10] ::", -1.5707971366744917, StrictMath.atan2(-2929112212.129231481346,-2372.228212D));
assertTrue("atan2(double,double)[11] ::", -1.570797136674492 <= Math.atan2(-2929112212.129231481346,-2372.228212D) && -1.5707971366744915 >= Math.atan2(-2929112212.129231481346,-2372.228212D));
assertEquals("atan2(double,double)[12] ::", -1.5713119601076637, StrictMath.atan2(-2372.228212D,-1.2232D));
assertTrue("atan2(double,double)[13] ::", -1.571311960107664 <= Math.atan2(-2372.228212D,-1.2232D) && -1.5713119601076635 >= Math.atan2(-2372.228212D,-1.2232D));
assertEquals("atan2(double,double)[14] ::", -1.5707963267948966, StrictMath.atan2(-1.2232D,0D));
assertTrue("atan2(double,double)[15] ::", -1.5707963267948968 <= Math.atan2(-1.2232D,0D) && -1.5707963267948963 >= Math.atan2(-1.2232D,0D));
assertEquals("atan2(double,double)[16] ::", 0.0, StrictMath.atan2(0D,2.43223D));
assertTrue("atan2(double,double)[17] ::", -4.9E-324 <= Math.atan2(0D,2.43223D) && 4.9E-324 >= Math.atan2(0D,2.43223D));
assertEquals("atan2(double,double)[18] ::", 1.334033171428453E-7, StrictMath.atan2(2.43223D,18232155.3323566D));
assertTrue("atan2(double,double)[19] ::", 1.3340331714284528E-7 <= Math.atan2(2.43223D,18232155.3323566D) && 1.3340331714284534E-7 >= Math.atan2(2.43223D,18232155.3323566D));
assertEquals("atan2(double,double)[20] ::", 1.5707963267948966, StrictMath.atan2(18232155.3323566D,Double.MIN_VALUE));
assertTrue("atan2(double,double)[21] ::", 1.5707963267948963 <= Math.atan2(18232155.3323566D,Double.MIN_VALUE) && 1.5707963267948968 >= Math.atan2(18232155.3323566D,Double.MIN_VALUE));
assertEquals("atan2(double,double)[22] ::", 0.0049999583339583225, StrictMath.atan2(Double.MIN_VALUE,(Double.MIN_VALUE * 200)));
assertTrue("atan2(double,double)[23] ::", 0.004999958333958322 <= Math.atan2(Double.MIN_VALUE,(Double.MIN_VALUE * 200)) && 0.004999958333958323 >= Math.atan2(Double.MIN_VALUE,(Double.MIN_VALUE * 200)));
assertEquals("atan2(double,double)[24] ::", 0.0, StrictMath.atan2((Double.MIN_VALUE * 200),(Double.MAX_VALUE / 500)));
assertTrue("atan2(double,double)[25] ::", -4.9E-324 <= Math.atan2((Double.MIN_VALUE * 200),(Double.MAX_VALUE / 500)) && 4.9E-324 >= Math.atan2((Double.MIN_VALUE * 200),(Double.MAX_VALUE / 500)));
assertEquals("atan2(double,double)[26] ::", 0.38050637711236485, StrictMath.atan2((Double.MAX_VALUE / 500),(Double.MAX_VALUE / 200)));
assertTrue("atan2(double,double)[27] ::", 0.3805063771123648 <= Math.atan2((Double.MAX_VALUE / 500),(Double.MAX_VALUE / 200)) && 0.3805063771123649 >= Math.atan2((Double.MAX_VALUE / 500),(Double.MAX_VALUE / 200)));
assertEquals("atan2(double,double)[28] ::", 0.0049999583339583225, StrictMath.atan2((Double.MAX_VALUE / 200),Double.MAX_VALUE));
assertTrue("atan2(double,double)[29] ::", 0.004999958333958322 <= Math.atan2((Double.MAX_VALUE / 200),Double.MAX_VALUE) && 0.004999958333958323 >= Math.atan2((Double.MAX_VALUE / 200),Double.MAX_VALUE));
assertEquals("atan2(double,double)[30] ::", 0.7853981633974483, StrictMath.atan2(Double.MAX_VALUE,Double.MAX_VALUE + 1));
assertTrue("atan2(double,double)[31] ::", 0.7853981633974482 <= Math.atan2(Double.MAX_VALUE,Double.MAX_VALUE + 1) && 0.7853981633974484 >= Math.atan2(Double.MAX_VALUE,Double.MAX_VALUE + 1));
}

public void testCbrt()
{
assertEquals("cbrt(double)[0] ::", -5.643803094122362E102, StrictMath.cbrt(-Double.MAX_VALUE));
assertTrue("cbrt(double)[1] ::", -5.643803094122363E102 <= Math.cbrt(-Double.MAX_VALUE) && -5.643803094122361E102 >= Math.cbrt(-Double.MAX_VALUE));
assertEquals("cbrt(double)[2] ::", -9.650767538728758E101, StrictMath.cbrt((-Double.MAX_VALUE / 200)));
assertTrue("cbrt(double)[3] ::", -9.650767538728759E101 <= Math.cbrt((-Double.MAX_VALUE / 200)) && -9.650767538728756E101 >= Math.cbrt((-Double.MAX_VALUE / 200)));
assertEquals("cbrt(double)[4] ::", -7.11074631974658E101, StrictMath.cbrt((-Double.MAX_VALUE / 500)));
assertTrue("cbrt(double)[5] ::", -7.110746319746581E101 <= Math.cbrt((-Double.MAX_VALUE / 500)) && -7.110746319746579E101 >= Math.cbrt((-Double.MAX_VALUE / 500)));
assertEquals("cbrt(double)[6] ::", -2.1458772928133103E-107, StrictMath.cbrt((-Double.MIN_VALUE * 2000)));
assertTrue("cbrt(double)[7] ::", -2.1458772928133106E-107 <= Math.cbrt((-Double.MIN_VALUE * 2000)) && -2.14587729281331E-107 >= Math.cbrt((-Double.MIN_VALUE * 2000)));
assertEquals("cbrt(double)[8] ::", -1.7031839360032603E-107, StrictMath.cbrt((-Double.MIN_VALUE * 1000)));
assertTrue("cbrt(double)[9] ::", -1.7031839360032606E-107 <= Math.cbrt((-Double.MIN_VALUE * 1000)) && -1.70318393600326E-107 >= Math.cbrt((-Double.MIN_VALUE * 1000)));
assertEquals("cbrt(double)[10] ::", -1430.7991380071423, StrictMath.cbrt(-2929112212.129231481346));
assertTrue("cbrt(double)[11] ::", -1430.7991380071426 <= Math.cbrt(-2929112212.129231481346) && -1430.7991380071421 >= Math.cbrt(-2929112212.129231481346));
assertEquals("cbrt(double)[12] ::", -13.336815876701571, StrictMath.cbrt(-2372.228212D));
assertTrue("cbrt(double)[13] ::", -13.336815876701573 <= Math.cbrt(-2372.228212D) && -13.33681587670157 >= Math.cbrt(-2372.228212D));
assertEquals("cbrt(double)[14] ::", -1.069463148164605, StrictMath.cbrt(-1.2232D));
assertTrue("cbrt(double)[15] ::", -1.0694631481646053 <= Math.cbrt(-1.2232D) && -1.0694631481646049 >= Math.cbrt(-1.2232D));
assertEquals("cbrt(double)[16] ::", 0.0, StrictMath.cbrt(0D));
assertTrue("cbrt(double)[17] ::", -4.9E-324 <= Math.cbrt(0D) && 4.9E-324 >= Math.cbrt(0D));
assertEquals("cbrt(double)[18] ::", 1.3448325547134823, StrictMath.cbrt(2.43223D));
assertTrue("cbrt(double)[19] ::", 1.344832554713482 <= Math.cbrt(2.43223D) && 1.3448325547134825 >= Math.cbrt(2.43223D));
assertEquals("cbrt(double)[20] ::", 263.1960319638015, StrictMath.cbrt(18232155.3323566D));
assertTrue("cbrt(double)[21] ::", 263.19603196380143 <= Math.cbrt(18232155.3323566D) && 263.19603196380154 >= Math.cbrt(18232155.3323566D));
assertEquals("cbrt(double)[22] ::", 1.7031839360032603E-108, StrictMath.cbrt(Double.MIN_VALUE));
assertTrue("cbrt(double)[23] ::", 1.70318393600326E-108 <= Math.cbrt(Double.MIN_VALUE) && 1.7031839360032607E-108 >= Math.cbrt(Double.MIN_VALUE));
assertEquals("cbrt(double)[24] ::", 9.96028008062548E-108, StrictMath.cbrt((Double.MIN_VALUE * 200)));
assertTrue("cbrt(double)[25] ::", 9.960280080625478E-108 <= Math.cbrt((Double.MIN_VALUE * 200)) && 9.960280080625481E-108 >= Math.cbrt((Double.MIN_VALUE * 200)));
assertEquals("cbrt(double)[26] ::", 7.11074631974658E101, StrictMath.cbrt((Double.MAX_VALUE / 500)));
assertTrue("cbrt(double)[27] ::", 7.110746319746579E101 <= Math.cbrt((Double.MAX_VALUE / 500)) && 7.110746319746581E101 >= Math.cbrt((Double.MAX_VALUE / 500)));
assertEquals("cbrt(double)[28] ::", 9.650767538728758E101, StrictMath.cbrt((Double.MAX_VALUE / 200)));
assertTrue("cbrt(double)[29] ::", 9.650767538728756E101 <= Math.cbrt((Double.MAX_VALUE / 200)) && 9.650767538728759E101 >= Math.cbrt((Double.MAX_VALUE / 200)));
assertEquals("cbrt(double)[30] ::", 5.643803094122362E102, StrictMath.cbrt(Double.MAX_VALUE));
assertTrue("cbrt(double)[31] ::", 5.643803094122361E102 <= Math.cbrt(Double.MAX_VALUE) && 5.643803094122363E102 >= Math.cbrt(Double.MAX_VALUE));
assertEquals("cbrt(double)[32] ::", 5.643803094122362E102, StrictMath.cbrt(Double.MAX_VALUE + 1));
assertTrue("cbrt(double)[33] ::", 5.643803094122361E102 <= Math.cbrt(Double.MAX_VALUE + 1) && 5.643803094122363E102 >= Math.cbrt(Double.MAX_VALUE + 1));
}

public void testCeil()
{
assertEquals("ceil(double)[0] ::", -1.7976931348623157E308, StrictMath.ceil(-Double.MAX_VALUE));
assertTrue("ceil(double)[1] ::", -Infinity <= Math.ceil(-Double.MAX_VALUE) && -1.7976931348623155E308 >= Math.ceil(-Double.MAX_VALUE));
assertEquals("ceil(double)[2] ::", -8.988465674311578E305, StrictMath.ceil((-Double.MAX_VALUE / 200)));
assertTrue("ceil(double)[3] ::", -8.98846567431158E305 <= Math.ceil((-Double.MAX_VALUE / 200)) && -8.988465674311577E305 >= Math.ceil((-Double.MAX_VALUE / 200)));
assertEquals("ceil(double)[4] ::", -3.595386269724631E305, StrictMath.ceil((-Double.MAX_VALUE / 500)));
assertTrue("ceil(double)[5] ::", -3.595386269724632E305 <= Math.ceil((-Double.MAX_VALUE / 500)) && -3.59538626972463E305 >= Math.ceil((-Double.MAX_VALUE / 500)));
assertEquals("ceil(double)[6] ::", -0.0, StrictMath.ceil((-Double.MIN_VALUE * 2000)));
assertTrue("ceil(double)[7] ::", -4.9E-324 <= Math.ceil((-Double.MIN_VALUE * 2000)) && 4.9E-324 >= Math.ceil((-Double.MIN_VALUE * 2000)));
assertEquals("ceil(double)[8] ::", -0.0, StrictMath.ceil((-Double.MIN_VALUE * 1000)));
assertTrue("ceil(double)[9] ::", -4.9E-324 <= Math.ceil((-Double.MIN_VALUE * 1000)) && 4.9E-324 >= Math.ceil((-Double.MIN_VALUE * 1000)));
assertEquals("ceil(double)[10] ::", -2.929112212E9, StrictMath.ceil(-2929112212.129231481346));
assertTrue("ceil(double)[11] ::", -2.9291122120000005E9 <= Math.ceil(-2929112212.129231481346) && -2.9291122119999995E9 >= Math.ceil(-2929112212.129231481346));
assertEquals("ceil(double)[12] ::", -2372.0, StrictMath.ceil(-2372.228212D));
assertTrue("ceil(double)[13] ::", -2372.0000000000005 <= Math.ceil(-2372.228212D) && -2371.9999999999995 >= Math.ceil(-2372.228212D));
assertEquals("ceil(double)[14] ::", -1.0, StrictMath.ceil(-1.2232D));
assertTrue("ceil(double)[15] ::", -1.0000000000000002 <= Math.ceil(-1.2232D) && -0.9999999999999998 >= Math.ceil(-1.2232D));
assertEquals("ceil(double)[16] ::", 0.0, StrictMath.ceil(0D));
assertTrue("ceil(double)[17] ::", -4.9E-324 <= Math.ceil(0D) && 4.9E-324 >= Math.ceil(0D));
assertEquals("ceil(double)[18] ::", 3.0, StrictMath.ceil(2.43223D));
assertTrue("ceil(double)[19] ::", 2.9999999999999996 <= Math.ceil(2.43223D) && 3.0000000000000004 >= Math.ceil(2.43223D));
assertEquals("ceil(double)[20] ::", 1.8232156E7, StrictMath.ceil(18232155.3323566D));
assertTrue("ceil(double)[21] ::", 1.8232155999999996E7 <= Math.ceil(18232155.3323566D) && 1.8232156000000004E7 >= Math.ceil(18232155.3323566D));
assertEquals("ceil(double)[22] ::", 1.0, StrictMath.ceil(Double.MIN_VALUE));
assertTrue("ceil(double)[23] ::", 0.9999999999999998 <= Math.ceil(Double.MIN_VALUE) && 1.0000000000000002 >= Math.ceil(Double.MIN_VALUE));
assertEquals("ceil(double)[24] ::", 1.0, StrictMath.ceil((Double.MIN_VALUE * 200)));
assertTrue("ceil(double)[25] ::", 0.9999999999999998 <= Math.ceil((Double.MIN_VALUE * 200)) && 1.0000000000000002 >= Math.ceil((Double.MIN_VALUE * 200)));
assertEquals("ceil(double)[26] ::", 3.595386269724631E305, StrictMath.ceil((Double.MAX_VALUE / 500)));
assertTrue("ceil(double)[27] ::", 3.59538626972463E305 <= Math.ceil((Double.MAX_VALUE / 500)) && 3.595386269724632E305 >= Math.ceil((Double.MAX_VALUE / 500)));
assertEquals("ceil(double)[28] ::", 8.988465674311578E305, StrictMath.ceil((Double.MAX_VALUE / 200)));
assertTrue("ceil(double)[29] ::", 8.988465674311577E305 <= Math.ceil((Double.MAX_VALUE / 200)) && 8.98846567431158E305 >= Math.ceil((Double.MAX_VALUE / 200)));
assertEquals("ceil(double)[30] ::", 1.7976931348623157E308, StrictMath.ceil(Double.MAX_VALUE));
assertTrue("ceil(double)[31] ::", 1.7976931348623155E308 <= Math.ceil(Double.MAX_VALUE) && Infinity >= Math.ceil(Double.MAX_VALUE));
assertEquals("ceil(double)[32] ::", 1.7976931348623157E308, StrictMath.ceil(Double.MAX_VALUE + 1));
assertTrue("ceil(double)[33] ::", 1.7976931348623155E308 <= Math.ceil(Double.MAX_VALUE + 1) && Infinity >= Math.ceil(Double.MAX_VALUE + 1));
}

public void testCos()
{
assertEquals("cos(double)[0] ::", -0.9999876894265599, StrictMath.cos(-Double.MAX_VALUE));
assertTrue("cos(double)[1] ::", -0.99998768942656 <= Math.cos(-Double.MAX_VALUE) && -0.9999876894265598 >= Math.cos(-Double.MAX_VALUE));
assertEquals("cos(double)[2] ::", -0.9733355049132392, StrictMath.cos((-Double.MAX_VALUE / 200)));
assertTrue("cos(double)[3] ::", -0.9733355049132393 <= Math.cos((-Double.MAX_VALUE / 200)) && -0.9733355049132391 >= Math.cos((-Double.MAX_VALUE / 200)));
assertEquals("cos(double)[4] ::", 0.9999035374750699, StrictMath.cos((-Double.MAX_VALUE / 500)));
assertTrue("cos(double)[5] ::", 0.9999035374750698 <= Math.cos((-Double.MAX_VALUE / 500)) && 0.99990353747507 >= Math.cos((-Double.MAX_VALUE / 500)));
assertEquals("cos(double)[6] ::", 1.0, StrictMath.cos((-Double.MIN_VALUE * 2000)));
assertTrue("cos(double)[7] ::", 0.9999999999999998 <= Math.cos((-Double.MIN_VALUE * 2000)) && 1.0000000000000002 >= Math.cos((-Double.MIN_VALUE * 2000)));
assertEquals("cos(double)[8] ::", 1.0, StrictMath.cos((-Double.MIN_VALUE * 1000)));
assertTrue("cos(double)[9] ::", 0.9999999999999998 <= Math.cos((-Double.MIN_VALUE * 1000)) && 1.0000000000000002 >= Math.cos((-Double.MIN_VALUE * 1000)));
assertEquals("cos(double)[10] ::", -0.9080207917312976, StrictMath.cos(-2929112212.129231481346));
assertTrue("cos(double)[11] ::", -0.9080207917312977 <= Math.cos(-2929112212.129231481346) && -0.9080207917312975 >= Math.cos(-2929112212.129231481346));
assertEquals("cos(double)[12] ::", -0.9474082454146647, StrictMath.cos(-2372.228212D));
assertTrue("cos(double)[13] ::", -0.9474082454146648 <= Math.cos(-2372.228212D) && -0.9474082454146646 >= Math.cos(-2372.228212D));
assertEquals("cos(double)[14] ::", 0.3406388740398382, StrictMath.cos(-1.2232D));
assertTrue("cos(double)[15] ::", 0.34063887403983817 <= Math.cos(-1.2232D) && 0.3406388740398383 >= Math.cos(-1.2232D));
assertEquals("cos(double)[16] ::", 1.0, StrictMath.cos(0D));
assertTrue("cos(double)[17] ::", 0.9999999999999998 <= Math.cos(0D) && 1.0000000000000002 >= Math.cos(0D));
assertEquals("cos(double)[18] ::", -0.7587771658491411, StrictMath.cos(2.43223D));
assertTrue("cos(double)[19] ::", -0.7587771658491412 <= Math.cos(2.43223D) && -0.758777165849141 >= Math.cos(2.43223D));
assertEquals("cos(double)[20] ::", -0.616060632583357, StrictMath.cos(18232155.3323566D));
assertTrue("cos(double)[21] ::", -0.6160606325833571 <= Math.cos(18232155.3323566D) && -0.6160606325833569 >= Math.cos(18232155.3323566D));
assertEquals("cos(double)[22] ::", 1.0, StrictMath.cos(Double.MIN_VALUE));
assertTrue("cos(double)[23] ::", 0.9999999999999998 <= Math.cos(Double.MIN_VALUE) && 1.0000000000000002 >= Math.cos(Double.MIN_VALUE));
assertEquals("cos(double)[24] ::", 1.0, StrictMath.cos((Double.MIN_VALUE * 200)));
assertTrue("cos(double)[25] ::", 0.9999999999999998 <= Math.cos((Double.MIN_VALUE * 200)) && 1.0000000000000002 >= Math.cos((Double.MIN_VALUE * 200)));
assertEquals("cos(double)[26] ::", 0.9999035374750699, StrictMath.cos((Double.MAX_VALUE / 500)));
assertTrue("cos(double)[27] ::", 0.9999035374750698 <= Math.cos((Double.MAX_VALUE / 500)) && 0.99990353747507 >= Math.cos((Double.MAX_VALUE / 500)));
assertEquals("cos(double)[28] ::", -0.9733355049132392, StrictMath.cos((Double.MAX_VALUE / 200)));
assertTrue("cos(double)[29] ::", -0.9733355049132393 <= Math.cos((Double.MAX_VALUE / 200)) && -0.9733355049132391 >= Math.cos((Double.MAX_VALUE / 200)));
assertEquals("cos(double)[30] ::", -0.9999876894265599, StrictMath.cos(Double.MAX_VALUE));
assertTrue("cos(double)[31] ::", -0.99998768942656 <= Math.cos(Double.MAX_VALUE) && -0.9999876894265598 >= Math.cos(Double.MAX_VALUE));
assertEquals("cos(double)[32] ::", -0.9999876894265599, StrictMath.cos(Double.MAX_VALUE + 1));
assertTrue("cos(double)[33] ::", -0.99998768942656 <= Math.cos(Double.MAX_VALUE + 1) && -0.9999876894265598 >= Math.cos(Double.MAX_VALUE + 1));
}

public void testCosh()
{
assertEquals("cosh(double)[0] ::", Infinity, StrictMath.cosh(-Double.MAX_VALUE));
assertEquals("cosh(double)[1] ::", Infinity, Math.cosh(-Double.MAX_VALUE));
assertEquals("cosh(double)[2] ::", Infinity, StrictMath.cosh((-Double.MAX_VALUE / 200)));
assertEquals("cosh(double)[3] ::", Infinity, Math.cosh((-Double.MAX_VALUE / 200)));
assertEquals("cosh(double)[4] ::", Infinity, StrictMath.cosh((-Double.MAX_VALUE / 500)));
assertEquals("cosh(double)[5] ::", Infinity, Math.cosh((-Double.MAX_VALUE / 500)));
assertEquals("cosh(double)[6] ::", 1.0, StrictMath.cosh((-Double.MIN_VALUE * 2000)));
assertTrue("cosh(double)[7] ::", 0.9999999999999998 <= Math.cosh((-Double.MIN_VALUE * 2000)) && 1.0000000000000002 >= Math.cosh((-Double.MIN_VALUE * 2000)));
assertEquals("cosh(double)[8] ::", 1.0, StrictMath.cosh((-Double.MIN_VALUE * 1000)));
assertTrue("cosh(double)[9] ::", 0.9999999999999998 <= Math.cosh((-Double.MIN_VALUE * 1000)) && 1.0000000000000002 >= Math.cosh((-Double.MIN_VALUE * 1000)));
assertEquals("cosh(double)[10] ::", Infinity, StrictMath.cosh(-2929112212.129231481346));
assertEquals("cosh(double)[11] ::", Infinity, Math.cosh(-2929112212.129231481346));
assertEquals("cosh(double)[12] ::", Infinity, StrictMath.cosh(-2372.228212D));
assertEquals("cosh(double)[13] ::", Infinity, Math.cosh(-2372.228212D));
assertEquals("cosh(double)[14] ::", 1.8461655178203698, StrictMath.cosh(-1.2232D));
assertTrue("cosh(double)[15] ::", 1.8461655178203695 <= Math.cosh(-1.2232D) && 1.84616551782037 >= Math.cosh(-1.2232D));
assertEquals("cosh(double)[16] ::", 1.0, StrictMath.cosh(0D));
assertTrue("cosh(double)[17] ::", 0.9999999999999998 <= Math.cosh(0D) && 1.0000000000000002 >= Math.cosh(0D));
assertEquals("cosh(double)[18] ::", 5.736040690260186, StrictMath.cosh(2.43223D));
assertTrue("cosh(double)[19] ::", 5.736040690260185 <= Math.cosh(2.43223D) && 5.736040690260187 >= Math.cosh(2.43223D));
assertEquals("cosh(double)[20] ::", Infinity, StrictMath.cosh(18232155.3323566D));
assertEquals("cosh(double)[21] ::", Infinity, Math.cosh(18232155.3323566D));
assertEquals("cosh(double)[22] ::", 1.0, StrictMath.cosh(Double.MIN_VALUE));
assertTrue("cosh(double)[23] ::", 0.9999999999999998 <= Math.cosh(Double.MIN_VALUE) && 1.0000000000000002 >= Math.cosh(Double.MIN_VALUE));
assertEquals("cosh(double)[24] ::", 1.0, StrictMath.cosh((Double.MIN_VALUE * 200)));
assertTrue("cosh(double)[25] ::", 0.9999999999999998 <= Math.cosh((Double.MIN_VALUE * 200)) && 1.0000000000000002 >= Math.cosh((Double.MIN_VALUE * 200)));
assertEquals("cosh(double)[26] ::", Infinity, StrictMath.cosh((Double.MAX_VALUE / 500)));
assertEquals("cosh(double)[27] ::", Infinity, Math.cosh((Double.MAX_VALUE / 500)));
assertEquals("cosh(double)[28] ::", Infinity, StrictMath.cosh((Double.MAX_VALUE / 200)));
assertEquals("cosh(double)[29] ::", Infinity, Math.cosh((Double.MAX_VALUE / 200)));
assertEquals("cosh(double)[30] ::", Infinity, StrictMath.cosh(Double.MAX_VALUE));
assertEquals("cosh(double)[31] ::", Infinity, Math.cosh(Double.MAX_VALUE));
assertEquals("cosh(double)[32] ::", Infinity, StrictMath.cosh(Double.MAX_VALUE + 1));
assertEquals("cosh(double)[33] ::", Infinity, Math.cosh(Double.MAX_VALUE + 1));
}

public void testCopySign_double()
{
assertEquals("copySign(double,double)[0] ::", 1.7976931348623157E308, StrictMath.copySign(-Double.MAX_VALUE,0.0D));
assertEquals("copySign(double,double)[1] ::", 1.7976931348623157E308, Math.copySign(-Double.MAX_VALUE,0.0D));
assertEquals("copySign(double,double)[2] ::", 1.7976931348623157E308, StrictMath.copySign(-Double.MAX_VALUE,1.0D));
assertEquals("copySign(double,double)[3] ::", 1.7976931348623157E308, Math.copySign(-Double.MAX_VALUE,1.0D));
assertEquals("copySign(double,double)[4] ::", 1.7976931348623157E308, StrictMath.copySign(-Double.MAX_VALUE,0.222231D));
assertEquals("copySign(double,double)[5] ::", 1.7976931348623157E308, Math.copySign(-Double.MAX_VALUE,0.222231D));
assertEquals("copySign(double,double)[6] ::", -1.7976931348623157E308, StrictMath.copySign(-Double.MAX_VALUE,-0.0D));
assertEquals("copySign(double,double)[7] ::", -1.7976931348623157E308, StrictMath.copySign(-Double.MAX_VALUE,-0.0D));
assertEquals("copySign(double,double)[8] ::", -1.7976931348623157E308, StrictMath.copySign(-Double.MAX_VALUE,-1.0D));
assertEquals("copySign(double,double)[9] ::", -1.7976931348623157E308, Math.copySign(-Double.MAX_VALUE,-1.0D));
assertEquals("copySign(double,double)[10] ::", -1.7976931348623157E308, StrictMath.copySign(-Double.MAX_VALUE,-0.222231D));
assertEquals("copySign(double,double)[11] ::", -1.7976931348623157E308, Math.copySign(-Double.MAX_VALUE,-0.222231D));
assertEquals("copySign(double,double)[12] ::", -1.7976931348623157E308, StrictMath.copySign(-Double.MAX_VALUE,-Double.MAX_VALUE));
assertEquals("copySign(double,double)[13] ::", -1.7976931348623157E308, Math.copySign(-Double.MAX_VALUE,-Double.MAX_VALUE));
assertEquals("copySign(double,double)[14] ::", 8.988465674311578E305, StrictMath.copySign((-Double.MAX_VALUE / 200),0.0D));
assertEquals("copySign(double,double)[15] ::", 8.988465674311578E305, Math.copySign((-Double.MAX_VALUE / 200),0.0D));
assertEquals("copySign(double,double)[16] ::", 8.988465674311578E305, StrictMath.copySign((-Double.MAX_VALUE / 200),1.0D));
assertEquals("copySign(double,double)[17] ::", 8.988465674311578E305, Math.copySign((-Double.MAX_VALUE / 200),1.0D));
assertEquals("copySign(double,double)[18] ::", 8.988465674311578E305, StrictMath.copySign((-Double.MAX_VALUE / 200),0.222231D));
assertEquals("copySign(double,double)[19] ::", 8.988465674311578E305, Math.copySign((-Double.MAX_VALUE / 200),0.222231D));
assertEquals("copySign(double,double)[20] ::", -8.988465674311578E305, StrictMath.copySign((-Double.MAX_VALUE / 200),-0.0D));
assertEquals("copySign(double,double)[21] ::", -8.988465674311578E305, StrictMath.copySign((-Double.MAX_VALUE / 200),-0.0D));
assertEquals("copySign(double,double)[22] ::", -8.988465674311578E305, StrictMath.copySign((-Double.MAX_VALUE / 200),-1.0D));
assertEquals("copySign(double,double)[23] ::", -8.988465674311578E305, Math.copySign((-Double.MAX_VALUE / 200),-1.0D));
assertEquals("copySign(double,double)[24] ::", -8.988465674311578E305, StrictMath.copySign((-Double.MAX_VALUE / 200),-0.222231D));
assertEquals("copySign(double,double)[25] ::", -8.988465674311578E305, Math.copySign((-Double.MAX_VALUE / 200),-0.222231D));
assertEquals("copySign(double,double)[26] ::", -8.988465674311578E305, StrictMath.copySign((-Double.MAX_VALUE / 200),(-Double.MAX_VALUE / 200)));
assertEquals("copySign(double,double)[27] ::", -8.988465674311578E305, Math.copySign((-Double.MAX_VALUE / 200),(-Double.MAX_VALUE / 200)));
assertEquals("copySign(double,double)[28] ::", 3.595386269724631E305, StrictMath.copySign((-Double.MAX_VALUE / 500),0.0D));
assertEquals("copySign(double,double)[29] ::", 3.595386269724631E305, Math.copySign((-Double.MAX_VALUE / 500),0.0D));
assertEquals("copySign(double,double)[30] ::", 3.595386269724631E305, StrictMath.copySign((-Double.MAX_VALUE / 500),1.0D));
assertEquals("copySign(double,double)[31] ::", 3.595386269724631E305, Math.copySign((-Double.MAX_VALUE / 500),1.0D));
assertEquals("copySign(double,double)[32] ::", 3.595386269724631E305, StrictMath.copySign((-Double.MAX_VALUE / 500),0.222231D));
assertEquals("copySign(double,double)[33] ::", 3.595386269724631E305, Math.copySign((-Double.MAX_VALUE / 500),0.222231D));
assertEquals("copySign(double,double)[34] ::", -3.595386269724631E305, StrictMath.copySign((-Double.MAX_VALUE / 500),-0.0D));
assertEquals("copySign(double,double)[35] ::", -3.595386269724631E305, StrictMath.copySign((-Double.MAX_VALUE / 500),-0.0D));
assertEquals("copySign(double,double)[36] ::", -3.595386269724631E305, StrictMath.copySign((-Double.MAX_VALUE / 500),-1.0D));
assertEquals("copySign(double,double)[37] ::", -3.595386269724631E305, Math.copySign((-Double.MAX_VALUE / 500),-1.0D));
assertEquals("copySign(double,double)[38] ::", -3.595386269724631E305, StrictMath.copySign((-Double.MAX_VALUE / 500),-0.222231D));
assertEquals("copySign(double,double)[39] ::", -3.595386269724631E305, Math.copySign((-Double.MAX_VALUE / 500),-0.222231D));
assertEquals("copySign(double,double)[40] ::", -3.595386269724631E305, StrictMath.copySign((-Double.MAX_VALUE / 500),(-Double.MAX_VALUE / 500)));
assertEquals("copySign(double,double)[41] ::", -3.595386269724631E305, Math.copySign((-Double.MAX_VALUE / 500),(-Double.MAX_VALUE / 500)));
assertEquals("copySign(double,double)[42] ::", 9.88E-321, StrictMath.copySign((-Double.MIN_VALUE * 2000),0.0D));
assertEquals("copySign(double,double)[43] ::", 9.88E-321, Math.copySign((-Double.MIN_VALUE * 2000),0.0D));
assertEquals("copySign(double,double)[44] ::", 9.88E-321, StrictMath.copySign((-Double.MIN_VALUE * 2000),1.0D));
assertEquals("copySign(double,double)[45] ::", 9.88E-321, Math.copySign((-Double.MIN_VALUE * 2000),1.0D));
assertEquals("copySign(double,double)[46] ::", 9.88E-321, StrictMath.copySign((-Double.MIN_VALUE * 2000),0.222231D));
assertEquals("copySign(double,double)[47] ::", 9.88E-321, Math.copySign((-Double.MIN_VALUE * 2000),0.222231D));
assertEquals("copySign(double,double)[48] ::", -9.88E-321, StrictMath.copySign((-Double.MIN_VALUE * 2000),-0.0D));
assertEquals("copySign(double,double)[49] ::", -9.88E-321, StrictMath.copySign((-Double.MIN_VALUE * 2000),-0.0D));
assertEquals("copySign(double,double)[50] ::", -9.88E-321, StrictMath.copySign((-Double.MIN_VALUE * 2000),-1.0D));
assertEquals("copySign(double,double)[51] ::", -9.88E-321, Math.copySign((-Double.MIN_VALUE * 2000),-1.0D));
assertEquals("copySign(double,double)[52] ::", -9.88E-321, StrictMath.copySign((-Double.MIN_VALUE * 2000),-0.222231D));
assertEquals("copySign(double,double)[53] ::", -9.88E-321, Math.copySign((-Double.MIN_VALUE * 2000),-0.222231D));
assertEquals("copySign(double,double)[54] ::", -9.88E-321, StrictMath.copySign((-Double.MIN_VALUE * 2000),(-Double.MIN_VALUE * 2000)));
assertEquals("copySign(double,double)[55] ::", -9.88E-321, Math.copySign((-Double.MIN_VALUE * 2000),(-Double.MIN_VALUE * 2000)));
assertEquals("copySign(double,double)[56] ::", 4.94E-321, StrictMath.copySign((-Double.MIN_VALUE * 1000),0.0D));
assertEquals("copySign(double,double)[57] ::", 4.94E-321, Math.copySign((-Double.MIN_VALUE * 1000),0.0D));
assertEquals("copySign(double,double)[58] ::", 4.94E-321, StrictMath.copySign((-Double.MIN_VALUE * 1000),1.0D));
assertEquals("copySign(double,double)[59] ::", 4.94E-321, Math.copySign((-Double.MIN_VALUE * 1000),1.0D));
assertEquals("copySign(double,double)[60] ::", 4.94E-321, StrictMath.copySign((-Double.MIN_VALUE * 1000),0.222231D));
assertEquals("copySign(double,double)[61] ::", 4.94E-321, Math.copySign((-Double.MIN_VALUE * 1000),0.222231D));
assertEquals("copySign(double,double)[62] ::", -4.94E-321, StrictMath.copySign((-Double.MIN_VALUE * 1000),-0.0D));
assertEquals("copySign(double,double)[63] ::", -4.94E-321, StrictMath.copySign((-Double.MIN_VALUE * 1000),-0.0D));
assertEquals("copySign(double,double)[64] ::", -4.94E-321, StrictMath.copySign((-Double.MIN_VALUE * 1000),-1.0D));
assertEquals("copySign(double,double)[65] ::", -4.94E-321, Math.copySign((-Double.MIN_VALUE * 1000),-1.0D));
assertEquals("copySign(double,double)[66] ::", -4.94E-321, StrictMath.copySign((-Double.MIN_VALUE * 1000),-0.222231D));
assertEquals("copySign(double,double)[67] ::", -4.94E-321, Math.copySign((-Double.MIN_VALUE * 1000),-0.222231D));
assertEquals("copySign(double,double)[68] ::", -4.94E-321, StrictMath.copySign((-Double.MIN_VALUE * 1000),(-Double.MIN_VALUE * 1000)));
assertEquals("copySign(double,double)[69] ::", -4.94E-321, Math.copySign((-Double.MIN_VALUE * 1000),(-Double.MIN_VALUE * 1000)));
assertEquals("copySign(double,double)[70] ::", 2.9291122121292315E9, StrictMath.copySign(-2929112212.129231481346,0.0D));
assertEquals("copySign(double,double)[71] ::", 2.9291122121292315E9, Math.copySign(-2929112212.129231481346,0.0D));
assertEquals("copySign(double,double)[72] ::", 2.9291122121292315E9, StrictMath.copySign(-2929112212.129231481346,1.0D));
assertEquals("copySign(double,double)[73] ::", 2.9291122121292315E9, Math.copySign(-2929112212.129231481346,1.0D));
assertEquals("copySign(double,double)[74] ::", 2.9291122121292315E9, StrictMath.copySign(-2929112212.129231481346,0.222231D));
assertEquals("copySign(double,double)[75] ::", 2.9291122121292315E9, Math.copySign(-2929112212.129231481346,0.222231D));
assertEquals("copySign(double,double)[76] ::", -2.9291122121292315E9, StrictMath.copySign(-2929112212.129231481346,-0.0D));
assertEquals("copySign(double,double)[77] ::", -2.9291122121292315E9, StrictMath.copySign(-2929112212.129231481346,-0.0D));
assertEquals("copySign(double,double)[78] ::", -2.9291122121292315E9, StrictMath.copySign(-2929112212.129231481346,-1.0D));
assertEquals("copySign(double,double)[79] ::", -2.9291122121292315E9, Math.copySign(-2929112212.129231481346,-1.0D));
assertEquals("copySign(double,double)[80] ::", -2.9291122121292315E9, StrictMath.copySign(-2929112212.129231481346,-0.222231D));
assertEquals("copySign(double,double)[81] ::", -2.9291122121292315E9, Math.copySign(-2929112212.129231481346,-0.222231D));
assertEquals("copySign(double,double)[82] ::", -2.9291122121292315E9, StrictMath.copySign(-2929112212.129231481346,-2929112212.129231481346));
assertEquals("copySign(double,double)[83] ::", -2.9291122121292315E9, Math.copySign(-2929112212.129231481346,-2929112212.129231481346));
assertEquals("copySign(double,double)[84] ::", 2372.228212, StrictMath.copySign(-2372.228212D,0.0D));
assertEquals("copySign(double,double)[85] ::", 2372.228212, Math.copySign(-2372.228212D,0.0D));
assertEquals("copySign(double,double)[86] ::", 2372.228212, StrictMath.copySign(-2372.228212D,1.0D));
assertEquals("copySign(double,double)[87] ::", 2372.228212, Math.copySign(-2372.228212D,1.0D));
assertEquals("copySign(double,double)[88] ::", 2372.228212, StrictMath.copySign(-2372.228212D,0.222231D));
assertEquals("copySign(double,double)[89] ::", 2372.228212, Math.copySign(-2372.228212D,0.222231D));
assertEquals("copySign(double,double)[90] ::", -2372.228212, StrictMath.copySign(-2372.228212D,-0.0D));
assertEquals("copySign(double,double)[91] ::", -2372.228212, StrictMath.copySign(-2372.228212D,-0.0D));
assertEquals("copySign(double,double)[92] ::", -2372.228212, StrictMath.copySign(-2372.228212D,-1.0D));
assertEquals("copySign(double,double)[93] ::", -2372.228212, Math.copySign(-2372.228212D,-1.0D));
assertEquals("copySign(double,double)[94] ::", -2372.228212, StrictMath.copySign(-2372.228212D,-0.222231D));
assertEquals("copySign(double,double)[95] ::", -2372.228212, Math.copySign(-2372.228212D,-0.222231D));
assertEquals("copySign(double,double)[96] ::", -2372.228212, StrictMath.copySign(-2372.228212D,-2372.228212D));
assertEquals("copySign(double,double)[97] ::", -2372.228212, Math.copySign(-2372.228212D,-2372.228212D));
assertEquals("copySign(double,double)[98] ::", 1.2232, StrictMath.copySign(-1.2232D,0.0D));
assertEquals("copySign(double,double)[99] ::", 1.2232, Math.copySign(-1.2232D,0.0D));
assertEquals("copySign(double,double)[100] ::", 1.2232, StrictMath.copySign(-1.2232D,1.0D));
assertEquals("copySign(double,double)[101] ::", 1.2232, Math.copySign(-1.2232D,1.0D));
assertEquals("copySign(double,double)[102] ::", 1.2232, StrictMath.copySign(-1.2232D,0.222231D));
assertEquals("copySign(double,double)[103] ::", 1.2232, Math.copySign(-1.2232D,0.222231D));
assertEquals("copySign(double,double)[104] ::", -1.2232, StrictMath.copySign(-1.2232D,-0.0D));
assertEquals("copySign(double,double)[105] ::", -1.2232, StrictMath.copySign(-1.2232D,-0.0D));
assertEquals("copySign(double,double)[106] ::", -1.2232, StrictMath.copySign(-1.2232D,-1.0D));
assertEquals("copySign(double,double)[107] ::", -1.2232, Math.copySign(-1.2232D,-1.0D));
assertEquals("copySign(double,double)[108] ::", -1.2232, StrictMath.copySign(-1.2232D,-0.222231D));
assertEquals("copySign(double,double)[109] ::", -1.2232, Math.copySign(-1.2232D,-0.222231D));
assertEquals("copySign(double,double)[110] ::", -1.2232, StrictMath.copySign(-1.2232D,-1.2232D));
assertEquals("copySign(double,double)[111] ::", -1.2232, Math.copySign(-1.2232D,-1.2232D));
assertEquals("copySign(double,double)[112] ::", 0.0, StrictMath.copySign(0D,0.0D));
assertEquals("copySign(double,double)[113] ::", 0.0, Math.copySign(0D,0.0D));
assertEquals("copySign(double,double)[114] ::", 0.0, StrictMath.copySign(0D,1.0D));
assertEquals("copySign(double,double)[115] ::", 0.0, Math.copySign(0D,1.0D));
assertEquals("copySign(double,double)[116] ::", 0.0, StrictMath.copySign(0D,0.222231D));
assertEquals("copySign(double,double)[117] ::", 0.0, Math.copySign(0D,0.222231D));
assertEquals("copySign(double,double)[118] ::", -0.0, StrictMath.copySign(0D,-0.0D));
assertEquals("copySign(double,double)[119] ::", -0.0, StrictMath.copySign(0D,-0.0D));
assertEquals("copySign(double,double)[120] ::", -0.0, StrictMath.copySign(0D,-1.0D));
assertEquals("copySign(double,double)[121] ::", -0.0, Math.copySign(0D,-1.0D));
assertEquals("copySign(double,double)[122] ::", -0.0, StrictMath.copySign(0D,-0.222231D));
assertEquals("copySign(double,double)[123] ::", -0.0, Math.copySign(0D,-0.222231D));
assertEquals("copySign(double,double)[124] ::", 0.0, StrictMath.copySign(0D,0D));
assertEquals("copySign(double,double)[125] ::", 0.0, Math.copySign(0D,0D));
assertEquals("copySign(double,double)[126] ::", 2.43223, StrictMath.copySign(2.43223D,0.0D));
assertEquals("copySign(double,double)[127] ::", 2.43223, Math.copySign(2.43223D,0.0D));
assertEquals("copySign(double,double)[128] ::", 2.43223, StrictMath.copySign(2.43223D,1.0D));
assertEquals("copySign(double,double)[129] ::", 2.43223, Math.copySign(2.43223D,1.0D));
assertEquals("copySign(double,double)[130] ::", 2.43223, StrictMath.copySign(2.43223D,0.222231D));
assertEquals("copySign(double,double)[131] ::", 2.43223, Math.copySign(2.43223D,0.222231D));
assertEquals("copySign(double,double)[132] ::", -2.43223, StrictMath.copySign(2.43223D,-0.0D));
assertEquals("copySign(double,double)[133] ::", -2.43223, StrictMath.copySign(2.43223D,-0.0D));
assertEquals("copySign(double,double)[134] ::", -2.43223, StrictMath.copySign(2.43223D,-1.0D));
assertEquals("copySign(double,double)[135] ::", -2.43223, Math.copySign(2.43223D,-1.0D));
assertEquals("copySign(double,double)[136] ::", -2.43223, StrictMath.copySign(2.43223D,-0.222231D));
assertEquals("copySign(double,double)[137] ::", -2.43223, Math.copySign(2.43223D,-0.222231D));
assertEquals("copySign(double,double)[138] ::", 2.43223, StrictMath.copySign(2.43223D,2.43223D));
assertEquals("copySign(double,double)[139] ::", 2.43223, Math.copySign(2.43223D,2.43223D));
assertEquals("copySign(double,double)[140] ::", 1.82321553323566E7, StrictMath.copySign(18232155.3323566D,0.0D));
assertEquals("copySign(double,double)[141] ::", 1.82321553323566E7, Math.copySign(18232155.3323566D,0.0D));
assertEquals("copySign(double,double)[142] ::", 1.82321553323566E7, StrictMath.copySign(18232155.3323566D,1.0D));
assertEquals("copySign(double,double)[143] ::", 1.82321553323566E7, Math.copySign(18232155.3323566D,1.0D));
assertEquals("copySign(double,double)[144] ::", 1.82321553323566E7, StrictMath.copySign(18232155.3323566D,0.222231D));
assertEquals("copySign(double,double)[145] ::", 1.82321553323566E7, Math.copySign(18232155.3323566D,0.222231D));
assertEquals("copySign(double,double)[146] ::", -1.82321553323566E7, StrictMath.copySign(18232155.3323566D,-0.0D));
assertEquals("copySign(double,double)[147] ::", -1.82321553323566E7, StrictMath.copySign(18232155.3323566D,-0.0D));
assertEquals("copySign(double,double)[148] ::", -1.82321553323566E7, StrictMath.copySign(18232155.3323566D,-1.0D));
assertEquals("copySign(double,double)[149] ::", -1.82321553323566E7, Math.copySign(18232155.3323566D,-1.0D));
assertEquals("copySign(double,double)[150] ::", -1.82321553323566E7, StrictMath.copySign(18232155.3323566D,-0.222231D));
assertEquals("copySign(double,double)[151] ::", -1.82321553323566E7, Math.copySign(18232155.3323566D,-0.222231D));
assertEquals("copySign(double,double)[152] ::", 1.82321553323566E7, StrictMath.copySign(18232155.3323566D,18232155.3323566D));
assertEquals("copySign(double,double)[153] ::", 1.82321553323566E7, Math.copySign(18232155.3323566D,18232155.3323566D));
assertEquals("copySign(double,double)[154] ::", 4.9E-324, StrictMath.copySign(Double.MIN_VALUE,0.0D));
assertEquals("copySign(double,double)[155] ::", 4.9E-324, Math.copySign(Double.MIN_VALUE,0.0D));
assertEquals("copySign(double,double)[156] ::", 4.9E-324, StrictMath.copySign(Double.MIN_VALUE,1.0D));
assertEquals("copySign(double,double)[157] ::", 4.9E-324, Math.copySign(Double.MIN_VALUE,1.0D));
assertEquals("copySign(double,double)[158] ::", 4.9E-324, StrictMath.copySign(Double.MIN_VALUE,0.222231D));
assertEquals("copySign(double,double)[159] ::", 4.9E-324, Math.copySign(Double.MIN_VALUE,0.222231D));
assertEquals("copySign(double,double)[160] ::", -4.9E-324, StrictMath.copySign(Double.MIN_VALUE,-0.0D));
assertEquals("copySign(double,double)[161] ::", -4.9E-324, StrictMath.copySign(Double.MIN_VALUE,-0.0D));
assertEquals("copySign(double,double)[162] ::", -4.9E-324, StrictMath.copySign(Double.MIN_VALUE,-1.0D));
assertEquals("copySign(double,double)[163] ::", -4.9E-324, Math.copySign(Double.MIN_VALUE,-1.0D));
assertEquals("copySign(double,double)[164] ::", -4.9E-324, StrictMath.copySign(Double.MIN_VALUE,-0.222231D));
assertEquals("copySign(double,double)[165] ::", -4.9E-324, Math.copySign(Double.MIN_VALUE,-0.222231D));
assertEquals("copySign(double,double)[166] ::", 4.9E-324, StrictMath.copySign(Double.MIN_VALUE,Double.MIN_VALUE));
assertEquals("copySign(double,double)[167] ::", 4.9E-324, Math.copySign(Double.MIN_VALUE,Double.MIN_VALUE));
assertEquals("copySign(double,double)[168] ::", 9.9E-322, StrictMath.copySign((Double.MIN_VALUE * 200),0.0D));
assertEquals("copySign(double,double)[169] ::", 9.9E-322, Math.copySign((Double.MIN_VALUE * 200),0.0D));
assertEquals("copySign(double,double)[170] ::", 9.9E-322, StrictMath.copySign((Double.MIN_VALUE * 200),1.0D));
assertEquals("copySign(double,double)[171] ::", 9.9E-322, Math.copySign((Double.MIN_VALUE * 200),1.0D));
assertEquals("copySign(double,double)[172] ::", 9.9E-322, StrictMath.copySign((Double.MIN_VALUE * 200),0.222231D));
assertEquals("copySign(double,double)[173] ::", 9.9E-322, Math.copySign((Double.MIN_VALUE * 200),0.222231D));
assertEquals("copySign(double,double)[174] ::", -9.9E-322, StrictMath.copySign((Double.MIN_VALUE * 200),-0.0D));
assertEquals("copySign(double,double)[175] ::", -9.9E-322, StrictMath.copySign((Double.MIN_VALUE * 200),-0.0D));
assertEquals("copySign(double,double)[176] ::", -9.9E-322, StrictMath.copySign((Double.MIN_VALUE * 200),-1.0D));
assertEquals("copySign(double,double)[177] ::", -9.9E-322, Math.copySign((Double.MIN_VALUE * 200),-1.0D));
assertEquals("copySign(double,double)[178] ::", -9.9E-322, StrictMath.copySign((Double.MIN_VALUE * 200),-0.222231D));
assertEquals("copySign(double,double)[179] ::", -9.9E-322, Math.copySign((Double.MIN_VALUE * 200),-0.222231D));
assertEquals("copySign(double,double)[180] ::", 9.9E-322, StrictMath.copySign((Double.MIN_VALUE * 200),(Double.MIN_VALUE * 200)));
assertEquals("copySign(double,double)[181] ::", 9.9E-322, Math.copySign((Double.MIN_VALUE * 200),(Double.MIN_VALUE * 200)));
assertEquals("copySign(double,double)[182] ::", 3.595386269724631E305, StrictMath.copySign((Double.MAX_VALUE / 500),0.0D));
assertEquals("copySign(double,double)[183] ::", 3.595386269724631E305, Math.copySign((Double.MAX_VALUE / 500),0.0D));
assertEquals("copySign(double,double)[184] ::", 3.595386269724631E305, StrictMath.copySign((Double.MAX_VALUE / 500),1.0D));
assertEquals("copySign(double,double)[185] ::", 3.595386269724631E305, Math.copySign((Double.MAX_VALUE / 500),1.0D));
assertEquals("copySign(double,double)[186] ::", 3.595386269724631E305, StrictMath.copySign((Double.MAX_VALUE / 500),0.222231D));
assertEquals("copySign(double,double)[187] ::", 3.595386269724631E305, Math.copySign((Double.MAX_VALUE / 500),0.222231D));
assertEquals("copySign(double,double)[188] ::", -3.595386269724631E305, StrictMath.copySign((Double.MAX_VALUE / 500),-0.0D));
assertEquals("copySign(double,double)[189] ::", -3.595386269724631E305, StrictMath.copySign((Double.MAX_VALUE / 500),-0.0D));
assertEquals("copySign(double,double)[190] ::", -3.595386269724631E305, StrictMath.copySign((Double.MAX_VALUE / 500),-1.0D));
assertEquals("copySign(double,double)[191] ::", -3.595386269724631E305, Math.copySign((Double.MAX_VALUE / 500),-1.0D));
assertEquals("copySign(double,double)[192] ::", -3.595386269724631E305, StrictMath.copySign((Double.MAX_VALUE / 500),-0.222231D));
assertEquals("copySign(double,double)[193] ::", -3.595386269724631E305, Math.copySign((Double.MAX_VALUE / 500),-0.222231D));
assertEquals("copySign(double,double)[194] ::", 3.595386269724631E305, StrictMath.copySign((Double.MAX_VALUE / 500),(Double.MAX_VALUE / 500)));
assertEquals("copySign(double,double)[195] ::", 3.595386269724631E305, Math.copySign((Double.MAX_VALUE / 500),(Double.MAX_VALUE / 500)));
assertEquals("copySign(double,double)[196] ::", 8.988465674311578E305, StrictMath.copySign((Double.MAX_VALUE / 200),0.0D));
assertEquals("copySign(double,double)[197] ::", 8.988465674311578E305, Math.copySign((Double.MAX_VALUE / 200),0.0D));
assertEquals("copySign(double,double)[198] ::", 8.988465674311578E305, StrictMath.copySign((Double.MAX_VALUE / 200),1.0D));
assertEquals("copySign(double,double)[199] ::", 8.988465674311578E305, Math.copySign((Double.MAX_VALUE / 200),1.0D));
assertEquals("copySign(double,double)[200] ::", 8.988465674311578E305, StrictMath.copySign((Double.MAX_VALUE / 200),0.222231D));
assertEquals("copySign(double,double)[201] ::", 8.988465674311578E305, Math.copySign((Double.MAX_VALUE / 200),0.222231D));
assertEquals("copySign(double,double)[202] ::", -8.988465674311578E305, StrictMath.copySign((Double.MAX_VALUE / 200),-0.0D));
assertEquals("copySign(double,double)[203] ::", -8.988465674311578E305, StrictMath.copySign((Double.MAX_VALUE / 200),-0.0D));
assertEquals("copySign(double,double)[204] ::", -8.988465674311578E305, StrictMath.copySign((Double.MAX_VALUE / 200),-1.0D));
assertEquals("copySign(double,double)[205] ::", -8.988465674311578E305, Math.copySign((Double.MAX_VALUE / 200),-1.0D));
assertEquals("copySign(double,double)[206] ::", -8.988465674311578E305, StrictMath.copySign((Double.MAX_VALUE / 200),-0.222231D));
assertEquals("copySign(double,double)[207] ::", -8.988465674311578E305, Math.copySign((Double.MAX_VALUE / 200),-0.222231D));
assertEquals("copySign(double,double)[208] ::", 8.988465674311578E305, StrictMath.copySign((Double.MAX_VALUE / 200),(Double.MAX_VALUE / 200)));
assertEquals("copySign(double,double)[209] ::", 8.988465674311578E305, Math.copySign((Double.MAX_VALUE / 200),(Double.MAX_VALUE / 200)));
assertEquals("copySign(double,double)[210] ::", 1.7976931348623157E308, StrictMath.copySign(Double.MAX_VALUE,0.0D));
assertEquals("copySign(double,double)[211] ::", 1.7976931348623157E308, Math.copySign(Double.MAX_VALUE,0.0D));
assertEquals("copySign(double,double)[212] ::", 1.7976931348623157E308, StrictMath.copySign(Double.MAX_VALUE,1.0D));
assertEquals("copySign(double,double)[213] ::", 1.7976931348623157E308, Math.copySign(Double.MAX_VALUE,1.0D));
assertEquals("copySign(double,double)[214] ::", 1.7976931348623157E308, StrictMath.copySign(Double.MAX_VALUE,0.222231D));
assertEquals("copySign(double,double)[215] ::", 1.7976931348623157E308, Math.copySign(Double.MAX_VALUE,0.222231D));
assertEquals("copySign(double,double)[216] ::", -1.7976931348623157E308, StrictMath.copySign(Double.MAX_VALUE,-0.0D));
assertEquals("copySign(double,double)[217] ::", -1.7976931348623157E308, StrictMath.copySign(Double.MAX_VALUE,-0.0D));
assertEquals("copySign(double,double)[218] ::", -1.7976931348623157E308, StrictMath.copySign(Double.MAX_VALUE,-1.0D));
assertEquals("copySign(double,double)[219] ::", -1.7976931348623157E308, Math.copySign(Double.MAX_VALUE,-1.0D));
assertEquals("copySign(double,double)[220] ::", -1.7976931348623157E308, StrictMath.copySign(Double.MAX_VALUE,-0.222231D));
assertEquals("copySign(double,double)[221] ::", -1.7976931348623157E308, Math.copySign(Double.MAX_VALUE,-0.222231D));
assertEquals("copySign(double,double)[222] ::", 1.7976931348623157E308, StrictMath.copySign(Double.MAX_VALUE,Double.MAX_VALUE));
assertEquals("copySign(double,double)[223] ::", 1.7976931348623157E308, Math.copySign(Double.MAX_VALUE,Double.MAX_VALUE));
assertEquals("copySign(double,double)[224] ::", 1.7976931348623157E308, StrictMath.copySign(Double.MAX_VALUE + 1,0.0D));
assertEquals("copySign(double,double)[225] ::", 1.7976931348623157E308, Math.copySign(Double.MAX_VALUE + 1,0.0D));
assertEquals("copySign(double,double)[226] ::", 1.7976931348623157E308, StrictMath.copySign(Double.MAX_VALUE + 1,1.0D));
assertEquals("copySign(double,double)[227] ::", 1.7976931348623157E308, Math.copySign(Double.MAX_VALUE + 1,1.0D));
assertEquals("copySign(double,double)[228] ::", 1.7976931348623157E308, StrictMath.copySign(Double.MAX_VALUE + 1,0.222231D));
assertEquals("copySign(double,double)[229] ::", 1.7976931348623157E308, Math.copySign(Double.MAX_VALUE + 1,0.222231D));
assertEquals("copySign(double,double)[230] ::", -1.7976931348623157E308, StrictMath.copySign(Double.MAX_VALUE + 1,-0.0D));
assertEquals("copySign(double,double)[231] ::", -1.7976931348623157E308, StrictMath.copySign(Double.MAX_VALUE + 1,-0.0D));
assertEquals("copySign(double,double)[232] ::", -1.7976931348623157E308, StrictMath.copySign(Double.MAX_VALUE + 1,-1.0D));
assertEquals("copySign(double,double)[233] ::", -1.7976931348623157E308, Math.copySign(Double.MAX_VALUE + 1,-1.0D));
assertEquals("copySign(double,double)[234] ::", -1.7976931348623157E308, StrictMath.copySign(Double.MAX_VALUE + 1,-0.222231D));
assertEquals("copySign(double,double)[235] ::", -1.7976931348623157E308, Math.copySign(Double.MAX_VALUE + 1,-0.222231D));
assertEquals("copySign(double,double)[236] ::", 1.7976931348623157E308, StrictMath.copySign(Double.MAX_VALUE + 1,Double.MAX_VALUE + 1));
assertEquals("copySign(double,double)[237] ::", 1.7976931348623157E308, Math.copySign(Double.MAX_VALUE + 1,Double.MAX_VALUE + 1));
}

public void testCopySign_float()
{
assertEquals("copySign(float,float)[0] ::", 3.4028234663852886E38F, StrictMath.copySign(-Float.MAX_VALUE,0.0F));
assertEquals("copySign(float,float)[1] ::", 3.4028234663852886E38F, Math.copySign(-Float.MAX_VALUE,0.0F));
assertEquals("copySign(float,float)[2] ::", 3.4028234663852886E38F, StrictMath.copySign(-Float.MAX_VALUE,1.0F));
assertEquals("copySign(float,float)[3] ::", 3.4028234663852886E38F, Math.copySign(-Float.MAX_VALUE,1.0F));
assertEquals("copySign(float,float)[4] ::", 3.4028234663852886E38F, StrictMath.copySign(-Float.MAX_VALUE,0.222231F));
assertEquals("copySign(float,float)[5] ::", 3.4028234663852886E38F, Math.copySign(-Float.MAX_VALUE,0.222231F));
assertEquals("copySign(float,float)[6] ::", -3.4028234663852886E38F, StrictMath.copySign(-Float.MAX_VALUE,-0.0F));
assertEquals("copySign(float,float)[7] ::", -3.4028234663852886E38F, Math.copySign(-Float.MAX_VALUE,-0.0F));
assertEquals("copySign(float,float)[8] ::", -3.4028234663852886E38F, StrictMath.copySign(-Float.MAX_VALUE,-1.0F));
assertEquals("copySign(float,float)[9] ::", -3.4028234663852886E38F, Math.copySign(-Float.MAX_VALUE,-1.0F));
assertEquals("copySign(float,float)[10] ::", -3.4028234663852886E38F, StrictMath.copySign(-Float.MAX_VALUE,-0.222231F));
assertEquals("copySign(float,float)[11] ::", -3.4028234663852886E38F, Math.copySign(-Float.MAX_VALUE,-0.222231F));
assertEquals("copySign(float,float)[12] ::", -3.4028235E38F, StrictMath.copySign(-Float.MAX_VALUE,-Float.MAX_VALUE));
assertEquals("copySign(float,float)[13] ::", -3.4028235E38F, Math.copySign(-Float.MAX_VALUE,-Float.MAX_VALUE));
assertEquals("copySign(float,float)[14] ::", 1.7014117965751743E36F, StrictMath.copySign((-Float.MAX_VALUE / 200),0.0F));
assertEquals("copySign(float,float)[15] ::", 1.7014117965751743E36F, Math.copySign((-Float.MAX_VALUE / 200),0.0F));
assertEquals("copySign(float,float)[16] ::", 1.7014117965751743E36F, StrictMath.copySign((-Float.MAX_VALUE / 200),1.0F));
assertEquals("copySign(float,float)[17] ::", 1.7014117965751743E36F, Math.copySign((-Float.MAX_VALUE / 200),1.0F));
assertEquals("copySign(float,float)[18] ::", 1.7014117965751743E36F, StrictMath.copySign((-Float.MAX_VALUE / 200),0.222231F));
assertEquals("copySign(float,float)[19] ::", 1.7014117965751743E36F, Math.copySign((-Float.MAX_VALUE / 200),0.222231F));
assertEquals("copySign(float,float)[20] ::", -1.7014117965751743E36F, StrictMath.copySign((-Float.MAX_VALUE / 200),-0.0F));
assertEquals("copySign(float,float)[21] ::", -1.7014117965751743E36F, Math.copySign((-Float.MAX_VALUE / 200),-0.0F));
assertEquals("copySign(float,float)[22] ::", -1.7014117965751743E36F, StrictMath.copySign((-Float.MAX_VALUE / 200),-1.0F));
assertEquals("copySign(float,float)[23] ::", -1.7014117965751743E36F, Math.copySign((-Float.MAX_VALUE / 200),-1.0F));
assertEquals("copySign(float,float)[24] ::", -1.7014117965751743E36F, StrictMath.copySign((-Float.MAX_VALUE / 200),-0.222231F));
assertEquals("copySign(float,float)[25] ::", -1.7014117965751743E36F, Math.copySign((-Float.MAX_VALUE / 200),-0.222231F));
assertEquals("copySign(float,float)[26] ::", -1.7014118E36F, StrictMath.copySign((-Float.MAX_VALUE / 200),(-Float.MAX_VALUE / 200)));
assertEquals("copySign(float,float)[27] ::", -1.7014118E36F, Math.copySign((-Float.MAX_VALUE / 200),(-Float.MAX_VALUE / 200)));
assertEquals("copySign(float,float)[28] ::", 6.805646869388047E35F, StrictMath.copySign((-Float.MAX_VALUE / 500),0.0F));
assertEquals("copySign(float,float)[29] ::", 6.805646869388047E35F, Math.copySign((-Float.MAX_VALUE / 500),0.0F));
assertEquals("copySign(float,float)[30] ::", 6.805646869388047E35F, StrictMath.copySign((-Float.MAX_VALUE / 500),1.0F));
assertEquals("copySign(float,float)[31] ::", 6.805646869388047E35F, Math.copySign((-Float.MAX_VALUE / 500),1.0F));
assertEquals("copySign(float,float)[32] ::", 6.805646869388047E35F, StrictMath.copySign((-Float.MAX_VALUE / 500),0.222231F));
assertEquals("copySign(float,float)[33] ::", 6.805646869388047E35F, Math.copySign((-Float.MAX_VALUE / 500),0.222231F));
assertEquals("copySign(float,float)[34] ::", -6.805646869388047E35F, StrictMath.copySign((-Float.MAX_VALUE / 500),-0.0F));
assertEquals("copySign(float,float)[35] ::", -6.805646869388047E35F, Math.copySign((-Float.MAX_VALUE / 500),-0.0F));
assertEquals("copySign(float,float)[36] ::", -6.805646869388047E35F, StrictMath.copySign((-Float.MAX_VALUE / 500),-1.0F));
assertEquals("copySign(float,float)[37] ::", -6.805646869388047E35F, Math.copySign((-Float.MAX_VALUE / 500),-1.0F));
assertEquals("copySign(float,float)[38] ::", -6.805646869388047E35F, StrictMath.copySign((-Float.MAX_VALUE / 500),-0.222231F));
assertEquals("copySign(float,float)[39] ::", -6.805646869388047E35F, Math.copySign((-Float.MAX_VALUE / 500),-0.222231F));
assertEquals("copySign(float,float)[40] ::", -6.805647E35F, StrictMath.copySign((-Float.MAX_VALUE / 500),(-Float.MAX_VALUE / 500)));
assertEquals("copySign(float,float)[41] ::", -6.805647E35F, Math.copySign((-Float.MAX_VALUE / 500),(-Float.MAX_VALUE / 500)));
assertEquals("copySign(float,float)[42] ::", 2.802596928649634E-42F, StrictMath.copySign((-Float.MIN_VALUE * 2000),0.0F));
assertEquals("copySign(float,float)[43] ::", 2.802596928649634E-42F, Math.copySign((-Float.MIN_VALUE * 2000),0.0F));
assertEquals("copySign(float,float)[44] ::", 2.802596928649634E-42F, StrictMath.copySign((-Float.MIN_VALUE * 2000),1.0F));
assertEquals("copySign(float,float)[45] ::", 2.802596928649634E-42F, Math.copySign((-Float.MIN_VALUE * 2000),1.0F));
assertEquals("copySign(float,float)[46] ::", 2.802596928649634E-42F, StrictMath.copySign((-Float.MIN_VALUE * 2000),0.222231F));
assertEquals("copySign(float,float)[47] ::", 2.802596928649634E-42F, Math.copySign((-Float.MIN_VALUE * 2000),0.222231F));
assertEquals("copySign(float,float)[48] ::", -2.802596928649634E-42F, StrictMath.copySign((-Float.MIN_VALUE * 2000),-0.0F));
assertEquals("copySign(float,float)[49] ::", -2.802596928649634E-42F, Math.copySign((-Float.MIN_VALUE * 2000),-0.0F));
assertEquals("copySign(float,float)[50] ::", -2.802596928649634E-42F, StrictMath.copySign((-Float.MIN_VALUE * 2000),-1.0F));
assertEquals("copySign(float,float)[51] ::", -2.802596928649634E-42F, Math.copySign((-Float.MIN_VALUE * 2000),-1.0F));
assertEquals("copySign(float,float)[52] ::", -2.802596928649634E-42F, StrictMath.copySign((-Float.MIN_VALUE * 2000),-0.222231F));
assertEquals("copySign(float,float)[53] ::", -2.802596928649634E-42F, Math.copySign((-Float.MIN_VALUE * 2000),-0.222231F));
assertEquals("copySign(float,float)[54] ::", -2.803E-42F, StrictMath.copySign((-Float.MIN_VALUE * 2000),(-Float.MIN_VALUE * 2000)));
assertEquals("copySign(float,float)[55] ::", -2.803E-42F, Math.copySign((-Float.MIN_VALUE * 2000),(-Float.MIN_VALUE * 2000)));
assertEquals("copySign(float,float)[56] ::", 1.401298464324817E-42F, StrictMath.copySign((-Float.MIN_VALUE * 1000),0.0F));
assertEquals("copySign(float,float)[57] ::", 1.401298464324817E-42F, Math.copySign((-Float.MIN_VALUE * 1000),0.0F));
assertEquals("copySign(float,float)[58] ::", 1.401298464324817E-42F, StrictMath.copySign((-Float.MIN_VALUE * 1000),1.0F));
assertEquals("copySign(float,float)[59] ::", 1.401298464324817E-42F, Math.copySign((-Float.MIN_VALUE * 1000),1.0F));
assertEquals("copySign(float,float)[60] ::", 1.401298464324817E-42F, StrictMath.copySign((-Float.MIN_VALUE * 1000),0.222231F));
assertEquals("copySign(float,float)[61] ::", 1.401298464324817E-42F, Math.copySign((-Float.MIN_VALUE * 1000),0.222231F));
assertEquals("copySign(float,float)[62] ::", -1.401298464324817E-42F, StrictMath.copySign((-Float.MIN_VALUE * 1000),-0.0F));
assertEquals("copySign(float,float)[63] ::", -1.401298464324817E-42F, Math.copySign((-Float.MIN_VALUE * 1000),-0.0F));
assertEquals("copySign(float,float)[64] ::", -1.401298464324817E-42F, StrictMath.copySign((-Float.MIN_VALUE * 1000),-1.0F));
assertEquals("copySign(float,float)[65] ::", -1.401298464324817E-42F, Math.copySign((-Float.MIN_VALUE * 1000),-1.0F));
assertEquals("copySign(float,float)[66] ::", -1.401298464324817E-42F, StrictMath.copySign((-Float.MIN_VALUE * 1000),-0.222231F));
assertEquals("copySign(float,float)[67] ::", -1.401298464324817E-42F, Math.copySign((-Float.MIN_VALUE * 1000),-0.222231F));
assertEquals("copySign(float,float)[68] ::", -1.401E-42F, StrictMath.copySign((-Float.MIN_VALUE * 1000),(-Float.MIN_VALUE * 1000)));
assertEquals("copySign(float,float)[69] ::", -1.401E-42F, Math.copySign((-Float.MIN_VALUE * 1000),(-Float.MIN_VALUE * 1000)));
assertEquals("copySign(float,float)[70] ::", 3.2948748E7F, StrictMath.copySign(-32948748.958324F,0.0F));
assertEquals("copySign(float,float)[71] ::", 3.2948748E7F, Math.copySign(-32948748.958324F,0.0F));
assertEquals("copySign(float,float)[72] ::", 3.2948748E7F, StrictMath.copySign(-32948748.958324F,1.0F));
assertEquals("copySign(float,float)[73] ::", 3.2948748E7F, Math.copySign(-32948748.958324F,1.0F));
assertEquals("copySign(float,float)[74] ::", 3.2948748E7F, StrictMath.copySign(-32948748.958324F,0.222231F));
assertEquals("copySign(float,float)[75] ::", 3.2948748E7F, Math.copySign(-32948748.958324F,0.222231F));
assertEquals("copySign(float,float)[76] ::", -3.2948748E7F, StrictMath.copySign(-32948748.958324F,-0.0F));
assertEquals("copySign(float,float)[77] ::", -3.2948748E7F, Math.copySign(-32948748.958324F,-0.0F));
assertEquals("copySign(float,float)[78] ::", -3.2948748E7F, StrictMath.copySign(-32948748.958324F,-1.0F));
assertEquals("copySign(float,float)[79] ::", -3.2948748E7F, Math.copySign(-32948748.958324F,-1.0F));
assertEquals("copySign(float,float)[80] ::", -3.2948748E7F, StrictMath.copySign(-32948748.958324F,-0.222231F));
assertEquals("copySign(float,float)[81] ::", -3.2948748E7F, Math.copySign(-32948748.958324F,-0.222231F));
assertEquals("copySign(float,float)[82] ::", -3.2948748E7F, StrictMath.copySign(-32948748.958324F,-32948748.958324F));
assertEquals("copySign(float,float)[83] ::", -3.2948748E7F, Math.copySign(-32948748.958324F,-32948748.958324F));
assertEquals("copySign(float,float)[84] ::", 8.99999985648492E-9F, StrictMath.copySign(-0.000000009F,0.0F));
assertEquals("copySign(float,float)[85] ::", 8.99999985648492E-9F, Math.copySign(-0.000000009F,0.0F));
assertEquals("copySign(float,float)[86] ::", 8.99999985648492E-9F, StrictMath.copySign(-0.000000009F,1.0F));
assertEquals("copySign(float,float)[87] ::", 8.99999985648492E-9F, Math.copySign(-0.000000009F,1.0F));
assertEquals("copySign(float,float)[88] ::", 8.99999985648492E-9F, StrictMath.copySign(-0.000000009F,0.222231F));
assertEquals("copySign(float,float)[89] ::", 8.99999985648492E-9F, Math.copySign(-0.000000009F,0.222231F));
assertEquals("copySign(float,float)[90] ::", -8.99999985648492E-9F, StrictMath.copySign(-0.000000009F,-0.0F));
assertEquals("copySign(float,float)[91] ::", -8.99999985648492E-9F, Math.copySign(-0.000000009F,-0.0F));
assertEquals("copySign(float,float)[92] ::", -8.99999985648492E-9F, StrictMath.copySign(-0.000000009F,-1.0F));
assertEquals("copySign(float,float)[93] ::", -8.99999985648492E-9F, Math.copySign(-0.000000009F,-1.0F));
assertEquals("copySign(float,float)[94] ::", -8.99999985648492E-9F, StrictMath.copySign(-0.000000009F,-0.222231F));
assertEquals("copySign(float,float)[95] ::", -8.99999985648492E-9F, Math.copySign(-0.000000009F,-0.222231F));
assertEquals("copySign(float,float)[96] ::", -9.0E-9F, StrictMath.copySign(-0.000000009F,-0.000000009F));
assertEquals("copySign(float,float)[97] ::", -9.0E-9F, Math.copySign(-0.000000009F,-0.000000009F));
assertEquals("copySign(float,float)[98] ::", 2.0000000233721948E-7F, StrictMath.copySign(-0.0000002F,0.0F));
assertEquals("copySign(float,float)[99] ::", 2.0000000233721948E-7F, Math.copySign(-0.0000002F,0.0F));
assertEquals("copySign(float,float)[100] ::", 2.0000000233721948E-7F, StrictMath.copySign(-0.0000002F,1.0F));
assertEquals("copySign(float,float)[101] ::", 2.0000000233721948E-7F, Math.copySign(-0.0000002F,1.0F));
assertEquals("copySign(float,float)[102] ::", 2.0000000233721948E-7F, StrictMath.copySign(-0.0000002F,0.222231F));
assertEquals("copySign(float,float)[103] ::", 2.0000000233721948E-7F, Math.copySign(-0.0000002F,0.222231F));
assertEquals("copySign(float,float)[104] ::", -2.0000000233721948E-7F, StrictMath.copySign(-0.0000002F,-0.0F));
assertEquals("copySign(float,float)[105] ::", -2.0000000233721948E-7F, Math.copySign(-0.0000002F,-0.0F));
assertEquals("copySign(float,float)[106] ::", -2.0000000233721948E-7F, StrictMath.copySign(-0.0000002F,-1.0F));
assertEquals("copySign(float,float)[107] ::", -2.0000000233721948E-7F, Math.copySign(-0.0000002F,-1.0F));
assertEquals("copySign(float,float)[108] ::", -2.0000000233721948E-7F, StrictMath.copySign(-0.0000002F,-0.222231F));
assertEquals("copySign(float,float)[109] ::", -2.0000000233721948E-7F, Math.copySign(-0.0000002F,-0.222231F));
assertEquals("copySign(float,float)[110] ::", -2.0E-7F, StrictMath.copySign(-0.0000002F,-0.0000002F));
assertEquals("copySign(float,float)[111] ::", -2.0E-7F, Math.copySign(-0.0000002F,-0.0000002F));
assertEquals("copySign(float,float)[112] ::", 0.0F, StrictMath.copySign(0F,0.0F));
assertEquals("copySign(float,float)[113] ::", 0.0F, Math.copySign(0F,0.0F));
assertEquals("copySign(float,float)[114] ::", 0.0F, StrictMath.copySign(0F,1.0F));
assertEquals("copySign(float,float)[115] ::", 0.0F, Math.copySign(0F,1.0F));
assertEquals("copySign(float,float)[116] ::", 0.0F, StrictMath.copySign(0F,0.222231F));
assertEquals("copySign(float,float)[117] ::", 0.0F, Math.copySign(0F,0.222231F));
assertEquals("copySign(float,float)[118] ::", -0.0F, StrictMath.copySign(0F,-0.0F));
assertEquals("copySign(float,float)[119] ::", -0.0F, Math.copySign(0F,-0.0F));
assertEquals("copySign(float,float)[120] ::", -0.0F, StrictMath.copySign(0F,-1.0F));
assertEquals("copySign(float,float)[121] ::", -0.0F, Math.copySign(0F,-1.0F));
assertEquals("copySign(float,float)[122] ::", -0.0F, StrictMath.copySign(0F,-0.222231F));
assertEquals("copySign(float,float)[123] ::", -0.0F, Math.copySign(0F,-0.222231F));
assertEquals("copySign(float,float)[124] ::", 0.0F, StrictMath.copySign(0F,0F));
assertEquals("copySign(float,float)[125] ::", 0.0F, Math.copySign(0F,0F));
assertEquals("copySign(float,float)[126] ::", 0.45623233914375305F, StrictMath.copySign(0.456232334F,0.0F));
assertEquals("copySign(float,float)[127] ::", 0.45623233914375305F, Math.copySign(0.456232334F,0.0F));
assertEquals("copySign(float,float)[128] ::", 0.45623233914375305F, StrictMath.copySign(0.456232334F,1.0F));
assertEquals("copySign(float,float)[129] ::", 0.45623233914375305F, Math.copySign(0.456232334F,1.0F));
assertEquals("copySign(float,float)[130] ::", 0.45623233914375305F, StrictMath.copySign(0.456232334F,0.222231F));
assertEquals("copySign(float,float)[131] ::", 0.45623233914375305F, Math.copySign(0.456232334F,0.222231F));
assertEquals("copySign(float,float)[132] ::", -0.45623233914375305F, StrictMath.copySign(0.456232334F,-0.0F));
assertEquals("copySign(float,float)[133] ::", -0.45623233914375305F, Math.copySign(0.456232334F,-0.0F));
assertEquals("copySign(float,float)[134] ::", -0.45623233914375305F, StrictMath.copySign(0.456232334F,-1.0F));
assertEquals("copySign(float,float)[135] ::", -0.45623233914375305F, Math.copySign(0.456232334F,-1.0F));
assertEquals("copySign(float,float)[136] ::", -0.45623233914375305F, StrictMath.copySign(0.456232334F,-0.222231F));
assertEquals("copySign(float,float)[137] ::", -0.45623233914375305F, Math.copySign(0.456232334F,-0.222231F));
assertEquals("copySign(float,float)[138] ::", 0.45623234F, StrictMath.copySign(0.456232334F,0.456232334F));
assertEquals("copySign(float,float)[139] ::", 0.45623234F, Math.copySign(0.456232334F,0.456232334F));
assertEquals("copySign(float,float)[140] ::", 1224257.25F, StrictMath.copySign(1224257.312321263F,0.0F));
assertEquals("copySign(float,float)[141] ::", 1224257.25F, Math.copySign(1224257.312321263F,0.0F));
assertEquals("copySign(float,float)[142] ::", 1224257.25F, StrictMath.copySign(1224257.312321263F,1.0F));
assertEquals("copySign(float,float)[143] ::", 1224257.25F, Math.copySign(1224257.312321263F,1.0F));
assertEquals("copySign(float,float)[144] ::", 1224257.25F, StrictMath.copySign(1224257.312321263F,0.222231F));
assertEquals("copySign(float,float)[145] ::", 1224257.25F, Math.copySign(1224257.312321263F,0.222231F));
assertEquals("copySign(float,float)[146] ::", -1224257.25F, StrictMath.copySign(1224257.312321263F,-0.0F));
assertEquals("copySign(float,float)[147] ::", -1224257.25F, Math.copySign(1224257.312321263F,-0.0F));
assertEquals("copySign(float,float)[148] ::", -1224257.25F, StrictMath.copySign(1224257.312321263F,-1.0F));
assertEquals("copySign(float,float)[149] ::", -1224257.25F, Math.copySign(1224257.312321263F,-1.0F));
assertEquals("copySign(float,float)[150] ::", -1224257.25F, StrictMath.copySign(1224257.312321263F,-0.222231F));
assertEquals("copySign(float,float)[151] ::", -1224257.25F, Math.copySign(1224257.312321263F,-0.222231F));
assertEquals("copySign(float,float)[152] ::", 1224257.2F, StrictMath.copySign(1224257.312321263F,1224257.312321263F));
assertEquals("copySign(float,float)[153] ::", 1224257.2F, Math.copySign(1224257.312321263F,1224257.312321263F));
assertEquals("copySign(float,float)[154] ::", 9.999832064E9F, StrictMath.copySign(9999832342.12365F,0.0F));
assertEquals("copySign(float,float)[155] ::", 9.999832064E9F, Math.copySign(9999832342.12365F,0.0F));
assertEquals("copySign(float,float)[156] ::", 9.999832064E9F, StrictMath.copySign(9999832342.12365F,1.0F));
assertEquals("copySign(float,float)[157] ::", 9.999832064E9F, Math.copySign(9999832342.12365F,1.0F));
assertEquals("copySign(float,float)[158] ::", 9.999832064E9F, StrictMath.copySign(9999832342.12365F,0.222231F));
assertEquals("copySign(float,float)[159] ::", 9.999832064E9F, Math.copySign(9999832342.12365F,0.222231F));
assertEquals("copySign(float,float)[160] ::", -9.999832064E9F, StrictMath.copySign(9999832342.12365F,-0.0F));
assertEquals("copySign(float,float)[161] ::", -9.999832064E9F, Math.copySign(9999832342.12365F,-0.0F));
assertEquals("copySign(float,float)[162] ::", -9.999832064E9F, StrictMath.copySign(9999832342.12365F,-1.0F));
assertEquals("copySign(float,float)[163] ::", -9.999832064E9F, Math.copySign(9999832342.12365F,-1.0F));
assertEquals("copySign(float,float)[164] ::", -9.999832064E9F, StrictMath.copySign(9999832342.12365F,-0.222231F));
assertEquals("copySign(float,float)[165] ::", -9.999832064E9F, Math.copySign(9999832342.12365F,-0.222231F));
assertEquals("copySign(float,float)[166] ::", 9.9998321E9F, StrictMath.copySign(9999832342.12365F,9999832342.12365F));
assertEquals("copySign(float,float)[167] ::", 9.9998321E9F, Math.copySign(9999832342.12365F,9999832342.12365F));
assertEquals("copySign(float,float)[168] ::", 1.401298464324817E-45F, StrictMath.copySign(Float.MIN_VALUE,0.0F));
assertEquals("copySign(float,float)[169] ::", 1.401298464324817E-45F, Math.copySign(Float.MIN_VALUE,0.0F));
assertEquals("copySign(float,float)[170] ::", 1.401298464324817E-45F, StrictMath.copySign(Float.MIN_VALUE,1.0F));
assertEquals("copySign(float,float)[171] ::", 1.401298464324817E-45F, Math.copySign(Float.MIN_VALUE,1.0F));
assertEquals("copySign(float,float)[172] ::", 1.401298464324817E-45F, StrictMath.copySign(Float.MIN_VALUE,0.222231F));
assertEquals("copySign(float,float)[173] ::", 1.401298464324817E-45F, Math.copySign(Float.MIN_VALUE,0.222231F));
assertEquals("copySign(float,float)[174] ::", -1.401298464324817E-45F, StrictMath.copySign(Float.MIN_VALUE,-0.0F));
assertEquals("copySign(float,float)[175] ::", -1.401298464324817E-45F, Math.copySign(Float.MIN_VALUE,-0.0F));
assertEquals("copySign(float,float)[176] ::", -1.401298464324817E-45F, StrictMath.copySign(Float.MIN_VALUE,-1.0F));
assertEquals("copySign(float,float)[177] ::", -1.401298464324817E-45F, Math.copySign(Float.MIN_VALUE,-1.0F));
assertEquals("copySign(float,float)[178] ::", -1.401298464324817E-45F, StrictMath.copySign(Float.MIN_VALUE,-0.222231F));
assertEquals("copySign(float,float)[179] ::", -1.401298464324817E-45F, Math.copySign(Float.MIN_VALUE,-0.222231F));
assertEquals("copySign(float,float)[180] ::", 1.4E-45F, StrictMath.copySign(Float.MIN_VALUE,Float.MIN_VALUE));
assertEquals("copySign(float,float)[181] ::", 1.4E-45F, Math.copySign(Float.MIN_VALUE,Float.MIN_VALUE));
assertEquals("copySign(float,float)[182] ::", 2.802596928649634E-43F, StrictMath.copySign((Float.MIN_VALUE * 200),0.0F));
assertEquals("copySign(float,float)[183] ::", 2.802596928649634E-43F, Math.copySign((Float.MIN_VALUE * 200),0.0F));
assertEquals("copySign(float,float)[184] ::", 2.802596928649634E-43F, StrictMath.copySign((Float.MIN_VALUE * 200),1.0F));
assertEquals("copySign(float,float)[185] ::", 2.802596928649634E-43F, Math.copySign((Float.MIN_VALUE * 200),1.0F));
assertEquals("copySign(float,float)[186] ::", 2.802596928649634E-43F, StrictMath.copySign((Float.MIN_VALUE * 200),0.222231F));
assertEquals("copySign(float,float)[187] ::", 2.802596928649634E-43F, Math.copySign((Float.MIN_VALUE * 200),0.222231F));
assertEquals("copySign(float,float)[188] ::", -2.802596928649634E-43F, StrictMath.copySign((Float.MIN_VALUE * 200),-0.0F));
assertEquals("copySign(float,float)[189] ::", -2.802596928649634E-43F, Math.copySign((Float.MIN_VALUE * 200),-0.0F));
assertEquals("copySign(float,float)[190] ::", -2.802596928649634E-43F, StrictMath.copySign((Float.MIN_VALUE * 200),-1.0F));
assertEquals("copySign(float,float)[191] ::", -2.802596928649634E-43F, Math.copySign((Float.MIN_VALUE * 200),-1.0F));
assertEquals("copySign(float,float)[192] ::", -2.802596928649634E-43F, StrictMath.copySign((Float.MIN_VALUE * 200),-0.222231F));
assertEquals("copySign(float,float)[193] ::", -2.802596928649634E-43F, Math.copySign((Float.MIN_VALUE * 200),-0.222231F));
assertEquals("copySign(float,float)[194] ::", 2.8E-43F, StrictMath.copySign((Float.MIN_VALUE * 200),(Float.MIN_VALUE * 200)));
assertEquals("copySign(float,float)[195] ::", 2.8E-43F, Math.copySign((Float.MIN_VALUE * 200),(Float.MIN_VALUE * 200)));
assertEquals("copySign(float,float)[196] ::", 6.805646869388047E35F, StrictMath.copySign((Float.MAX_VALUE / 500),0.0F));
assertEquals("copySign(float,float)[197] ::", 6.805646869388047E35F, Math.copySign((Float.MAX_VALUE / 500),0.0F));
assertEquals("copySign(float,float)[198] ::", 6.805646869388047E35F, StrictMath.copySign((Float.MAX_VALUE / 500),1.0F));
assertEquals("copySign(float,float)[199] ::", 6.805646869388047E35F, Math.copySign((Float.MAX_VALUE / 500),1.0F));
assertEquals("copySign(float,float)[200] ::", 6.805646869388047E35F, StrictMath.copySign((Float.MAX_VALUE / 500),0.222231F));
assertEquals("copySign(float,float)[201] ::", 6.805646869388047E35F, Math.copySign((Float.MAX_VALUE / 500),0.222231F));
assertEquals("copySign(float,float)[202] ::", -6.805646869388047E35F, StrictMath.copySign((Float.MAX_VALUE / 500),-0.0F));
assertEquals("copySign(float,float)[203] ::", -6.805646869388047E35F, Math.copySign((Float.MAX_VALUE / 500),-0.0F));
assertEquals("copySign(float,float)[204] ::", -6.805646869388047E35F, StrictMath.copySign((Float.MAX_VALUE / 500),-1.0F));
assertEquals("copySign(float,float)[205] ::", -6.805646869388047E35F, Math.copySign((Float.MAX_VALUE / 500),-1.0F));
assertEquals("copySign(float,float)[206] ::", -6.805646869388047E35F, StrictMath.copySign((Float.MAX_VALUE / 500),-0.222231F));
assertEquals("copySign(float,float)[207] ::", -6.805646869388047E35F, Math.copySign((Float.MAX_VALUE / 500),-0.222231F));
assertEquals("copySign(float,float)[208] ::", 6.805647E35F, StrictMath.copySign((Float.MAX_VALUE / 500),(Float.MAX_VALUE / 500)));
assertEquals("copySign(float,float)[209] ::", 6.805647E35F, Math.copySign((Float.MAX_VALUE / 500),(Float.MAX_VALUE / 500)));
assertEquals("copySign(float,float)[210] ::", 1.7014117965751743E36F, StrictMath.copySign((Float.MAX_VALUE / 200),0.0F));
assertEquals("copySign(float,float)[211] ::", 1.7014117965751743E36F, Math.copySign((Float.MAX_VALUE / 200),0.0F));
assertEquals("copySign(float,float)[212] ::", 1.7014117965751743E36F, StrictMath.copySign((Float.MAX_VALUE / 200),1.0F));
assertEquals("copySign(float,float)[213] ::", 1.7014117965751743E36F, Math.copySign((Float.MAX_VALUE / 200),1.0F));
assertEquals("copySign(float,float)[214] ::", 1.7014117965751743E36F, StrictMath.copySign((Float.MAX_VALUE / 200),0.222231F));
assertEquals("copySign(float,float)[215] ::", 1.7014117965751743E36F, Math.copySign((Float.MAX_VALUE / 200),0.222231F));
assertEquals("copySign(float,float)[216] ::", -1.7014117965751743E36F, StrictMath.copySign((Float.MAX_VALUE / 200),-0.0F));
assertEquals("copySign(float,float)[217] ::", -1.7014117965751743E36F, Math.copySign((Float.MAX_VALUE / 200),-0.0F));
assertEquals("copySign(float,float)[218] ::", -1.7014117965751743E36F, StrictMath.copySign((Float.MAX_VALUE / 200),-1.0F));
assertEquals("copySign(float,float)[219] ::", -1.7014117965751743E36F, Math.copySign((Float.MAX_VALUE / 200),-1.0F));
assertEquals("copySign(float,float)[220] ::", -1.7014117965751743E36F, StrictMath.copySign((Float.MAX_VALUE / 200),-0.222231F));
assertEquals("copySign(float,float)[221] ::", -1.7014117965751743E36F, Math.copySign((Float.MAX_VALUE / 200),-0.222231F));
assertEquals("copySign(float,float)[222] ::", 1.7014118E36F, StrictMath.copySign((Float.MAX_VALUE / 200),(Float.MAX_VALUE / 200)));
assertEquals("copySign(float,float)[223] ::", 1.7014118E36F, Math.copySign((Float.MAX_VALUE / 200),(Float.MAX_VALUE / 200)));
assertEquals("copySign(float,float)[224] ::", 3.4028234663852886E38F, StrictMath.copySign(Float.MAX_VALUE,0.0F));
assertEquals("copySign(float,float)[225] ::", 3.4028234663852886E38F, Math.copySign(Float.MAX_VALUE,0.0F));
assertEquals("copySign(float,float)[226] ::", 3.4028234663852886E38F, StrictMath.copySign(Float.MAX_VALUE,1.0F));
assertEquals("copySign(float,float)[227] ::", 3.4028234663852886E38F, Math.copySign(Float.MAX_VALUE,1.0F));
assertEquals("copySign(float,float)[228] ::", 3.4028234663852886E38F, StrictMath.copySign(Float.MAX_VALUE,0.222231F));
assertEquals("copySign(float,float)[229] ::", 3.4028234663852886E38F, Math.copySign(Float.MAX_VALUE,0.222231F));
assertEquals("copySign(float,float)[230] ::", -3.4028234663852886E38F, StrictMath.copySign(Float.MAX_VALUE,-0.0F));
assertEquals("copySign(float,float)[231] ::", -3.4028234663852886E38F, Math.copySign(Float.MAX_VALUE,-0.0F));
assertEquals("copySign(float,float)[232] ::", -3.4028234663852886E38F, StrictMath.copySign(Float.MAX_VALUE,-1.0F));
assertEquals("copySign(float,float)[233] ::", -3.4028234663852886E38F, Math.copySign(Float.MAX_VALUE,-1.0F));
assertEquals("copySign(float,float)[234] ::", -3.4028234663852886E38F, StrictMath.copySign(Float.MAX_VALUE,-0.222231F));
assertEquals("copySign(float,float)[235] ::", -3.4028234663852886E38F, Math.copySign(Float.MAX_VALUE,-0.222231F));
assertEquals("copySign(float,float)[236] ::", 3.4028235E38F, StrictMath.copySign(Float.MAX_VALUE,Float.MAX_VALUE));
assertEquals("copySign(float,float)[237] ::", 3.4028235E38F, Math.copySign(Float.MAX_VALUE,Float.MAX_VALUE));
assertEquals("copySign(float,float)[238] ::", 3.4028234663852886E38F, StrictMath.copySign((Float.MAX_VALUE + 1),0.0F));
assertEquals("copySign(float,float)[239] ::", 3.4028234663852886E38F, Math.copySign((Float.MAX_VALUE + 1),0.0F));
assertEquals("copySign(float,float)[240] ::", 3.4028234663852886E38F, StrictMath.copySign((Float.MAX_VALUE + 1),1.0F));
assertEquals("copySign(float,float)[241] ::", 3.4028234663852886E38F, Math.copySign((Float.MAX_VALUE + 1),1.0F));
assertEquals("copySign(float,float)[242] ::", 3.4028234663852886E38F, StrictMath.copySign((Float.MAX_VALUE + 1),0.222231F));
assertEquals("copySign(float,float)[243] ::", 3.4028234663852886E38F, Math.copySign((Float.MAX_VALUE + 1),0.222231F));
assertEquals("copySign(float,float)[244] ::", -3.4028234663852886E38F, StrictMath.copySign((Float.MAX_VALUE + 1),-0.0F));
assertEquals("copySign(float,float)[245] ::", -3.4028234663852886E38F, Math.copySign((Float.MAX_VALUE + 1),-0.0F));
assertEquals("copySign(float,float)[246] ::", -3.4028234663852886E38F, StrictMath.copySign((Float.MAX_VALUE + 1),-1.0F));
assertEquals("copySign(float,float)[247] ::", -3.4028234663852886E38F, Math.copySign((Float.MAX_VALUE + 1),-1.0F));
assertEquals("copySign(float,float)[248] ::", -3.4028234663852886E38F, StrictMath.copySign((Float.MAX_VALUE + 1),-0.222231F));
assertEquals("copySign(float,float)[249] ::", -3.4028234663852886E38F, Math.copySign((Float.MAX_VALUE + 1),-0.222231F));
assertEquals("copySign(float,float)[250] ::", 3.4028235E38F, StrictMath.copySign((Float.MAX_VALUE + 1),(Float.MAX_VALUE + 1)));
assertEquals("copySign(float,float)[251] ::", 3.4028235E38F, Math.copySign((Float.MAX_VALUE + 1),(Float.MAX_VALUE + 1)));
}

public void testExp()
{
assertEquals("exp(double)[0] ::", 0.0, StrictMath.exp(-Double.MAX_VALUE));
assertTrue("exp(double)[1] ::", -4.9E-324 <= Math.exp(-Double.MAX_VALUE) && 4.9E-324 >= Math.exp(-Double.MAX_VALUE));
assertEquals("exp(double)[2] ::", 0.0, StrictMath.exp((-Double.MAX_VALUE / 200)));
assertTrue("exp(double)[3] ::", -4.9E-324 <= Math.exp((-Double.MAX_VALUE / 200)) && 4.9E-324 >= Math.exp((-Double.MAX_VALUE / 200)));
assertEquals("exp(double)[4] ::", 0.0, StrictMath.exp((-Double.MAX_VALUE / 500)));
assertTrue("exp(double)[5] ::", -4.9E-324 <= Math.exp((-Double.MAX_VALUE / 500)) && 4.9E-324 >= Math.exp((-Double.MAX_VALUE / 500)));
assertEquals("exp(double)[6] ::", 1.0, StrictMath.exp((-Double.MIN_VALUE * 2000)));
assertTrue("exp(double)[7] ::", 0.9999999999999998 <= Math.exp((-Double.MIN_VALUE * 2000)) && 1.0000000000000002 >= Math.exp((-Double.MIN_VALUE * 2000)));
assertEquals("exp(double)[8] ::", 1.0, StrictMath.exp((-Double.MIN_VALUE * 1000)));
assertTrue("exp(double)[9] ::", 0.9999999999999998 <= Math.exp((-Double.MIN_VALUE * 1000)) && 1.0000000000000002 >= Math.exp((-Double.MIN_VALUE * 1000)));
assertEquals("exp(double)[10] ::", 0.0, StrictMath.exp(-2929112212.129231481346));
assertTrue("exp(double)[11] ::", -4.9E-324 <= Math.exp(-2929112212.129231481346) && 4.9E-324 >= Math.exp(-2929112212.129231481346));
assertEquals("exp(double)[12] ::", 0.0, StrictMath.exp(-2372.228212D));
assertTrue("exp(double)[13] ::", -4.9E-324 <= Math.exp(-2372.228212D) && 4.9E-324 >= Math.exp(-2372.228212D));
assertEquals("exp(double)[14] ::", 0.29428694035725067, StrictMath.exp(-1.2232D));
assertTrue("exp(double)[15] ::", 0.2942869403572506 <= Math.exp(-1.2232D) && 0.2942869403572507 >= Math.exp(-1.2232D));
assertEquals("exp(double)[16] ::", 1.0, StrictMath.exp(0D));
assertTrue("exp(double)[17] ::", 0.9999999999999998 <= Math.exp(0D) && 1.0000000000000002 >= Math.exp(0D));
assertEquals("exp(double)[18] ::", 11.3842406513381, StrictMath.exp(2.43223D));
assertTrue("exp(double)[19] ::", 11.384240651338098 <= Math.exp(2.43223D) && 11.384240651338102 >= Math.exp(2.43223D));
assertEquals("exp(double)[20] ::", Infinity, StrictMath.exp(18232155.3323566D));
assertEquals("exp(double)[21] ::", Infinity, Math.exp(18232155.3323566D));
assertEquals("exp(double)[22] ::", 1.0, StrictMath.exp(Double.MIN_VALUE));
assertTrue("exp(double)[23] ::", 0.9999999999999998 <= Math.exp(Double.MIN_VALUE) && 1.0000000000000002 >= Math.exp(Double.MIN_VALUE));
assertEquals("exp(double)[24] ::", 1.0, StrictMath.exp((Double.MIN_VALUE * 200)));
assertTrue("exp(double)[25] ::", 0.9999999999999998 <= Math.exp((Double.MIN_VALUE * 200)) && 1.0000000000000002 >= Math.exp((Double.MIN_VALUE * 200)));
assertEquals("exp(double)[26] ::", Infinity, StrictMath.exp((Double.MAX_VALUE / 500)));
assertEquals("exp(double)[27] ::", Infinity, Math.exp((Double.MAX_VALUE / 500)));
assertEquals("exp(double)[28] ::", Infinity, StrictMath.exp((Double.MAX_VALUE / 200)));
assertEquals("exp(double)[29] ::", Infinity, Math.exp((Double.MAX_VALUE / 200)));
assertEquals("exp(double)[30] ::", Infinity, StrictMath.exp(Double.MAX_VALUE));
assertEquals("exp(double)[31] ::", Infinity, Math.exp(Double.MAX_VALUE));
assertEquals("exp(double)[32] ::", Infinity, StrictMath.exp(Double.MAX_VALUE + 1));
assertEquals("exp(double)[33] ::", Infinity, Math.exp(Double.MAX_VALUE + 1));
}

public void testExpm1()
{
assertEquals("expm1(double)[0] ::", -1.0, StrictMath.expm1(-Double.MAX_VALUE));
assertTrue("expm1(double)[1] ::", -1.0000000000000002 <= Math.expm1(-Double.MAX_VALUE) && -0.9999999999999998 >= Math.expm1(-Double.MAX_VALUE));
assertEquals("expm1(double)[2] ::", -1.0, StrictMath.expm1((-Double.MAX_VALUE / 200)));
assertTrue("expm1(double)[3] ::", -1.0000000000000002 <= Math.expm1((-Double.MAX_VALUE / 200)) && -0.9999999999999998 >= Math.expm1((-Double.MAX_VALUE / 200)));
assertEquals("expm1(double)[4] ::", -1.0, StrictMath.expm1((-Double.MAX_VALUE / 500)));
assertTrue("expm1(double)[5] ::", -1.0000000000000002 <= Math.expm1((-Double.MAX_VALUE / 500)) && -0.9999999999999998 >= Math.expm1((-Double.MAX_VALUE / 500)));
assertEquals("expm1(double)[6] ::", -9.88E-321, StrictMath.expm1((-Double.MIN_VALUE * 2000)));
assertTrue("expm1(double)[7] ::", -9.886E-321 <= Math.expm1((-Double.MIN_VALUE * 2000)) && -9.876E-321 >= Math.expm1((-Double.MIN_VALUE * 2000)));
assertEquals("expm1(double)[8] ::", -4.94E-321, StrictMath.expm1((-Double.MIN_VALUE * 1000)));
assertTrue("expm1(double)[9] ::", -4.946E-321 <= Math.expm1((-Double.MIN_VALUE * 1000)) && -4.936E-321 >= Math.expm1((-Double.MIN_VALUE * 1000)));
assertEquals("expm1(double)[10] ::", -1.0, StrictMath.expm1(-2929112212.129231481346));
assertTrue("expm1(double)[11] ::", -1.0000000000000002 <= Math.expm1(-2929112212.129231481346) && -0.9999999999999998 >= Math.expm1(-2929112212.129231481346));
assertEquals("expm1(double)[12] ::", -1.0, StrictMath.expm1(-2372.228212D));
assertTrue("expm1(double)[13] ::", -1.0000000000000002 <= Math.expm1(-2372.228212D) && -0.9999999999999998 >= Math.expm1(-2372.228212D));
assertEquals("expm1(double)[14] ::", -0.7057130596427493, StrictMath.expm1(-1.2232D));
assertTrue("expm1(double)[15] ::", -0.7057130596427494 <= Math.expm1(-1.2232D) && -0.7057130596427492 >= Math.expm1(-1.2232D));
assertEquals("expm1(double)[16] ::", 0.0, StrictMath.expm1(0D));
assertTrue("expm1(double)[17] ::", -4.9E-324 <= Math.expm1(0D) && 4.9E-324 >= Math.expm1(0D));
assertEquals("expm1(double)[18] ::", 10.3842406513381, StrictMath.expm1(2.43223D));
assertTrue("expm1(double)[19] ::", 10.384240651338098 <= Math.expm1(2.43223D) && 10.384240651338102 >= Math.expm1(2.43223D));
assertEquals("expm1(double)[20] ::", Infinity, StrictMath.expm1(18232155.3323566D));
assertEquals("expm1(double)[21] ::", Infinity, Math.expm1(18232155.3323566D));
assertEquals("expm1(double)[22] ::", 4.9E-324, StrictMath.expm1(Double.MIN_VALUE));
assertTrue("expm1(double)[23] ::", 0.0 <= Math.expm1(Double.MIN_VALUE) && 1.0E-323 >= Math.expm1(Double.MIN_VALUE));
assertEquals("expm1(double)[24] ::", 9.9E-322, StrictMath.expm1((Double.MIN_VALUE * 200)));
assertTrue("expm1(double)[25] ::", 9.83E-322 <= Math.expm1((Double.MIN_VALUE * 200)) && 9.93E-322 >= Math.expm1((Double.MIN_VALUE * 200)));
assertEquals("expm1(double)[26] ::", Infinity, StrictMath.expm1((Double.MAX_VALUE / 500)));
assertEquals("expm1(double)[27] ::", Infinity, Math.expm1((Double.MAX_VALUE / 500)));
assertEquals("expm1(double)[28] ::", Infinity, StrictMath.expm1((Double.MAX_VALUE / 200)));
assertEquals("expm1(double)[29] ::", Infinity, Math.expm1((Double.MAX_VALUE / 200)));
assertEquals("expm1(double)[30] ::", Infinity, StrictMath.expm1(Double.MAX_VALUE));
assertEquals("expm1(double)[31] ::", Infinity, Math.expm1(Double.MAX_VALUE));
assertEquals("expm1(double)[32] ::", Infinity, StrictMath.expm1(Double.MAX_VALUE + 1));
assertEquals("expm1(double)[33] ::", Infinity, Math.expm1(Double.MAX_VALUE + 1));
}

public void testFloor()
{
assertEquals("floor(double)[0] ::", -1.7976931348623157E308, StrictMath.floor(-Double.MAX_VALUE));
assertTrue("floor(double)[1] ::", -Infinity <= Math.floor(-Double.MAX_VALUE) && -1.7976931348623155E308 >= Math.floor(-Double.MAX_VALUE));
assertEquals("floor(double)[2] ::", -8.988465674311578E305, StrictMath.floor((-Double.MAX_VALUE / 200)));
assertTrue("floor(double)[3] ::", -8.98846567431158E305 <= Math.floor((-Double.MAX_VALUE / 200)) && -8.988465674311577E305 >= Math.floor((-Double.MAX_VALUE / 200)));
assertEquals("floor(double)[4] ::", -3.595386269724631E305, StrictMath.floor((-Double.MAX_VALUE / 500)));
assertTrue("floor(double)[5] ::", -3.595386269724632E305 <= Math.floor((-Double.MAX_VALUE / 500)) && -3.59538626972463E305 >= Math.floor((-Double.MAX_VALUE / 500)));
assertEquals("floor(double)[6] ::", -1.0, StrictMath.floor((-Double.MIN_VALUE * 2000)));
assertTrue("floor(double)[7] ::", -1.0000000000000002 <= Math.floor((-Double.MIN_VALUE * 2000)) && -0.9999999999999998 >= Math.floor((-Double.MIN_VALUE * 2000)));
assertEquals("floor(double)[8] ::", -1.0, StrictMath.floor((-Double.MIN_VALUE * 1000)));
assertTrue("floor(double)[9] ::", -1.0000000000000002 <= Math.floor((-Double.MIN_VALUE * 1000)) && -0.9999999999999998 >= Math.floor((-Double.MIN_VALUE * 1000)));
assertEquals("floor(double)[10] ::", -2.929112213E9, StrictMath.floor(-2929112212.129231481346));
assertTrue("floor(double)[11] ::", -2.9291122130000005E9 <= Math.floor(-2929112212.129231481346) && -2.9291122129999995E9 >= Math.floor(-2929112212.129231481346));
assertEquals("floor(double)[12] ::", -2373.0, StrictMath.floor(-2372.228212D));
assertTrue("floor(double)[13] ::", -2373.0000000000005 <= Math.floor(-2372.228212D) && -2372.9999999999995 >= Math.floor(-2372.228212D));
assertEquals("floor(double)[14] ::", -2.0, StrictMath.floor(-1.2232D));
assertTrue("floor(double)[15] ::", -2.0000000000000004 <= Math.floor(-1.2232D) && -1.9999999999999996 >= Math.floor(-1.2232D));
assertEquals("floor(double)[16] ::", 0.0, StrictMath.floor(0D));
assertTrue("floor(double)[17] ::", -4.9E-324 <= Math.floor(0D) && 4.9E-324 >= Math.floor(0D));
assertEquals("floor(double)[18] ::", 2.0, StrictMath.floor(2.43223D));
assertTrue("floor(double)[19] ::", 1.9999999999999996 <= Math.floor(2.43223D) && 2.0000000000000004 >= Math.floor(2.43223D));
assertEquals("floor(double)[20] ::", 1.8232155E7, StrictMath.floor(18232155.3323566D));
assertTrue("floor(double)[21] ::", 1.8232154999999996E7 <= Math.floor(18232155.3323566D) && 1.8232155000000004E7 >= Math.floor(18232155.3323566D));
assertEquals("floor(double)[22] ::", 0.0, StrictMath.floor(Double.MIN_VALUE));
assertTrue("floor(double)[23] ::", -4.9E-324 <= Math.floor(Double.MIN_VALUE) && 4.9E-324 >= Math.floor(Double.MIN_VALUE));
assertEquals("floor(double)[24] ::", 0.0, StrictMath.floor((Double.MIN_VALUE * 200)));
assertTrue("floor(double)[25] ::", -4.9E-324 <= Math.floor((Double.MIN_VALUE * 200)) && 4.9E-324 >= Math.floor((Double.MIN_VALUE * 200)));
assertEquals("floor(double)[26] ::", 3.595386269724631E305, StrictMath.floor((Double.MAX_VALUE / 500)));
assertTrue("floor(double)[27] ::", 3.59538626972463E305 <= Math.floor((Double.MAX_VALUE / 500)) && 3.595386269724632E305 >= Math.floor((Double.MAX_VALUE / 500)));
assertEquals("floor(double)[28] ::", 8.988465674311578E305, StrictMath.floor((Double.MAX_VALUE / 200)));
assertTrue("floor(double)[29] ::", 8.988465674311577E305 <= Math.floor((Double.MAX_VALUE / 200)) && 8.98846567431158E305 >= Math.floor((Double.MAX_VALUE / 200)));
assertEquals("floor(double)[30] ::", 1.7976931348623157E308, StrictMath.floor(Double.MAX_VALUE));
assertTrue("floor(double)[31] ::", 1.7976931348623155E308 <= Math.floor(Double.MAX_VALUE) && Infinity >= Math.floor(Double.MAX_VALUE));
assertEquals("floor(double)[32] ::", 1.7976931348623157E308, StrictMath.floor(Double.MAX_VALUE + 1));
assertTrue("floor(double)[33] ::", 1.7976931348623155E308 <= Math.floor(Double.MAX_VALUE + 1) && Infinity >= Math.floor(Double.MAX_VALUE + 1));
}

public void testGetExponent_double()
{
assertEquals("getExponent(double)[0] ::", 1023, StrictMath.getExponent(-Double.MAX_VALUE));
assertEquals("getExponent(double)[1] ::", 1023, Math.getExponent(-Double.MAX_VALUE));
assertEquals("getExponent(double)[2] ::", 1016, StrictMath.getExponent((-Double.MAX_VALUE / 200)));
assertEquals("getExponent(double)[3] ::", 1016, Math.getExponent((-Double.MAX_VALUE / 200)));
assertEquals("getExponent(double)[4] ::", 1015, StrictMath.getExponent((-Double.MAX_VALUE / 500)));
assertEquals("getExponent(double)[5] ::", 1015, Math.getExponent((-Double.MAX_VALUE / 500)));
assertEquals("getExponent(double)[6] ::", -1023, StrictMath.getExponent((-Double.MIN_VALUE * 2000)));
assertEquals("getExponent(double)[7] ::", -1023, Math.getExponent((-Double.MIN_VALUE * 2000)));
assertEquals("getExponent(double)[8] ::", -1023, StrictMath.getExponent((-Double.MIN_VALUE * 1000)));
assertEquals("getExponent(double)[9] ::", -1023, Math.getExponent((-Double.MIN_VALUE * 1000)));
assertEquals("getExponent(double)[10] ::", 31, StrictMath.getExponent(-2929112212.129231481346));
assertEquals("getExponent(double)[11] ::", 31, Math.getExponent(-2929112212.129231481346));
assertEquals("getExponent(double)[12] ::", 11, StrictMath.getExponent(-2372.228212D));
assertEquals("getExponent(double)[13] ::", 11, Math.getExponent(-2372.228212D));
assertEquals("getExponent(double)[14] ::", 0, StrictMath.getExponent(-1.2232D));
assertEquals("getExponent(double)[15] ::", 0, Math.getExponent(-1.2232D));
assertEquals("getExponent(double)[16] ::", -1023, StrictMath.getExponent(0D));
assertEquals("getExponent(double)[17] ::", -1023, Math.getExponent(0D));
assertEquals("getExponent(double)[18] ::", 1, StrictMath.getExponent(2.43223D));
assertEquals("getExponent(double)[19] ::", 1, Math.getExponent(2.43223D));
assertEquals("getExponent(double)[20] ::", 24, StrictMath.getExponent(18232155.3323566D));
assertEquals("getExponent(double)[21] ::", 24, Math.getExponent(18232155.3323566D));
assertEquals("getExponent(double)[22] ::", -1023, StrictMath.getExponent(Double.MIN_VALUE));
assertEquals("getExponent(double)[23] ::", -1023, Math.getExponent(Double.MIN_VALUE));
assertEquals("getExponent(double)[24] ::", -1023, StrictMath.getExponent((Double.MIN_VALUE * 200)));
assertEquals("getExponent(double)[25] ::", -1023, Math.getExponent((Double.MIN_VALUE * 200)));
assertEquals("getExponent(double)[26] ::", 1015, StrictMath.getExponent((Double.MAX_VALUE / 500)));
assertEquals("getExponent(double)[27] ::", 1015, Math.getExponent((Double.MAX_VALUE / 500)));
assertEquals("getExponent(double)[28] ::", 1016, StrictMath.getExponent((Double.MAX_VALUE / 200)));
assertEquals("getExponent(double)[29] ::", 1016, Math.getExponent((Double.MAX_VALUE / 200)));
assertEquals("getExponent(double)[30] ::", 1023, StrictMath.getExponent(Double.MAX_VALUE));
assertEquals("getExponent(double)[31] ::", 1023, Math.getExponent(Double.MAX_VALUE));
assertEquals("getExponent(double)[32] ::", 1023, StrictMath.getExponent(Double.MAX_VALUE + 1));
assertEquals("getExponent(double)[33] ::", 1023, Math.getExponent(Double.MAX_VALUE + 1));
}

public void testGetExponent_float()
{
assertEquals("getExponent(float)[0] ::", 127, StrictMath.getExponent(-Float.MAX_VALUE));
assertEquals("getExponent(float)[1] ::", 127, Math.getExponent(-Float.MAX_VALUE));
assertEquals("getExponent(float)[2] ::", 120, StrictMath.getExponent((-Float.MAX_VALUE / 200)));
assertEquals("getExponent(float)[3] ::", 120, Math.getExponent((-Float.MAX_VALUE / 200)));
assertEquals("getExponent(float)[4] ::", 119, StrictMath.getExponent((-Float.MAX_VALUE / 500)));
assertEquals("getExponent(float)[5] ::", 119, Math.getExponent((-Float.MAX_VALUE / 500)));
assertEquals("getExponent(float)[6] ::", -127, StrictMath.getExponent((-Float.MIN_VALUE * 2000)));
assertEquals("getExponent(float)[7] ::", -127, Math.getExponent((-Float.MIN_VALUE * 2000)));
assertEquals("getExponent(float)[8] ::", -127, StrictMath.getExponent((-Float.MIN_VALUE * 1000)));
assertEquals("getExponent(float)[9] ::", -127, Math.getExponent((-Float.MIN_VALUE * 1000)));
assertEquals("getExponent(float)[10] ::", 24, StrictMath.getExponent(-32948748.958324F));
assertEquals("getExponent(float)[11] ::", 24, Math.getExponent(-32948748.958324F));
assertEquals("getExponent(float)[12] ::", -27, StrictMath.getExponent(-0.000000009F));
assertEquals("getExponent(float)[13] ::", -27, Math.getExponent(-0.000000009F));
assertEquals("getExponent(float)[14] ::", -23, StrictMath.getExponent(-0.0000002F));
assertEquals("getExponent(float)[15] ::", -23, Math.getExponent(-0.0000002F));
assertEquals("getExponent(float)[16] ::", -127, StrictMath.getExponent(0F));
assertEquals("getExponent(float)[17] ::", -127, Math.getExponent(0F));
assertEquals("getExponent(float)[18] ::", -2, StrictMath.getExponent(0.456232334F));
assertEquals("getExponent(float)[19] ::", -2, Math.getExponent(0.456232334F));
assertEquals("getExponent(float)[20] ::", 20, StrictMath.getExponent(1224257.312321263F));
assertEquals("getExponent(float)[21] ::", 20, Math.getExponent(1224257.312321263F));
assertEquals("getExponent(float)[22] ::", 33, StrictMath.getExponent(9999832342.12365F));
assertEquals("getExponent(float)[23] ::", 33, Math.getExponent(9999832342.12365F));
assertEquals("getExponent(float)[24] ::", -127, StrictMath.getExponent(Float.MIN_VALUE));
assertEquals("getExponent(float)[25] ::", -127, Math.getExponent(Float.MIN_VALUE));
assertEquals("getExponent(float)[26] ::", -127, StrictMath.getExponent((Float.MIN_VALUE * 200)));
assertEquals("getExponent(float)[27] ::", -127, Math.getExponent((Float.MIN_VALUE * 200)));
assertEquals("getExponent(float)[28] ::", 119, StrictMath.getExponent((Float.MAX_VALUE / 500)));
assertEquals("getExponent(float)[29] ::", 119, Math.getExponent((Float.MAX_VALUE / 500)));
assertEquals("getExponent(float)[30] ::", 120, StrictMath.getExponent((Float.MAX_VALUE / 200)));
assertEquals("getExponent(float)[31] ::", 120, Math.getExponent((Float.MAX_VALUE / 200)));
assertEquals("getExponent(float)[32] ::", 127, StrictMath.getExponent(Float.MAX_VALUE));
assertEquals("getExponent(float)[33] ::", 127, Math.getExponent(Float.MAX_VALUE));
assertEquals("getExponent(float)[34] ::", 127, StrictMath.getExponent((Float.MAX_VALUE + 1)));
assertEquals("getExponent(float)[35] ::", 127, Math.getExponent((Float.MAX_VALUE + 1)));
}

public void testHypot()
{
assertEquals("hypot(double,double)[0] ::", Infinity, StrictMath.hypot(-Double.MAX_VALUE,(-Double.MAX_VALUE / 200)));
assertEquals("hypot(double,double)[1] ::", Infinity, Math.hypot(-Double.MAX_VALUE,(-Double.MAX_VALUE / 200)));
assertEquals("hypot(double,double)[2] ::", 9.680873803887843E305, StrictMath.hypot((-Double.MAX_VALUE / 200),(-Double.MAX_VALUE / 500)));
assertTrue("hypot(double,double)[3] ::", 9.680873803887842E305 <= Math.hypot((-Double.MAX_VALUE / 200),(-Double.MAX_VALUE / 500)) && 9.680873803887845E305 >= Math.hypot((-Double.MAX_VALUE / 200),(-Double.MAX_VALUE / 500)));
assertEquals("hypot(double,double)[4] ::", 3.595386269724631E305, StrictMath.hypot((-Double.MAX_VALUE / 500),(-Double.MIN_VALUE * 2000)));
assertTrue("hypot(double,double)[5] ::", 3.59538626972463E305 <= Math.hypot((-Double.MAX_VALUE / 500),(-Double.MIN_VALUE * 2000)) && 3.595386269724632E305 >= Math.hypot((-Double.MAX_VALUE / 500),(-Double.MIN_VALUE * 2000)));
assertEquals("hypot(double,double)[6] ::", 1.1047E-320, StrictMath.hypot((-Double.MIN_VALUE * 2000),(-Double.MIN_VALUE * 1000)));
assertTrue("hypot(double,double)[7] ::", 1.104E-320 <= Math.hypot((-Double.MIN_VALUE * 2000),(-Double.MIN_VALUE * 1000)) && 1.105E-320 >= Math.hypot((-Double.MIN_VALUE * 2000),(-Double.MIN_VALUE * 1000)));
assertEquals("hypot(double,double)[8] ::", 2.9291122121292315E9, StrictMath.hypot((-Double.MIN_VALUE * 1000),-2929112212.129231481346));
assertTrue("hypot(double,double)[9] ::", 2.929112212129231E9 <= Math.hypot((-Double.MIN_VALUE * 1000),-2929112212.129231481346) && 2.929112212129232E9 >= Math.hypot((-Double.MIN_VALUE * 1000),-2929112212.129231481346));
assertEquals("hypot(double,double)[10] ::", 2.9291122121301923E9, StrictMath.hypot(-2929112212.129231481346,-2372.228212D));
assertTrue("hypot(double,double)[11] ::", 2.929112212130192E9 <= Math.hypot(-2929112212.129231481346,-2372.228212D) && 2.9291122121301928E9 >= Math.hypot(-2929112212.129231481346,-2372.228212D));
assertEquals("hypot(double,double)[12] ::", 2372.228527361341, StrictMath.hypot(-2372.228212D,-1.2232D));
assertTrue("hypot(double,double)[13] ::", 2372.2285273613406 <= Math.hypot(-2372.228212D,-1.2232D) && 2372.2285273613415 >= Math.hypot(-2372.228212D,-1.2232D));
assertEquals("hypot(double,double)[14] ::", 1.2232, StrictMath.hypot(-1.2232D,0D));
assertTrue("hypot(double,double)[15] ::", 1.2231999999999998 <= Math.hypot(-1.2232D,0D) && 1.2232000000000003 >= Math.hypot(-1.2232D,0D));
assertEquals("hypot(double,double)[16] ::", 2.43223, StrictMath.hypot(0D,2.43223D));
assertTrue("hypot(double,double)[17] ::", 2.4322299999999997 <= Math.hypot(0D,2.43223D) && 2.4322300000000006 >= Math.hypot(0D,2.43223D));
assertEquals("hypot(double,double)[18] ::", 1.8232155332356762E7, StrictMath.hypot(2.43223D,18232155.3323566D));
assertTrue("hypot(double,double)[19] ::", 1.823215533235676E7 <= Math.hypot(2.43223D,18232155.3323566D) && 1.8232155332356766E7 >= Math.hypot(2.43223D,18232155.3323566D));
assertEquals("hypot(double,double)[20] ::", 1.82321553323566E7, StrictMath.hypot(18232155.3323566D,Double.MIN_VALUE));
assertTrue("hypot(double,double)[21] ::", 1.8232155332356595E7 <= Math.hypot(18232155.3323566D,Double.MIN_VALUE) && 1.8232155332356602E7 >= Math.hypot(18232155.3323566D,Double.MIN_VALUE));
assertEquals("hypot(double,double)[22] ::", 9.9E-322, StrictMath.hypot(Double.MIN_VALUE,(Double.MIN_VALUE * 200)));
assertTrue("hypot(double,double)[23] ::", 9.83E-322 <= Math.hypot(Double.MIN_VALUE,(Double.MIN_VALUE * 200)) && 9.93E-322 >= Math.hypot(Double.MIN_VALUE,(Double.MIN_VALUE * 200)));
assertEquals("hypot(double,double)[24] ::", 3.595386269724631E305, StrictMath.hypot((Double.MIN_VALUE * 200),(Double.MAX_VALUE / 500)));
assertTrue("hypot(double,double)[25] ::", 3.59538626972463E305 <= Math.hypot((Double.MIN_VALUE * 200),(Double.MAX_VALUE / 500)) && 3.595386269724632E305 >= Math.hypot((Double.MIN_VALUE * 200),(Double.MAX_VALUE / 500)));
assertEquals("hypot(double,double)[26] ::", 9.680873803887843E305, StrictMath.hypot((Double.MAX_VALUE / 500),(Double.MAX_VALUE / 200)));
assertTrue("hypot(double,double)[27] ::", 9.680873803887842E305 <= Math.hypot((Double.MAX_VALUE / 500),(Double.MAX_VALUE / 200)) && 9.680873803887845E305 >= Math.hypot((Double.MAX_VALUE / 500),(Double.MAX_VALUE / 200)));
assertEquals("hypot(double,double)[28] ::", Infinity, StrictMath.hypot((Double.MAX_VALUE / 200),Double.MAX_VALUE));
assertEquals("hypot(double,double)[29] ::", Infinity, Math.hypot((Double.MAX_VALUE / 200),Double.MAX_VALUE));
assertEquals("hypot(double,double)[30] ::", Infinity, StrictMath.hypot(Double.MAX_VALUE,Double.MAX_VALUE + 1));
assertEquals("hypot(double,double)[31] ::", Infinity, Math.hypot(Double.MAX_VALUE,Double.MAX_VALUE + 1));
}

public void testIEEEremainder()
{
assertEquals("IEEEremainder(double,double)[0] ::", -7.484401160755199E291, StrictMath.IEEEremainder(-Double.MAX_VALUE,(-Double.MAX_VALUE / 200)));
assertTrue("IEEEremainder(double,double)[1] ::", -7.4844011607552E291 <= Math.IEEEremainder(-Double.MAX_VALUE,(-Double.MAX_VALUE / 200)) && -7.484401160755198E291 >= Math.IEEEremainder(-Double.MAX_VALUE,(-Double.MAX_VALUE / 200)));
assertEquals("IEEEremainder(double,double)[2] ::", 1.797693134862315E305, StrictMath.IEEEremainder((-Double.MAX_VALUE / 200),(-Double.MAX_VALUE / 500)));
assertTrue("IEEEremainder(double,double)[3] ::", 1.7976931348623148E305 <= Math.IEEEremainder((-Double.MAX_VALUE / 200),(-Double.MAX_VALUE / 500)) && 1.7976931348623156E305 >= Math.IEEEremainder((-Double.MAX_VALUE / 200),(-Double.MAX_VALUE / 500)));
assertEquals("IEEEremainder(double,double)[4] ::", 1.66E-321, StrictMath.IEEEremainder((-Double.MAX_VALUE / 500),(-Double.MIN_VALUE * 2000)));
assertTrue("IEEEremainder(double,double)[5] ::", 1.655E-321 <= Math.IEEEremainder((-Double.MAX_VALUE / 500),(-Double.MIN_VALUE * 2000)) && 1.665E-321 >= Math.IEEEremainder((-Double.MAX_VALUE / 500),(-Double.MIN_VALUE * 2000)));
assertEquals("IEEEremainder(double,double)[6] ::", -0.0, StrictMath.IEEEremainder((-Double.MIN_VALUE * 2000),(-Double.MIN_VALUE * 1000)));
assertTrue("IEEEremainder(double,double)[7] ::", -4.9E-324 <= Math.IEEEremainder((-Double.MIN_VALUE * 2000),(-Double.MIN_VALUE * 1000)) && 4.9E-324 >= Math.IEEEremainder((-Double.MIN_VALUE * 2000),(-Double.MIN_VALUE * 1000)));
assertEquals("IEEEremainder(double,double)[8] ::", -4.94E-321, StrictMath.IEEEremainder((-Double.MIN_VALUE * 1000),-2929112212.129231481346));
assertTrue("IEEEremainder(double,double)[9] ::", -4.946E-321 <= Math.IEEEremainder((-Double.MIN_VALUE * 1000),-2929112212.129231481346) && -4.936E-321 >= Math.IEEEremainder((-Double.MIN_VALUE * 1000),-2929112212.129231481346));
assertEquals("IEEEremainder(double,double)[10] ::", -1055.1340194714849, StrictMath.IEEEremainder(-2929112212.129231481346,-2372.228212D));
assertTrue("IEEEremainder(double,double)[11] ::", -1055.134019471485 <= Math.IEEEremainder(-2929112212.129231481346,-2372.228212D) && -1055.1340194714846 >= Math.IEEEremainder(-2929112212.129231481346,-2372.228212D));
assertEquals("IEEEremainder(double,double)[12] ::", -0.4434119999998589, StrictMath.IEEEremainder(-2372.228212D,-1.2232D));
assertTrue("IEEEremainder(double,double)[13] ::", -0.443411999999859 <= Math.IEEEremainder(-2372.228212D,-1.2232D) && -0.44341199999985886 >= Math.IEEEremainder(-2372.228212D,-1.2232D));
assertEquals("IEEEremainder(double,double)[14] ::", 0.0, StrictMath.IEEEremainder(0D,2.43223D));
assertTrue("IEEEremainder(double,double)[15] ::", -4.9E-324 <= Math.IEEEremainder(0D,2.43223D) && 4.9E-324 >= Math.IEEEremainder(0D,2.43223D));
assertEquals("IEEEremainder(double,double)[16] ::", 2.43223, StrictMath.IEEEremainder(2.43223D,18232155.3323566D));
assertTrue("IEEEremainder(double,double)[17] ::", 2.4322299999999997 <= Math.IEEEremainder(2.43223D,18232155.3323566D) && 2.4322300000000006 >= Math.IEEEremainder(2.43223D,18232155.3323566D));
assertEquals("IEEEremainder(double,double)[18] ::", 0.0, StrictMath.IEEEremainder(18232155.3323566D,Double.MIN_VALUE));
assertTrue("IEEEremainder(double,double)[19] ::", -4.9E-324 <= Math.IEEEremainder(18232155.3323566D,Double.MIN_VALUE) && 4.9E-324 >= Math.IEEEremainder(18232155.3323566D,Double.MIN_VALUE));
assertEquals("IEEEremainder(double,double)[20] ::", 4.9E-324, StrictMath.IEEEremainder(Double.MIN_VALUE,(Double.MIN_VALUE * 200)));
assertTrue("IEEEremainder(double,double)[21] ::", 0.0 <= Math.IEEEremainder(Double.MIN_VALUE,(Double.MIN_VALUE * 200)) && 1.0E-323 >= Math.IEEEremainder(Double.MIN_VALUE,(Double.MIN_VALUE * 200)));
assertEquals("IEEEremainder(double,double)[22] ::", 9.9E-322, StrictMath.IEEEremainder((Double.MIN_VALUE * 200),(Double.MAX_VALUE / 500)));
assertTrue("IEEEremainder(double,double)[23] ::", 9.83E-322 <= Math.IEEEremainder((Double.MIN_VALUE * 200),(Double.MAX_VALUE / 500)) && 9.93E-322 >= Math.IEEEremainder((Double.MIN_VALUE * 200),(Double.MAX_VALUE / 500)));
assertEquals("IEEEremainder(double,double)[24] ::", 3.595386269724631E305, StrictMath.IEEEremainder((Double.MAX_VALUE / 500),(Double.MAX_VALUE / 200)));
assertTrue("IEEEremainder(double,double)[25] ::", 3.59538626972463E305 <= Math.IEEEremainder((Double.MAX_VALUE / 500),(Double.MAX_VALUE / 200)) && 3.595386269724632E305 >= Math.IEEEremainder((Double.MAX_VALUE / 500),(Double.MAX_VALUE / 200)));
assertEquals("IEEEremainder(double,double)[26] ::", 8.988465674311578E305, StrictMath.IEEEremainder((Double.MAX_VALUE / 200),Double.MAX_VALUE));
assertTrue("IEEEremainder(double,double)[27] ::", 8.988465674311577E305 <= Math.IEEEremainder((Double.MAX_VALUE / 200),Double.MAX_VALUE) && 8.98846567431158E305 >= Math.IEEEremainder((Double.MAX_VALUE / 200),Double.MAX_VALUE));
assertEquals("IEEEremainder(double,double)[28] ::", 0.0, StrictMath.IEEEremainder(Double.MAX_VALUE,Double.MAX_VALUE + 1));
assertTrue("IEEEremainder(double,double)[29] ::", -4.9E-324 <= Math.IEEEremainder(Double.MAX_VALUE,Double.MAX_VALUE + 1) && 4.9E-324 >= Math.IEEEremainder(Double.MAX_VALUE,Double.MAX_VALUE + 1));
}

public void testLog()
{
assertEquals("log(double)[0] ::", 0.8888085320006571, StrictMath.log(2.43223D));
assertTrue("log(double)[1] ::", 0.888808532000657 <= Math.log(2.43223D) && 0.8888085320006572 >= Math.log(2.43223D));
assertEquals("log(double)[2] ::", 16.718697369636427, StrictMath.log(18232155.3323566D));
assertTrue("log(double)[3] ::", 16.718697369636423 <= Math.log(18232155.3323566D) && 16.71869736963643 >= Math.log(18232155.3323566D));
assertEquals("log(double)[4] ::", -744.4400719213812, StrictMath.log(Double.MIN_VALUE));
assertTrue("log(double)[5] ::", -744.4400719213813 <= Math.log(Double.MIN_VALUE) && -744.4400719213811 >= Math.log(Double.MIN_VALUE));
assertEquals("log(double)[6] ::", -739.1417545548333, StrictMath.log((Double.MIN_VALUE * 200)));
assertTrue("log(double)[7] ::", -739.1417545548334 <= Math.log((Double.MIN_VALUE * 200)) && -739.1417545548331 >= Math.log((Double.MIN_VALUE * 200)));
assertEquals("log(double)[8] ::", 703.5681047949618, StrictMath.log((Double.MAX_VALUE / 500)));
assertTrue("log(double)[9] ::", 703.5681047949616 <= Math.log((Double.MAX_VALUE / 500)) && 703.5681047949619 >= Math.log((Double.MAX_VALUE / 500)));
assertEquals("log(double)[10] ::", 704.484395526836, StrictMath.log((Double.MAX_VALUE / 200)));
assertTrue("log(double)[11] ::", 704.4843955268359 <= Math.log((Double.MAX_VALUE / 200)) && 704.4843955268361 >= Math.log((Double.MAX_VALUE / 200)));
assertEquals("log(double)[12] ::", 709.782712893384, StrictMath.log(Double.MAX_VALUE));
assertTrue("log(double)[13] ::", 709.7827128933839 <= Math.log(Double.MAX_VALUE) && 709.7827128933841 >= Math.log(Double.MAX_VALUE));
assertEquals("log(double)[14] ::", 709.782712893384, StrictMath.log(Double.MAX_VALUE + 1));
assertTrue("log(double)[15] ::", 709.7827128933839 <= Math.log(Double.MAX_VALUE + 1) && 709.7827128933841 >= Math.log(Double.MAX_VALUE + 1));
}

public void testLog10()
{
assertEquals("log10(double)[0] ::", 0.38600464091641523, StrictMath.log10(2.43223D));
assertTrue("log10(double)[1] ::", 0.3860046409164152 <= Math.log10(2.43223D) && 0.3860046409164153 >= Math.log10(2.43223D));
assertEquals("log10(double)[2] ::", 7.260838012243511, StrictMath.log10(18232155.3323566D));
assertTrue("log10(double)[3] ::", 7.26083801224351 <= Math.log10(18232155.3323566D) && 7.260838012243512 >= Math.log10(18232155.3323566D));
assertEquals("log10(double)[4] ::", -323.3062153431158, StrictMath.log10(Double.MIN_VALUE));
assertTrue("log10(double)[5] ::", -323.30621534311587 <= Math.log10(Double.MIN_VALUE) && -323.30621534311575 >= Math.log10(Double.MIN_VALUE));
assertEquals("log10(double)[6] ::", -321.0051853474518, StrictMath.log10((Double.MIN_VALUE * 200)));
assertTrue("log10(double)[7] ::", -321.00518534745186 <= Math.log10((Double.MIN_VALUE * 200)) && -321.00518534745174 >= Math.log10((Double.MIN_VALUE * 200)));
assertEquals("log10(double)[8] ::", 305.5557455555807, StrictMath.log10((Double.MAX_VALUE / 500)));
assertTrue("log10(double)[9] ::", 305.55574555558064 <= Math.log10((Double.MAX_VALUE / 500)) && 305.55574555558076 >= Math.log10((Double.MAX_VALUE / 500)));
assertEquals("log10(double)[10] ::", 305.95368556425274, StrictMath.log10((Double.MAX_VALUE / 200)));
assertTrue("log10(double)[11] ::", 305.9536855642527 <= Math.log10((Double.MAX_VALUE / 200)) && 305.9536855642528 >= Math.log10((Double.MAX_VALUE / 200)));
assertEquals("log10(double)[12] ::", 308.25471555991675, StrictMath.log10(Double.MAX_VALUE));
assertTrue("log10(double)[13] ::", 308.2547155599167 <= Math.log10(Double.MAX_VALUE) && 308.2547155599168 >= Math.log10(Double.MAX_VALUE));
assertEquals("log10(double)[14] ::", 308.25471555991675, StrictMath.log10(Double.MAX_VALUE + 1));
assertTrue("log10(double)[15] ::", 308.2547155599167 <= Math.log10(Double.MAX_VALUE + 1) && 308.2547155599168 >= Math.log10(Double.MAX_VALUE + 1));
}

public void testLog1p()
{
assertEquals("log1p(double)[0] ::", -9.88E-321, StrictMath.log1p((-Double.MIN_VALUE * 2000)));
assertTrue("log1p(double)[1] ::", -9.886E-321 <= Math.log1p((-Double.MIN_VALUE * 2000)) && -9.876E-321 >= Math.log1p((-Double.MIN_VALUE * 2000)));
assertEquals("log1p(double)[2] ::", -4.94E-321, StrictMath.log1p((-Double.MIN_VALUE * 1000)));
assertTrue("log1p(double)[3] ::", -4.946E-321 <= Math.log1p((-Double.MIN_VALUE * 1000)) && -4.936E-321 >= Math.log1p((-Double.MIN_VALUE * 1000)));
assertEquals("log1p(double)[4] ::", 0.0, StrictMath.log1p(0D));
assertTrue("log1p(double)[5] ::", -4.9E-324 <= Math.log1p(0D) && 4.9E-324 >= Math.log1p(0D));
assertEquals("log1p(double)[6] ::", 1.2332101956972392, StrictMath.log1p(2.43223D));
assertTrue("log1p(double)[7] ::", 1.233210195697239 <= Math.log1p(2.43223D) && 1.2332101956972394 >= Math.log1p(2.43223D));
assertEquals("log1p(double)[8] ::", 16.718697424484574, StrictMath.log1p(18232155.3323566D));
assertTrue("log1p(double)[9] ::", 16.71869742448457 <= Math.log1p(18232155.3323566D) && 16.718697424484578 >= Math.log1p(18232155.3323566D));
assertEquals("log1p(double)[10] ::", 4.9E-324, StrictMath.log1p(Double.MIN_VALUE));
assertTrue("log1p(double)[11] ::", 0.0 <= Math.log1p(Double.MIN_VALUE) && 1.0E-323 >= Math.log1p(Double.MIN_VALUE));
assertEquals("log1p(double)[12] ::", 9.9E-322, StrictMath.log1p((Double.MIN_VALUE * 200)));
assertTrue("log1p(double)[13] ::", 9.83E-322 <= Math.log1p((Double.MIN_VALUE * 200)) && 9.93E-322 >= Math.log1p((Double.MIN_VALUE * 200)));
assertEquals("log1p(double)[14] ::", 703.5681047949618, StrictMath.log1p((Double.MAX_VALUE / 500)));
assertTrue("log1p(double)[15] ::", 703.5681047949616 <= Math.log1p((Double.MAX_VALUE / 500)) && 703.5681047949619 >= Math.log1p((Double.MAX_VALUE / 500)));
assertEquals("log1p(double)[16] ::", 704.484395526836, StrictMath.log1p((Double.MAX_VALUE / 200)));
assertTrue("log1p(double)[17] ::", 704.4843955268359 <= Math.log1p((Double.MAX_VALUE / 200)) && 704.4843955268361 >= Math.log1p((Double.MAX_VALUE / 200)));
assertEquals("log1p(double)[18] ::", 709.782712893384, StrictMath.log1p(Double.MAX_VALUE));
assertTrue("log1p(double)[19] ::", 709.7827128933839 <= Math.log1p(Double.MAX_VALUE) && 709.7827128933841 >= Math.log1p(Double.MAX_VALUE));
assertEquals("log1p(double)[20] ::", 709.782712893384, StrictMath.log1p(Double.MAX_VALUE + 1));
assertTrue("log1p(double)[21] ::", 709.7827128933839 <= Math.log1p(Double.MAX_VALUE + 1) && 709.7827128933841 >= Math.log1p(Double.MAX_VALUE + 1));
}

public void testMax_double()
{
assertEquals("max(double)[0] ::", -8.988465674311578E305d, StrictMath.max(-1.7976931348623157E308d,-8.988465674311578E305d));
assertEquals("max(double)[1] ::", -8.988465674311578E305d, Math.max(-1.7976931348623157E308d,-8.988465674311578E305d));
assertEquals("max(double)[2] ::", -8.988465674311578E305d, StrictMath.max(-8.988465674311578E305d,-1.7976931348623157E308d));
assertEquals("max(double)[3] ::", -8.988465674311578E305d, Math.max(-8.988465674311578E305d,-1.7976931348623157E308d));
assertEquals("max(double)[4] ::", -8.988465674311578E305d, StrictMath.max(-1.7976931348623157E308d,-8.988465674311578E305d));
assertEquals("max(double)[5] ::", -8.988465674311578E305d, Math.max(-1.7976931348623157E308d,-8.988465674311578E305d));
assertEquals("max(double)[6] ::", -8.988465674311578E305d, StrictMath.max(-8.988465674311578E305d,-8.988465674311578E305d));
assertEquals("max(double)[7] ::", -8.988465674311578E305d, Math.max(-8.988465674311578E305d,-8.988465674311578E305d));
assertEquals("max(double)[8] ::", -3.595386269724631E305d, StrictMath.max(-8.988465674311578E305d,-3.595386269724631E305d));
assertEquals("max(double)[9] ::", -3.595386269724631E305d, Math.max(-8.988465674311578E305d,-3.595386269724631E305d));
assertEquals("max(double)[10] ::", -3.595386269724631E305d, StrictMath.max(-3.595386269724631E305d,-8.988465674311578E305d));
assertEquals("max(double)[11] ::", -3.595386269724631E305d, Math.max(-3.595386269724631E305d,-8.988465674311578E305d));
assertEquals("max(double)[12] ::", -3.595386269724631E305d, StrictMath.max(-8.988465674311578E305d,-3.595386269724631E305d));
assertEquals("max(double)[13] ::", -3.595386269724631E305d, Math.max(-8.988465674311578E305d,-3.595386269724631E305d));
assertEquals("max(double)[14] ::", -3.595386269724631E305d, StrictMath.max(-3.595386269724631E305d,-3.595386269724631E305d));
assertEquals("max(double)[15] ::", -3.595386269724631E305d, Math.max(-3.595386269724631E305d,-3.595386269724631E305d));
assertEquals("max(double)[16] ::", -9.88E-321d, StrictMath.max(-3.595386269724631E305d,-9.88E-321d));
assertEquals("max(double)[17] ::", -9.88E-321d, Math.max(-3.595386269724631E305d,-9.88E-321d));
assertEquals("max(double)[18] ::", -9.88E-321d, StrictMath.max(-9.88E-321d,-3.595386269724631E305d));
assertEquals("max(double)[19] ::", -9.88E-321d, Math.max(-9.88E-321d,-3.595386269724631E305d));
assertEquals("max(double)[20] ::", -9.88E-321d, StrictMath.max(-3.595386269724631E305d,-9.88E-321d));
assertEquals("max(double)[21] ::", -9.88E-321d, Math.max(-3.595386269724631E305d,-9.88E-321d));
assertEquals("max(double)[22] ::", -9.88E-321d, StrictMath.max(-9.88E-321d,-9.88E-321d));
assertEquals("max(double)[23] ::", -9.88E-321d, Math.max(-9.88E-321d,-9.88E-321d));
assertEquals("max(double)[24] ::", -4.94E-321d, StrictMath.max(-9.88E-321d,-4.94E-321d));
assertEquals("max(double)[25] ::", -4.94E-321d, Math.max(-9.88E-321d,-4.94E-321d));
assertEquals("max(double)[26] ::", -4.94E-321d, StrictMath.max(-4.94E-321d,-9.88E-321d));
assertEquals("max(double)[27] ::", -4.94E-321d, Math.max(-4.94E-321d,-9.88E-321d));
assertEquals("max(double)[28] ::", -4.94E-321d, StrictMath.max(-9.88E-321d,-4.94E-321d));
assertEquals("max(double)[29] ::", -4.94E-321d, Math.max(-9.88E-321d,-4.94E-321d));
assertEquals("max(double)[30] ::", -4.94E-321d, StrictMath.max(-4.94E-321d,-4.94E-321d));
assertEquals("max(double)[31] ::", -4.94E-321d, Math.max(-4.94E-321d,-4.94E-321d));
assertEquals("max(double)[32] ::", -4.94E-321d, StrictMath.max(-4.94E-321d,-2.9291122121292315E9d));
assertEquals("max(double)[33] ::", -4.94E-321d, Math.max(-4.94E-321d,-2.9291122121292315E9d));
assertEquals("max(double)[34] ::", -4.94E-321d, StrictMath.max(-2.9291122121292315E9d,-4.94E-321d));
assertEquals("max(double)[35] ::", -4.94E-321d, Math.max(-2.9291122121292315E9d,-4.94E-321d));
assertEquals("max(double)[36] ::", -4.94E-321d, StrictMath.max(-4.94E-321d,-4.94E-321d));
assertEquals("max(double)[37] ::", -4.94E-321d, Math.max(-4.94E-321d,-4.94E-321d));
assertEquals("max(double)[38] ::", -4.94E-321d, StrictMath.max(-2.9291122121292315E9d,-4.94E-321d));
assertEquals("max(double)[39] ::", -4.94E-321d, Math.max(-2.9291122121292315E9d,-4.94E-321d));
assertEquals("max(double)[40] ::", -2372.228212d, StrictMath.max(-2.9291122121292315E9d,-2372.228212d));
assertEquals("max(double)[41] ::", -2372.228212d, Math.max(-2.9291122121292315E9d,-2372.228212d));
assertEquals("max(double)[42] ::", -2372.228212d, StrictMath.max(-2372.228212d,-2.9291122121292315E9d));
assertEquals("max(double)[43] ::", -2372.228212d, Math.max(-2372.228212d,-2.9291122121292315E9d));
assertEquals("max(double)[44] ::", -2372.228212d, StrictMath.max(-2.9291122121292315E9d,-2372.228212d));
assertEquals("max(double)[45] ::", -2372.228212d, Math.max(-2.9291122121292315E9d,-2372.228212d));
assertEquals("max(double)[46] ::", -2372.228212d, StrictMath.max(-2372.228212d,-2372.228212d));
assertEquals("max(double)[47] ::", -2372.228212d, Math.max(-2372.228212d,-2372.228212d));
assertEquals("max(double)[48] ::", -1.2232d, StrictMath.max(-2372.228212d,-1.2232d));
assertEquals("max(double)[49] ::", -1.2232d, Math.max(-2372.228212d,-1.2232d));
assertEquals("max(double)[50] ::", -1.2232d, StrictMath.max(-1.2232d,-2372.228212d));
assertEquals("max(double)[51] ::", -1.2232d, Math.max(-1.2232d,-2372.228212d));
assertEquals("max(double)[52] ::", -1.2232d, StrictMath.max(-2372.228212d,-1.2232d));
assertEquals("max(double)[53] ::", -1.2232d, Math.max(-2372.228212d,-1.2232d));
assertEquals("max(double)[54] ::", -1.2232d, StrictMath.max(-1.2232d,-1.2232d));
assertEquals("max(double)[55] ::", -1.2232d, Math.max(-1.2232d,-1.2232d));
assertEquals("max(double)[56] ::", 0.0d, StrictMath.max(-1.2232d,0.0d));
assertEquals("max(double)[57] ::", 0.0d, Math.max(-1.2232d,0.0d));
assertEquals("max(double)[58] ::", 0.0d, StrictMath.max(0.0d,-1.2232d));
assertEquals("max(double)[59] ::", 0.0d, Math.max(0.0d,-1.2232d));
assertEquals("max(double)[60] ::", 0.0d, StrictMath.max(-1.2232d,0.0d));
assertEquals("max(double)[61] ::", 0.0d, Math.max(-1.2232d,0.0d));
assertEquals("max(double)[62] ::", 0.0d, StrictMath.max(0.0d,0.0d));
assertEquals("max(double)[63] ::", 0.0d, Math.max(0.0d,0.0d));
assertEquals("max(double)[64] ::", 2.43223d, StrictMath.max(0.0d,2.43223d));
assertEquals("max(double)[65] ::", 2.43223d, Math.max(0.0d,2.43223d));
assertEquals("max(double)[66] ::", 2.43223d, StrictMath.max(2.43223d,0.0d));
assertEquals("max(double)[67] ::", 2.43223d, Math.max(2.43223d,0.0d));
assertEquals("max(double)[68] ::", 2.43223d, StrictMath.max(0.0d,2.43223d));
assertEquals("max(double)[69] ::", 2.43223d, Math.max(0.0d,2.43223d));
assertEquals("max(double)[70] ::", 2.43223d, StrictMath.max(2.43223d,2.43223d));
assertEquals("max(double)[71] ::", 2.43223d, Math.max(2.43223d,2.43223d));
assertEquals("max(double)[72] ::", 1.82321553323566E7d, StrictMath.max(2.43223d,1.82321553323566E7d));
assertEquals("max(double)[73] ::", 1.82321553323566E7d, Math.max(2.43223d,1.82321553323566E7d));
assertEquals("max(double)[74] ::", 1.82321553323566E7d, StrictMath.max(1.82321553323566E7d,2.43223d));
assertEquals("max(double)[75] ::", 1.82321553323566E7d, Math.max(1.82321553323566E7d,2.43223d));
assertEquals("max(double)[76] ::", 1.82321553323566E7d, StrictMath.max(2.43223d,1.82321553323566E7d));
assertEquals("max(double)[77] ::", 1.82321553323566E7d, Math.max(2.43223d,1.82321553323566E7d));
assertEquals("max(double)[78] ::", 1.82321553323566E7d, StrictMath.max(1.82321553323566E7d,1.82321553323566E7d));
assertEquals("max(double)[79] ::", 1.82321553323566E7d, Math.max(1.82321553323566E7d,1.82321553323566E7d));
assertEquals("max(double)[80] ::", 1.82321553323566E7d, StrictMath.max(1.82321553323566E7d,4.9E-324d));
assertEquals("max(double)[81] ::", 1.82321553323566E7d, Math.max(1.82321553323566E7d,4.9E-324d));
assertEquals("max(double)[82] ::", 1.82321553323566E7d, StrictMath.max(4.9E-324d,1.82321553323566E7d));
assertEquals("max(double)[83] ::", 1.82321553323566E7d, Math.max(4.9E-324d,1.82321553323566E7d));
assertEquals("max(double)[84] ::", 1.82321553323566E7d, StrictMath.max(1.82321553323566E7d,1.82321553323566E7d));
assertEquals("max(double)[85] ::", 1.82321553323566E7d, Math.max(1.82321553323566E7d,1.82321553323566E7d));
assertEquals("max(double)[86] ::", 1.82321553323566E7d, StrictMath.max(4.9E-324d,1.82321553323566E7d));
assertEquals("max(double)[87] ::", 1.82321553323566E7d, Math.max(4.9E-324d,1.82321553323566E7d));
assertEquals("max(double)[88] ::", 9.9E-322d, StrictMath.max(4.9E-324d,9.9E-322d));
assertEquals("max(double)[89] ::", 9.9E-322d, Math.max(4.9E-324d,9.9E-322d));
assertEquals("max(double)[90] ::", 9.9E-322d, StrictMath.max(9.9E-322d,4.9E-324d));
assertEquals("max(double)[91] ::", 9.9E-322d, Math.max(9.9E-322d,4.9E-324d));
assertEquals("max(double)[92] ::", 9.9E-322d, StrictMath.max(4.9E-324d,9.9E-322d));
assertEquals("max(double)[93] ::", 9.9E-322d, Math.max(4.9E-324d,9.9E-322d));
assertEquals("max(double)[94] ::", 9.9E-322d, StrictMath.max(9.9E-322d,9.9E-322d));
assertEquals("max(double)[95] ::", 9.9E-322d, Math.max(9.9E-322d,9.9E-322d));
assertEquals("max(double)[96] ::", 3.595386269724631E305d, StrictMath.max(9.9E-322d,3.595386269724631E305d));
assertEquals("max(double)[97] ::", 3.595386269724631E305d, Math.max(9.9E-322d,3.595386269724631E305d));
assertEquals("max(double)[98] ::", 3.595386269724631E305d, StrictMath.max(3.595386269724631E305d,9.9E-322d));
assertEquals("max(double)[99] ::", 3.595386269724631E305d, Math.max(3.595386269724631E305d,9.9E-322d));
assertEquals("max(double)[100] ::", 3.595386269724631E305d, StrictMath.max(9.9E-322d,3.595386269724631E305d));
assertEquals("max(double)[101] ::", 3.595386269724631E305d, Math.max(9.9E-322d,3.595386269724631E305d));
assertEquals("max(double)[102] ::", 3.595386269724631E305d, StrictMath.max(3.595386269724631E305d,3.595386269724631E305d));
assertEquals("max(double)[103] ::", 3.595386269724631E305d, Math.max(3.595386269724631E305d,3.595386269724631E305d));
assertEquals("max(double)[104] ::", 8.988465674311578E305d, StrictMath.max(3.595386269724631E305d,8.988465674311578E305d));
assertEquals("max(double)[105] ::", 8.988465674311578E305d, Math.max(3.595386269724631E305d,8.988465674311578E305d));
assertEquals("max(double)[106] ::", 8.988465674311578E305d, StrictMath.max(8.988465674311578E305d,3.595386269724631E305d));
assertEquals("max(double)[107] ::", 8.988465674311578E305d, Math.max(8.988465674311578E305d,3.595386269724631E305d));
assertEquals("max(double)[108] ::", 8.988465674311578E305d, StrictMath.max(3.595386269724631E305d,8.988465674311578E305d));
assertEquals("max(double)[109] ::", 8.988465674311578E305d, Math.max(3.595386269724631E305d,8.988465674311578E305d));
assertEquals("max(double)[110] ::", 8.988465674311578E305d, StrictMath.max(8.988465674311578E305d,8.988465674311578E305d));
assertEquals("max(double)[111] ::", 8.988465674311578E305d, Math.max(8.988465674311578E305d,8.988465674311578E305d));
assertEquals("max(double)[112] ::", 1.7976931348623157E308d, StrictMath.max(8.988465674311578E305d,1.7976931348623157E308d));
assertEquals("max(double)[113] ::", 1.7976931348623157E308d, Math.max(8.988465674311578E305d,1.7976931348623157E308d));
assertEquals("max(double)[114] ::", 1.7976931348623157E308d, StrictMath.max(1.7976931348623157E308d,8.988465674311578E305d));
assertEquals("max(double)[115] ::", 1.7976931348623157E308d, Math.max(1.7976931348623157E308d,8.988465674311578E305d));
assertEquals("max(double)[116] ::", 1.7976931348623157E308d, StrictMath.max(8.988465674311578E305d,1.7976931348623157E308d));
assertEquals("max(double)[117] ::", 1.7976931348623157E308d, Math.max(8.988465674311578E305d,1.7976931348623157E308d));
assertEquals("max(double)[118] ::", 1.7976931348623157E308d, StrictMath.max(1.7976931348623157E308d,1.7976931348623157E308d));
assertEquals("max(double)[119] ::", 1.7976931348623157E308d, Math.max(1.7976931348623157E308d,1.7976931348623157E308d));
assertEquals("max(double)[120] ::", 1.7976931348623157E308d, StrictMath.max(1.7976931348623157E308d,1.7976931348623157E308d));
assertEquals("max(double)[121] ::", 1.7976931348623157E308d, Math.max(1.7976931348623157E308d,1.7976931348623157E308d));
assertEquals("max(double)[122] ::", 1.7976931348623157E308d, StrictMath.max(1.7976931348623157E308d,1.7976931348623157E308d));
assertEquals("max(double)[123] ::", 1.7976931348623157E308d, Math.max(1.7976931348623157E308d,1.7976931348623157E308d));
assertEquals("max(double)[124] ::", 1.7976931348623157E308d, StrictMath.max(1.7976931348623157E308d,1.7976931348623157E308d));
assertEquals("max(double)[125] ::", 1.7976931348623157E308d, Math.max(1.7976931348623157E308d,1.7976931348623157E308d));
assertEquals("max(double)[126] ::", 1.7976931348623157E308d, StrictMath.max(1.7976931348623157E308d,1.7976931348623157E308d));
assertEquals("max(double)[127] ::", 1.7976931348623157E308d, Math.max(1.7976931348623157E308d,1.7976931348623157E308d));
}

public void testMax_float()
{
assertEquals("max(float)[0] ::", -1.7014118E36f, StrictMath.max(-3.4028235E38f,-1.7014118E36f));
assertEquals("max(float)[1] ::", -1.7014118E36f, Math.max(-3.4028235E38f,-1.7014118E36f));
assertEquals("max(float)[2] ::", -1.7014118E36f, StrictMath.max(-1.7014118E36f,-3.4028235E38f));
assertEquals("max(float)[3] ::", -1.7014118E36f, Math.max(-1.7014118E36f,-3.4028235E38f));
assertEquals("max(float)[4] ::", -1.7014118E36f, StrictMath.max(-3.4028235E38f,-1.7014118E36f));
assertEquals("max(float)[5] ::", -1.7014118E36f, Math.max(-3.4028235E38f,-1.7014118E36f));
assertEquals("max(float)[6] ::", -1.7014118E36f, StrictMath.max(-1.7014118E36f,-1.7014118E36f));
assertEquals("max(float)[7] ::", -1.7014118E36f, Math.max(-1.7014118E36f,-1.7014118E36f));
assertEquals("max(float)[8] ::", -6.805647E35f, StrictMath.max(-1.7014118E36f,-6.805647E35f));
assertEquals("max(float)[9] ::", -6.805647E35f, Math.max(-1.7014118E36f,-6.805647E35f));
assertEquals("max(float)[10] ::", -6.805647E35f, StrictMath.max(-6.805647E35f,-1.7014118E36f));
assertEquals("max(float)[11] ::", -6.805647E35f, Math.max(-6.805647E35f,-1.7014118E36f));
assertEquals("max(float)[12] ::", -6.805647E35f, StrictMath.max(-1.7014118E36f,-6.805647E35f));
assertEquals("max(float)[13] ::", -6.805647E35f, Math.max(-1.7014118E36f,-6.805647E35f));
assertEquals("max(float)[14] ::", -6.805647E35f, StrictMath.max(-6.805647E35f,-6.805647E35f));
assertEquals("max(float)[15] ::", -6.805647E35f, Math.max(-6.805647E35f,-6.805647E35f));
assertEquals("max(float)[16] ::", -2.803E-42f, StrictMath.max(-6.805647E35f,-2.803E-42f));
assertEquals("max(float)[17] ::", -2.803E-42f, Math.max(-6.805647E35f,-2.803E-42f));
assertEquals("max(float)[18] ::", -2.803E-42f, StrictMath.max(-2.803E-42f,-6.805647E35f));
assertEquals("max(float)[19] ::", -2.803E-42f, Math.max(-2.803E-42f,-6.805647E35f));
assertEquals("max(float)[20] ::", -2.803E-42f, StrictMath.max(-6.805647E35f,-2.803E-42f));
assertEquals("max(float)[21] ::", -2.803E-42f, Math.max(-6.805647E35f,-2.803E-42f));
assertEquals("max(float)[22] ::", -2.803E-42f, StrictMath.max(-2.803E-42f,-2.803E-42f));
assertEquals("max(float)[23] ::", -2.803E-42f, Math.max(-2.803E-42f,-2.803E-42f));
assertEquals("max(float)[24] ::", -1.401E-42f, StrictMath.max(-2.803E-42f,-1.401E-42f));
assertEquals("max(float)[25] ::", -1.401E-42f, Math.max(-2.803E-42f,-1.401E-42f));
assertEquals("max(float)[26] ::", -1.401E-42f, StrictMath.max(-1.401E-42f,-2.803E-42f));
assertEquals("max(float)[27] ::", -1.401E-42f, Math.max(-1.401E-42f,-2.803E-42f));
assertEquals("max(float)[28] ::", -1.401E-42f, StrictMath.max(-2.803E-42f,-1.401E-42f));
assertEquals("max(float)[29] ::", -1.401E-42f, Math.max(-2.803E-42f,-1.401E-42f));
assertEquals("max(float)[30] ::", -1.401E-42f, StrictMath.max(-1.401E-42f,-1.401E-42f));
assertEquals("max(float)[31] ::", -1.401E-42f, Math.max(-1.401E-42f,-1.401E-42f));
assertEquals("max(float)[32] ::", -1.401E-42f, StrictMath.max(-1.401E-42f,-3.2948748E7f));
assertEquals("max(float)[33] ::", -1.401E-42f, Math.max(-1.401E-42f,-3.2948748E7f));
assertEquals("max(float)[34] ::", -1.401E-42f, StrictMath.max(-3.2948748E7f,-1.401E-42f));
assertEquals("max(float)[35] ::", -1.401E-42f, Math.max(-3.2948748E7f,-1.401E-42f));
assertEquals("max(float)[36] ::", -1.401E-42f, StrictMath.max(-1.401E-42f,-1.401E-42f));
assertEquals("max(float)[37] ::", -1.401E-42f, Math.max(-1.401E-42f,-1.401E-42f));
assertEquals("max(float)[38] ::", -1.401E-42f, StrictMath.max(-3.2948748E7f,-1.401E-42f));
assertEquals("max(float)[39] ::", -1.401E-42f, Math.max(-3.2948748E7f,-1.401E-42f));
assertEquals("max(float)[40] ::", -9.0E-9f, StrictMath.max(-3.2948748E7f,-9.0E-9f));
assertEquals("max(float)[41] ::", -9.0E-9f, Math.max(-3.2948748E7f,-9.0E-9f));
assertEquals("max(float)[42] ::", -9.0E-9f, StrictMath.max(-9.0E-9f,-3.2948748E7f));
assertEquals("max(float)[43] ::", -9.0E-9f, Math.max(-9.0E-9f,-3.2948748E7f));
assertEquals("max(float)[44] ::", -9.0E-9f, StrictMath.max(-3.2948748E7f,-9.0E-9f));
assertEquals("max(float)[45] ::", -9.0E-9f, Math.max(-3.2948748E7f,-9.0E-9f));
assertEquals("max(float)[46] ::", -9.0E-9f, StrictMath.max(-9.0E-9f,-9.0E-9f));
assertEquals("max(float)[47] ::", -9.0E-9f, Math.max(-9.0E-9f,-9.0E-9f));
assertEquals("max(float)[48] ::", -9.0E-9f, StrictMath.max(-9.0E-9f,-2.0E-7f));
assertEquals("max(float)[49] ::", -9.0E-9f, Math.max(-9.0E-9f,-2.0E-7f));
assertEquals("max(float)[50] ::", -9.0E-9f, StrictMath.max(-2.0E-7f,-9.0E-9f));
assertEquals("max(float)[51] ::", -9.0E-9f, Math.max(-2.0E-7f,-9.0E-9f));
assertEquals("max(float)[52] ::", -9.0E-9f, StrictMath.max(-9.0E-9f,-9.0E-9f));
assertEquals("max(float)[53] ::", -9.0E-9f, Math.max(-9.0E-9f,-9.0E-9f));
assertEquals("max(float)[54] ::", -9.0E-9f, StrictMath.max(-2.0E-7f,-9.0E-9f));
assertEquals("max(float)[55] ::", -9.0E-9f, Math.max(-2.0E-7f,-9.0E-9f));
assertEquals("max(float)[56] ::", 0.0f, StrictMath.max(-2.0E-7f,0.0f));
assertEquals("max(float)[57] ::", 0.0f, Math.max(-2.0E-7f,0.0f));
assertEquals("max(float)[58] ::", 0.0f, StrictMath.max(0.0f,-2.0E-7f));
assertEquals("max(float)[59] ::", 0.0f, Math.max(0.0f,-2.0E-7f));
assertEquals("max(float)[60] ::", 0.0f, StrictMath.max(-2.0E-7f,0.0f));
assertEquals("max(float)[61] ::", 0.0f, Math.max(-2.0E-7f,0.0f));
assertEquals("max(float)[62] ::", 0.0f, StrictMath.max(0.0f,0.0f));
assertEquals("max(float)[63] ::", 0.0f, Math.max(0.0f,0.0f));
assertEquals("max(float)[64] ::", 0.45623234f, StrictMath.max(0.0f,0.45623234f));
assertEquals("max(float)[65] ::", 0.45623234f, Math.max(0.0f,0.45623234f));
assertEquals("max(float)[66] ::", 0.45623234f, StrictMath.max(0.45623234f,0.0f));
assertEquals("max(float)[67] ::", 0.45623234f, Math.max(0.45623234f,0.0f));
assertEquals("max(float)[68] ::", 0.45623234f, StrictMath.max(0.0f,0.45623234f));
assertEquals("max(float)[69] ::", 0.45623234f, Math.max(0.0f,0.45623234f));
assertEquals("max(float)[70] ::", 0.45623234f, StrictMath.max(0.45623234f,0.45623234f));
assertEquals("max(float)[71] ::", 0.45623234f, Math.max(0.45623234f,0.45623234f));
assertEquals("max(float)[72] ::", 1224257.2f, StrictMath.max(0.45623234f,1224257.2f));
assertEquals("max(float)[73] ::", 1224257.2f, Math.max(0.45623234f,1224257.2f));
assertEquals("max(float)[74] ::", 1224257.2f, StrictMath.max(1224257.2f,0.45623234f));
assertEquals("max(float)[75] ::", 1224257.2f, Math.max(1224257.2f,0.45623234f));
assertEquals("max(float)[76] ::", 1224257.2f, StrictMath.max(0.45623234f,1224257.2f));
assertEquals("max(float)[77] ::", 1224257.2f, Math.max(0.45623234f,1224257.2f));
assertEquals("max(float)[78] ::", 1224257.2f, StrictMath.max(1224257.2f,1224257.2f));
assertEquals("max(float)[79] ::", 1224257.2f, Math.max(1224257.2f,1224257.2f));
assertEquals("max(float)[80] ::", 9.9998321E9f, StrictMath.max(1224257.2f,9.9998321E9f));
assertEquals("max(float)[81] ::", 9.9998321E9f, Math.max(1224257.2f,9.9998321E9f));
assertEquals("max(float)[82] ::", 9.9998321E9f, StrictMath.max(9.9998321E9f,1224257.2f));
assertEquals("max(float)[83] ::", 9.9998321E9f, Math.max(9.9998321E9f,1224257.2f));
assertEquals("max(float)[84] ::", 9.9998321E9f, StrictMath.max(1224257.2f,9.9998321E9f));
assertEquals("max(float)[85] ::", 9.9998321E9f, Math.max(1224257.2f,9.9998321E9f));
assertEquals("max(float)[86] ::", 9.9998321E9f, StrictMath.max(9.9998321E9f,9.9998321E9f));
assertEquals("max(float)[87] ::", 9.9998321E9f, Math.max(9.9998321E9f,9.9998321E9f));
assertEquals("max(float)[88] ::", 9.9998321E9f, StrictMath.max(9.9998321E9f,1.4E-45f));
assertEquals("max(float)[89] ::", 9.9998321E9f, Math.max(9.9998321E9f,1.4E-45f));
assertEquals("max(float)[90] ::", 9.9998321E9f, StrictMath.max(1.4E-45f,9.9998321E9f));
assertEquals("max(float)[91] ::", 9.9998321E9f, Math.max(1.4E-45f,9.9998321E9f));
assertEquals("max(float)[92] ::", 9.9998321E9f, StrictMath.max(9.9998321E9f,9.9998321E9f));
assertEquals("max(float)[93] ::", 9.9998321E9f, Math.max(9.9998321E9f,9.9998321E9f));
assertEquals("max(float)[94] ::", 9.9998321E9f, StrictMath.max(1.4E-45f,9.9998321E9f));
assertEquals("max(float)[95] ::", 9.9998321E9f, Math.max(1.4E-45f,9.9998321E9f));
assertEquals("max(float)[96] ::", 2.8E-43f, StrictMath.max(1.4E-45f,2.8E-43f));
assertEquals("max(float)[97] ::", 2.8E-43f, Math.max(1.4E-45f,2.8E-43f));
assertEquals("max(float)[98] ::", 2.8E-43f, StrictMath.max(2.8E-43f,1.4E-45f));
assertEquals("max(float)[99] ::", 2.8E-43f, Math.max(2.8E-43f,1.4E-45f));
assertEquals("max(float)[100] ::", 2.8E-43f, StrictMath.max(1.4E-45f,2.8E-43f));
assertEquals("max(float)[101] ::", 2.8E-43f, Math.max(1.4E-45f,2.8E-43f));
assertEquals("max(float)[102] ::", 2.8E-43f, StrictMath.max(2.8E-43f,2.8E-43f));
assertEquals("max(float)[103] ::", 2.8E-43f, Math.max(2.8E-43f,2.8E-43f));
assertEquals("max(float)[104] ::", 6.805647E35f, StrictMath.max(2.8E-43f,6.805647E35f));
assertEquals("max(float)[105] ::", 6.805647E35f, Math.max(2.8E-43f,6.805647E35f));
assertEquals("max(float)[106] ::", 6.805647E35f, StrictMath.max(6.805647E35f,2.8E-43f));
assertEquals("max(float)[107] ::", 6.805647E35f, Math.max(6.805647E35f,2.8E-43f));
assertEquals("max(float)[108] ::", 6.805647E35f, StrictMath.max(2.8E-43f,6.805647E35f));
assertEquals("max(float)[109] ::", 6.805647E35f, Math.max(2.8E-43f,6.805647E35f));
assertEquals("max(float)[110] ::", 6.805647E35f, StrictMath.max(6.805647E35f,6.805647E35f));
assertEquals("max(float)[111] ::", 6.805647E35f, Math.max(6.805647E35f,6.805647E35f));
assertEquals("max(float)[112] ::", 1.7014118E36f, StrictMath.max(6.805647E35f,1.7014118E36f));
assertEquals("max(float)[113] ::", 1.7014118E36f, Math.max(6.805647E35f,1.7014118E36f));
assertEquals("max(float)[114] ::", 1.7014118E36f, StrictMath.max(1.7014118E36f,6.805647E35f));
assertEquals("max(float)[115] ::", 1.7014118E36f, Math.max(1.7014118E36f,6.805647E35f));
assertEquals("max(float)[116] ::", 1.7014118E36f, StrictMath.max(6.805647E35f,1.7014118E36f));
assertEquals("max(float)[117] ::", 1.7014118E36f, Math.max(6.805647E35f,1.7014118E36f));
assertEquals("max(float)[118] ::", 1.7014118E36f, StrictMath.max(1.7014118E36f,1.7014118E36f));
assertEquals("max(float)[119] ::", 1.7014118E36f, Math.max(1.7014118E36f,1.7014118E36f));
assertEquals("max(float)[120] ::", 3.4028235E38f, StrictMath.max(1.7014118E36f,3.4028235E38f));
assertEquals("max(float)[121] ::", 3.4028235E38f, Math.max(1.7014118E36f,3.4028235E38f));
assertEquals("max(float)[122] ::", 3.4028235E38f, StrictMath.max(3.4028235E38f,1.7014118E36f));
assertEquals("max(float)[123] ::", 3.4028235E38f, Math.max(3.4028235E38f,1.7014118E36f));
assertEquals("max(float)[124] ::", 3.4028235E38f, StrictMath.max(1.7014118E36f,3.4028235E38f));
assertEquals("max(float)[125] ::", 3.4028235E38f, Math.max(1.7014118E36f,3.4028235E38f));
assertEquals("max(float)[126] ::", 3.4028235E38f, StrictMath.max(3.4028235E38f,3.4028235E38f));
assertEquals("max(float)[127] ::", 3.4028235E38f, Math.max(3.4028235E38f,3.4028235E38f));
assertEquals("max(float)[128] ::", 3.4028235E38f, StrictMath.max(3.4028235E38f,3.4028235E38f));
assertEquals("max(float)[129] ::", 3.4028235E38f, Math.max(3.4028235E38f,3.4028235E38f));
assertEquals("max(float)[130] ::", 3.4028235E38f, StrictMath.max(3.4028235E38f,3.4028235E38f));
assertEquals("max(float)[131] ::", 3.4028235E38f, Math.max(3.4028235E38f,3.4028235E38f));
assertEquals("max(float)[132] ::", 3.4028235E38f, StrictMath.max(3.4028235E38f,3.4028235E38f));
assertEquals("max(float)[133] ::", 3.4028235E38f, Math.max(3.4028235E38f,3.4028235E38f));
assertEquals("max(float)[134] ::", 3.4028235E38f, StrictMath.max(3.4028235E38f,3.4028235E38f));
assertEquals("max(float)[135] ::", 3.4028235E38f, Math.max(3.4028235E38f,3.4028235E38f));
}

public void testMax_long()
{
assertEquals("max(long)[0] ::", -9223372036854775807l, StrictMath.max(-9223372036854775808l,-9223372036854775807l));
assertEquals("max(long)[1] ::", -9223372036854775807l, Math.max(-9223372036854775808l,-9223372036854775807l));
assertEquals("max(long)[2] ::", -9223372036854775807l, StrictMath.max(-9223372036854775807l,-9223372036854775808l));
assertEquals("max(long)[3] ::", -9223372036854775807l, Math.max(-9223372036854775807l,-9223372036854775808l));
assertEquals("max(long)[4] ::", -9223372036854775807l, StrictMath.max(-9223372036854775808l,-9223372036854775807l));
assertEquals("max(long)[5] ::", -9223372036854775807l, Math.max(-9223372036854775808l,-9223372036854775807l));
assertEquals("max(long)[6] ::", -9223372036854775807l, StrictMath.max(-9223372036854775807l,-9223372036854775807l));
assertEquals("max(long)[7] ::", -9223372036854775807l, Math.max(-9223372036854775807l,-9223372036854775807l));
assertEquals("max(long)[8] ::", -9223372036854775806l, StrictMath.max(-9223372036854775807l,-9223372036854775806l));
assertEquals("max(long)[9] ::", -9223372036854775806l, Math.max(-9223372036854775807l,-9223372036854775806l));
assertEquals("max(long)[10] ::", -9223372036854775806l, StrictMath.max(-9223372036854775806l,-9223372036854775807l));
assertEquals("max(long)[11] ::", -9223372036854775806l, Math.max(-9223372036854775806l,-9223372036854775807l));
assertEquals("max(long)[12] ::", -9223372036854775806l, StrictMath.max(-9223372036854775807l,-9223372036854775806l));
assertEquals("max(long)[13] ::", -9223372036854775806l, Math.max(-9223372036854775807l,-9223372036854775806l));
assertEquals("max(long)[14] ::", -9223372036854775806l, StrictMath.max(-9223372036854775806l,-9223372036854775806l));
assertEquals("max(long)[15] ::", -9223372036854775806l, Math.max(-9223372036854775806l,-9223372036854775806l));
assertEquals("max(long)[16] ::", -332342l, StrictMath.max(-9223372036854775806l,-332342l));
assertEquals("max(long)[17] ::", -332342l, Math.max(-9223372036854775806l,-332342l));
assertEquals("max(long)[18] ::", -332342l, StrictMath.max(-332342l,-9223372036854775806l));
assertEquals("max(long)[19] ::", -332342l, Math.max(-332342l,-9223372036854775806l));
assertEquals("max(long)[20] ::", -332342l, StrictMath.max(-9223372036854775806l,-332342l));
assertEquals("max(long)[21] ::", -332342l, Math.max(-9223372036854775806l,-332342l));
assertEquals("max(long)[22] ::", -332342l, StrictMath.max(-332342l,-332342l));
assertEquals("max(long)[23] ::", -332342l, Math.max(-332342l,-332342l));
assertEquals("max(long)[24] ::", -2l, StrictMath.max(-332342l,-2l));
assertEquals("max(long)[25] ::", -2l, Math.max(-332342l,-2l));
assertEquals("max(long)[26] ::", -2l, StrictMath.max(-2l,-332342l));
assertEquals("max(long)[27] ::", -2l, Math.max(-2l,-332342l));
assertEquals("max(long)[28] ::", -2l, StrictMath.max(-332342l,-2l));
assertEquals("max(long)[29] ::", -2l, Math.max(-332342l,-2l));
assertEquals("max(long)[30] ::", -2l, StrictMath.max(-2l,-2l));
assertEquals("max(long)[31] ::", -2l, Math.max(-2l,-2l));
assertEquals("max(long)[32] ::", -1l, StrictMath.max(-2l,-1l));
assertEquals("max(long)[33] ::", -1l, Math.max(-2l,-1l));
assertEquals("max(long)[34] ::", -1l, StrictMath.max(-1l,-2l));
assertEquals("max(long)[35] ::", -1l, Math.max(-1l,-2l));
assertEquals("max(long)[36] ::", -1l, StrictMath.max(-2l,-1l));
assertEquals("max(long)[37] ::", -1l, Math.max(-2l,-1l));
assertEquals("max(long)[38] ::", -1l, StrictMath.max(-1l,-1l));
assertEquals("max(long)[39] ::", -1l, Math.max(-1l,-1l));
assertEquals("max(long)[40] ::", 0l, StrictMath.max(-1l,0l));
assertEquals("max(long)[41] ::", 0l, Math.max(-1l,0l));
assertEquals("max(long)[42] ::", 0l, StrictMath.max(0l,-1l));
assertEquals("max(long)[43] ::", 0l, Math.max(0l,-1l));
assertEquals("max(long)[44] ::", 0l, StrictMath.max(-1l,0l));
assertEquals("max(long)[45] ::", 0l, Math.max(-1l,0l));
assertEquals("max(long)[46] ::", 0l, StrictMath.max(0l,0l));
assertEquals("max(long)[47] ::", 0l, Math.max(0l,0l));
assertEquals("max(long)[48] ::", 1l, StrictMath.max(0l,1l));
assertEquals("max(long)[49] ::", 1l, Math.max(0l,1l));
assertEquals("max(long)[50] ::", 1l, StrictMath.max(1l,0l));
assertEquals("max(long)[51] ::", 1l, Math.max(1l,0l));
assertEquals("max(long)[52] ::", 1l, StrictMath.max(0l,1l));
assertEquals("max(long)[53] ::", 1l, Math.max(0l,1l));
assertEquals("max(long)[54] ::", 1l, StrictMath.max(1l,1l));
assertEquals("max(long)[55] ::", 1l, Math.max(1l,1l));
assertEquals("max(long)[56] ::", 2l, StrictMath.max(1l,2l));
assertEquals("max(long)[57] ::", 2l, Math.max(1l,2l));
assertEquals("max(long)[58] ::", 2l, StrictMath.max(2l,1l));
assertEquals("max(long)[59] ::", 2l, Math.max(2l,1l));
assertEquals("max(long)[60] ::", 2l, StrictMath.max(1l,2l));
assertEquals("max(long)[61] ::", 2l, Math.max(1l,2l));
assertEquals("max(long)[62] ::", 2l, StrictMath.max(2l,2l));
assertEquals("max(long)[63] ::", 2l, Math.max(2l,2l));
assertEquals("max(long)[64] ::", 348238234234l, StrictMath.max(2l,348238234234l));
assertEquals("max(long)[65] ::", 348238234234l, Math.max(2l,348238234234l));
assertEquals("max(long)[66] ::", 348238234234l, StrictMath.max(348238234234l,2l));
assertEquals("max(long)[67] ::", 348238234234l, Math.max(348238234234l,2l));
assertEquals("max(long)[68] ::", 348238234234l, StrictMath.max(2l,348238234234l));
assertEquals("max(long)[69] ::", 348238234234l, Math.max(2l,348238234234l));
assertEquals("max(long)[70] ::", 348238234234l, StrictMath.max(348238234234l,348238234234l));
assertEquals("max(long)[71] ::", 348238234234l, Math.max(348238234234l,348238234234l));
assertEquals("max(long)[72] ::", 9223372036854775805l, StrictMath.max(348238234234l,9223372036854775805l));
assertEquals("max(long)[73] ::", 9223372036854775805l, Math.max(348238234234l,9223372036854775805l));
assertEquals("max(long)[74] ::", 9223372036854775805l, StrictMath.max(9223372036854775805l,348238234234l));
assertEquals("max(long)[75] ::", 9223372036854775805l, Math.max(9223372036854775805l,348238234234l));
assertEquals("max(long)[76] ::", 9223372036854775805l, StrictMath.max(348238234234l,9223372036854775805l));
assertEquals("max(long)[77] ::", 9223372036854775805l, Math.max(348238234234l,9223372036854775805l));
assertEquals("max(long)[78] ::", 9223372036854775805l, StrictMath.max(9223372036854775805l,9223372036854775805l));
assertEquals("max(long)[79] ::", 9223372036854775805l, Math.max(9223372036854775805l,9223372036854775805l));
assertEquals("max(long)[80] ::", 9223372036854775806l, StrictMath.max(9223372036854775805l,9223372036854775806l));
assertEquals("max(long)[81] ::", 9223372036854775806l, Math.max(9223372036854775805l,9223372036854775806l));
assertEquals("max(long)[82] ::", 9223372036854775806l, StrictMath.max(9223372036854775806l,9223372036854775805l));
assertEquals("max(long)[83] ::", 9223372036854775806l, Math.max(9223372036854775806l,9223372036854775805l));
assertEquals("max(long)[84] ::", 9223372036854775806l, StrictMath.max(9223372036854775805l,9223372036854775806l));
assertEquals("max(long)[85] ::", 9223372036854775806l, Math.max(9223372036854775805l,9223372036854775806l));
assertEquals("max(long)[86] ::", 9223372036854775806l, StrictMath.max(9223372036854775806l,9223372036854775806l));
assertEquals("max(long)[87] ::", 9223372036854775806l, Math.max(9223372036854775806l,9223372036854775806l));
assertEquals("max(long)[88] ::", 9223372036854775807l, StrictMath.max(9223372036854775806l,9223372036854775807l));
assertEquals("max(long)[89] ::", 9223372036854775807l, Math.max(9223372036854775806l,9223372036854775807l));
assertEquals("max(long)[90] ::", 9223372036854775807l, StrictMath.max(9223372036854775807l,9223372036854775806l));
assertEquals("max(long)[91] ::", 9223372036854775807l, Math.max(9223372036854775807l,9223372036854775806l));
assertEquals("max(long)[92] ::", 9223372036854775807l, StrictMath.max(9223372036854775806l,9223372036854775807l));
assertEquals("max(long)[93] ::", 9223372036854775807l, Math.max(9223372036854775806l,9223372036854775807l));
assertEquals("max(long)[94] ::", 9223372036854775807l, StrictMath.max(9223372036854775807l,9223372036854775807l));
assertEquals("max(long)[95] ::", 9223372036854775807l, Math.max(9223372036854775807l,9223372036854775807l));
}

public void testMax_int()
{
assertEquals("max(int)[0] ::", -2147483647, StrictMath.max(-2147483648,-2147483647));
assertEquals("max(int)[1] ::", -2147483647, Math.max(-2147483648,-2147483647));
assertEquals("max(int)[2] ::", -2147483647, StrictMath.max(-2147483647,-2147483648));
assertEquals("max(int)[3] ::", -2147483647, Math.max(-2147483647,-2147483648));
assertEquals("max(int)[4] ::", -2147483647, StrictMath.max(-2147483648,-2147483647));
assertEquals("max(int)[5] ::", -2147483647, Math.max(-2147483648,-2147483647));
assertEquals("max(int)[6] ::", -2147483647, StrictMath.max(-2147483647,-2147483647));
assertEquals("max(int)[7] ::", -2147483647, Math.max(-2147483647,-2147483647));
assertEquals("max(int)[8] ::", -2147483646, StrictMath.max(-2147483647,-2147483646));
assertEquals("max(int)[9] ::", -2147483646, Math.max(-2147483647,-2147483646));
assertEquals("max(int)[10] ::", -2147483646, StrictMath.max(-2147483646,-2147483647));
assertEquals("max(int)[11] ::", -2147483646, Math.max(-2147483646,-2147483647));
assertEquals("max(int)[12] ::", -2147483646, StrictMath.max(-2147483647,-2147483646));
assertEquals("max(int)[13] ::", -2147483646, Math.max(-2147483647,-2147483646));
assertEquals("max(int)[14] ::", -2147483646, StrictMath.max(-2147483646,-2147483646));
assertEquals("max(int)[15] ::", -2147483646, Math.max(-2147483646,-2147483646));
assertEquals("max(int)[16] ::", -42218, StrictMath.max(-2147483646,-42218));
assertEquals("max(int)[17] ::", -42218, Math.max(-2147483646,-42218));
assertEquals("max(int)[18] ::", -42218, StrictMath.max(-42218,-2147483646));
assertEquals("max(int)[19] ::", -42218, Math.max(-42218,-2147483646));
assertEquals("max(int)[20] ::", -42218, StrictMath.max(-2147483646,-42218));
assertEquals("max(int)[21] ::", -42218, Math.max(-2147483646,-42218));
assertEquals("max(int)[22] ::", -42218, StrictMath.max(-42218,-42218));
assertEquals("max(int)[23] ::", -42218, Math.max(-42218,-42218));
assertEquals("max(int)[24] ::", -2, StrictMath.max(-42218,-2));
assertEquals("max(int)[25] ::", -2, Math.max(-42218,-2));
assertEquals("max(int)[26] ::", -2, StrictMath.max(-2,-42218));
assertEquals("max(int)[27] ::", -2, Math.max(-2,-42218));
assertEquals("max(int)[28] ::", -2, StrictMath.max(-42218,-2));
assertEquals("max(int)[29] ::", -2, Math.max(-42218,-2));
assertEquals("max(int)[30] ::", -2, StrictMath.max(-2,-2));
assertEquals("max(int)[31] ::", -2, Math.max(-2,-2));
assertEquals("max(int)[32] ::", -1, StrictMath.max(-2,-1));
assertEquals("max(int)[33] ::", -1, Math.max(-2,-1));
assertEquals("max(int)[34] ::", -1, StrictMath.max(-1,-2));
assertEquals("max(int)[35] ::", -1, Math.max(-1,-2));
assertEquals("max(int)[36] ::", -1, StrictMath.max(-2,-1));
assertEquals("max(int)[37] ::", -1, Math.max(-2,-1));
assertEquals("max(int)[38] ::", -1, StrictMath.max(-1,-1));
assertEquals("max(int)[39] ::", -1, Math.max(-1,-1));
assertEquals("max(int)[40] ::", 0, StrictMath.max(-1,0));
assertEquals("max(int)[41] ::", 0, Math.max(-1,0));
assertEquals("max(int)[42] ::", 0, StrictMath.max(0,-1));
assertEquals("max(int)[43] ::", 0, Math.max(0,-1));
assertEquals("max(int)[44] ::", 0, StrictMath.max(-1,0));
assertEquals("max(int)[45] ::", 0, Math.max(-1,0));
assertEquals("max(int)[46] ::", 0, StrictMath.max(0,0));
assertEquals("max(int)[47] ::", 0, Math.max(0,0));
assertEquals("max(int)[48] ::", 1, StrictMath.max(0,1));
assertEquals("max(int)[49] ::", 1, Math.max(0,1));
assertEquals("max(int)[50] ::", 1, StrictMath.max(1,0));
assertEquals("max(int)[51] ::", 1, Math.max(1,0));
assertEquals("max(int)[52] ::", 1, StrictMath.max(0,1));
assertEquals("max(int)[53] ::", 1, Math.max(0,1));
assertEquals("max(int)[54] ::", 1, StrictMath.max(1,1));
assertEquals("max(int)[55] ::", 1, Math.max(1,1));
assertEquals("max(int)[56] ::", 2, StrictMath.max(1,2));
assertEquals("max(int)[57] ::", 2, Math.max(1,2));
assertEquals("max(int)[58] ::", 2, StrictMath.max(2,1));
assertEquals("max(int)[59] ::", 2, Math.max(2,1));
assertEquals("max(int)[60] ::", 2, StrictMath.max(1,2));
assertEquals("max(int)[61] ::", 2, Math.max(1,2));
assertEquals("max(int)[62] ::", 2, StrictMath.max(2,2));
assertEquals("max(int)[63] ::", 2, Math.max(2,2));
assertEquals("max(int)[64] ::", 892389, StrictMath.max(2,892389));
assertEquals("max(int)[65] ::", 892389, Math.max(2,892389));
assertEquals("max(int)[66] ::", 892389, StrictMath.max(892389,2));
assertEquals("max(int)[67] ::", 892389, Math.max(892389,2));
assertEquals("max(int)[68] ::", 892389, StrictMath.max(2,892389));
assertEquals("max(int)[69] ::", 892389, Math.max(2,892389));
assertEquals("max(int)[70] ::", 892389, StrictMath.max(892389,892389));
assertEquals("max(int)[71] ::", 892389, Math.max(892389,892389));
assertEquals("max(int)[72] ::", 2147483645, StrictMath.max(892389,2147483645));
assertEquals("max(int)[73] ::", 2147483645, Math.max(892389,2147483645));
assertEquals("max(int)[74] ::", 2147483645, StrictMath.max(2147483645,892389));
assertEquals("max(int)[75] ::", 2147483645, Math.max(2147483645,892389));
assertEquals("max(int)[76] ::", 2147483645, StrictMath.max(892389,2147483645));
assertEquals("max(int)[77] ::", 2147483645, Math.max(892389,2147483645));
assertEquals("max(int)[78] ::", 2147483645, StrictMath.max(2147483645,2147483645));
assertEquals("max(int)[79] ::", 2147483645, Math.max(2147483645,2147483645));
assertEquals("max(int)[80] ::", 2147483646, StrictMath.max(2147483645,2147483646));
assertEquals("max(int)[81] ::", 2147483646, Math.max(2147483645,2147483646));
assertEquals("max(int)[82] ::", 2147483646, StrictMath.max(2147483646,2147483645));
assertEquals("max(int)[83] ::", 2147483646, Math.max(2147483646,2147483645));
assertEquals("max(int)[84] ::", 2147483646, StrictMath.max(2147483645,2147483646));
assertEquals("max(int)[85] ::", 2147483646, Math.max(2147483645,2147483646));
assertEquals("max(int)[86] ::", 2147483646, StrictMath.max(2147483646,2147483646));
assertEquals("max(int)[87] ::", 2147483646, Math.max(2147483646,2147483646));
assertEquals("max(int)[88] ::", 2147483647, StrictMath.max(2147483646,2147483647));
assertEquals("max(int)[89] ::", 2147483647, Math.max(2147483646,2147483647));
assertEquals("max(int)[90] ::", 2147483647, StrictMath.max(2147483647,2147483646));
assertEquals("max(int)[91] ::", 2147483647, Math.max(2147483647,2147483646));
assertEquals("max(int)[92] ::", 2147483647, StrictMath.max(2147483646,2147483647));
assertEquals("max(int)[93] ::", 2147483647, Math.max(2147483646,2147483647));
assertEquals("max(int)[94] ::", 2147483647, StrictMath.max(2147483647,2147483647));
assertEquals("max(int)[95] ::", 2147483647, Math.max(2147483647,2147483647));
}

public void testMin_double()
{
assertEquals("min(double)[0] ::", -1.7976931348623157E308d, StrictMath.min(-1.7976931348623157E308d,-8.988465674311578E305d));
assertEquals("min(double)[1] ::", -1.7976931348623157E308d, Math.min(-1.7976931348623157E308d,-8.988465674311578E305d));
assertEquals("min(double)[2] ::", -1.7976931348623157E308d, StrictMath.min(-8.988465674311578E305d,-1.7976931348623157E308d));
assertEquals("min(double)[3] ::", -1.7976931348623157E308d, Math.min(-8.988465674311578E305d,-1.7976931348623157E308d));
assertEquals("min(double)[4] ::", -1.7976931348623157E308d, StrictMath.min(-1.7976931348623157E308d,-1.7976931348623157E308d));
assertEquals("min(double)[5] ::", -1.7976931348623157E308d, Math.min(-1.7976931348623157E308d,-1.7976931348623157E308d));
assertEquals("min(double)[6] ::", -1.7976931348623157E308d, StrictMath.min(-8.988465674311578E305d,-1.7976931348623157E308d));
assertEquals("min(double)[7] ::", -1.7976931348623157E308d, Math.min(-8.988465674311578E305d,-1.7976931348623157E308d));
assertEquals("min(double)[8] ::", -8.988465674311578E305d, StrictMath.min(-8.988465674311578E305d,-3.595386269724631E305d));
assertEquals("min(double)[9] ::", -8.988465674311578E305d, Math.min(-8.988465674311578E305d,-3.595386269724631E305d));
assertEquals("min(double)[10] ::", -8.988465674311578E305d, StrictMath.min(-3.595386269724631E305d,-8.988465674311578E305d));
assertEquals("min(double)[11] ::", -8.988465674311578E305d, Math.min(-3.595386269724631E305d,-8.988465674311578E305d));
assertEquals("min(double)[12] ::", -8.988465674311578E305d, StrictMath.min(-8.988465674311578E305d,-8.988465674311578E305d));
assertEquals("min(double)[13] ::", -8.988465674311578E305d, Math.min(-8.988465674311578E305d,-8.988465674311578E305d));
assertEquals("min(double)[14] ::", -8.988465674311578E305d, StrictMath.min(-3.595386269724631E305d,-8.988465674311578E305d));
assertEquals("min(double)[15] ::", -8.988465674311578E305d, Math.min(-3.595386269724631E305d,-8.988465674311578E305d));
assertEquals("min(double)[16] ::", -3.595386269724631E305d, StrictMath.min(-3.595386269724631E305d,-9.88E-321d));
assertEquals("min(double)[17] ::", -3.595386269724631E305d, Math.min(-3.595386269724631E305d,-9.88E-321d));
assertEquals("min(double)[18] ::", -3.595386269724631E305d, StrictMath.min(-9.88E-321d,-3.595386269724631E305d));
assertEquals("min(double)[19] ::", -3.595386269724631E305d, Math.min(-9.88E-321d,-3.595386269724631E305d));
assertEquals("min(double)[20] ::", -3.595386269724631E305d, StrictMath.min(-3.595386269724631E305d,-3.595386269724631E305d));
assertEquals("min(double)[21] ::", -3.595386269724631E305d, Math.min(-3.595386269724631E305d,-3.595386269724631E305d));
assertEquals("min(double)[22] ::", -3.595386269724631E305d, StrictMath.min(-9.88E-321d,-3.595386269724631E305d));
assertEquals("min(double)[23] ::", -3.595386269724631E305d, Math.min(-9.88E-321d,-3.595386269724631E305d));
assertEquals("min(double)[24] ::", -9.88E-321d, StrictMath.min(-9.88E-321d,-4.94E-321d));
assertEquals("min(double)[25] ::", -9.88E-321d, Math.min(-9.88E-321d,-4.94E-321d));
assertEquals("min(double)[26] ::", -9.88E-321d, StrictMath.min(-4.94E-321d,-9.88E-321d));
assertEquals("min(double)[27] ::", -9.88E-321d, Math.min(-4.94E-321d,-9.88E-321d));
assertEquals("min(double)[28] ::", -9.88E-321d, StrictMath.min(-9.88E-321d,-9.88E-321d));
assertEquals("min(double)[29] ::", -9.88E-321d, Math.min(-9.88E-321d,-9.88E-321d));
assertEquals("min(double)[30] ::", -9.88E-321d, StrictMath.min(-4.94E-321d,-9.88E-321d));
assertEquals("min(double)[31] ::", -9.88E-321d, Math.min(-4.94E-321d,-9.88E-321d));
assertEquals("min(double)[32] ::", -2.9291122121292315E9d, StrictMath.min(-4.94E-321d,-2.9291122121292315E9d));
assertEquals("min(double)[33] ::", -2.9291122121292315E9d, Math.min(-4.94E-321d,-2.9291122121292315E9d));
assertEquals("min(double)[34] ::", -2.9291122121292315E9d, StrictMath.min(-2.9291122121292315E9d,-4.94E-321d));
assertEquals("min(double)[35] ::", -2.9291122121292315E9d, Math.min(-2.9291122121292315E9d,-4.94E-321d));
assertEquals("min(double)[36] ::", -2.9291122121292315E9d, StrictMath.min(-4.94E-321d,-2.9291122121292315E9d));
assertEquals("min(double)[37] ::", -2.9291122121292315E9d, Math.min(-4.94E-321d,-2.9291122121292315E9d));
assertEquals("min(double)[38] ::", -2.9291122121292315E9d, StrictMath.min(-2.9291122121292315E9d,-2.9291122121292315E9d));
assertEquals("min(double)[39] ::", -2.9291122121292315E9d, Math.min(-2.9291122121292315E9d,-2.9291122121292315E9d));
assertEquals("min(double)[40] ::", -2.9291122121292315E9d, StrictMath.min(-2.9291122121292315E9d,-2372.228212d));
assertEquals("min(double)[41] ::", -2.9291122121292315E9d, Math.min(-2.9291122121292315E9d,-2372.228212d));
assertEquals("min(double)[42] ::", -2.9291122121292315E9d, StrictMath.min(-2372.228212d,-2.9291122121292315E9d));
assertEquals("min(double)[43] ::", -2.9291122121292315E9d, Math.min(-2372.228212d,-2.9291122121292315E9d));
assertEquals("min(double)[44] ::", -2.9291122121292315E9d, StrictMath.min(-2.9291122121292315E9d,-2.9291122121292315E9d));
assertEquals("min(double)[45] ::", -2.9291122121292315E9d, Math.min(-2.9291122121292315E9d,-2.9291122121292315E9d));
assertEquals("min(double)[46] ::", -2.9291122121292315E9d, StrictMath.min(-2372.228212d,-2.9291122121292315E9d));
assertEquals("min(double)[47] ::", -2.9291122121292315E9d, Math.min(-2372.228212d,-2.9291122121292315E9d));
assertEquals("min(double)[48] ::", -2372.228212d, StrictMath.min(-2372.228212d,-1.2232d));
assertEquals("min(double)[49] ::", -2372.228212d, Math.min(-2372.228212d,-1.2232d));
assertEquals("min(double)[50] ::", -2372.228212d, StrictMath.min(-1.2232d,-2372.228212d));
assertEquals("min(double)[51] ::", -2372.228212d, Math.min(-1.2232d,-2372.228212d));
assertEquals("min(double)[52] ::", -2372.228212d, StrictMath.min(-2372.228212d,-2372.228212d));
assertEquals("min(double)[53] ::", -2372.228212d, Math.min(-2372.228212d,-2372.228212d));
assertEquals("min(double)[54] ::", -2372.228212d, StrictMath.min(-1.2232d,-2372.228212d));
assertEquals("min(double)[55] ::", -2372.228212d, Math.min(-1.2232d,-2372.228212d));
assertEquals("min(double)[56] ::", -1.2232d, StrictMath.min(-1.2232d,0.0d));
assertEquals("min(double)[57] ::", -1.2232d, Math.min(-1.2232d,0.0d));
assertEquals("min(double)[58] ::", -1.2232d, StrictMath.min(0.0d,-1.2232d));
assertEquals("min(double)[59] ::", -1.2232d, Math.min(0.0d,-1.2232d));
assertEquals("min(double)[60] ::", -1.2232d, StrictMath.min(-1.2232d,-1.2232d));
assertEquals("min(double)[61] ::", -1.2232d, Math.min(-1.2232d,-1.2232d));
assertEquals("min(double)[62] ::", -1.2232d, StrictMath.min(0.0d,-1.2232d));
assertEquals("min(double)[63] ::", -1.2232d, Math.min(0.0d,-1.2232d));
assertEquals("min(double)[64] ::", 0.0d, StrictMath.min(0.0d,2.43223d));
assertEquals("min(double)[65] ::", 0.0d, Math.min(0.0d,2.43223d));
assertEquals("min(double)[66] ::", 0.0d, StrictMath.min(2.43223d,0.0d));
assertEquals("min(double)[67] ::", 0.0d, Math.min(2.43223d,0.0d));
assertEquals("min(double)[68] ::", 0.0d, StrictMath.min(0.0d,0.0d));
assertEquals("min(double)[69] ::", 0.0d, Math.min(0.0d,0.0d));
assertEquals("min(double)[70] ::", 0.0d, StrictMath.min(2.43223d,0.0d));
assertEquals("min(double)[71] ::", 0.0d, Math.min(2.43223d,0.0d));
assertEquals("min(double)[72] ::", 2.43223d, StrictMath.min(2.43223d,1.82321553323566E7d));
assertEquals("min(double)[73] ::", 2.43223d, Math.min(2.43223d,1.82321553323566E7d));
assertEquals("min(double)[74] ::", 2.43223d, StrictMath.min(1.82321553323566E7d,2.43223d));
assertEquals("min(double)[75] ::", 2.43223d, Math.min(1.82321553323566E7d,2.43223d));
assertEquals("min(double)[76] ::", 2.43223d, StrictMath.min(2.43223d,2.43223d));
assertEquals("min(double)[77] ::", 2.43223d, Math.min(2.43223d,2.43223d));
assertEquals("min(double)[78] ::", 2.43223d, StrictMath.min(1.82321553323566E7d,2.43223d));
assertEquals("min(double)[79] ::", 2.43223d, Math.min(1.82321553323566E7d,2.43223d));
assertEquals("min(double)[80] ::", 4.9E-324d, StrictMath.min(1.82321553323566E7d,4.9E-324d));
assertEquals("min(double)[81] ::", 4.9E-324d, Math.min(1.82321553323566E7d,4.9E-324d));
assertEquals("min(double)[82] ::", 4.9E-324d, StrictMath.min(4.9E-324d,1.82321553323566E7d));
assertEquals("min(double)[83] ::", 4.9E-324d, Math.min(4.9E-324d,1.82321553323566E7d));
assertEquals("min(double)[84] ::", 4.9E-324d, StrictMath.min(1.82321553323566E7d,4.9E-324d));
assertEquals("min(double)[85] ::", 4.9E-324d, Math.min(1.82321553323566E7d,4.9E-324d));
assertEquals("min(double)[86] ::", 4.9E-324d, StrictMath.min(4.9E-324d,4.9E-324d));
assertEquals("min(double)[87] ::", 4.9E-324d, Math.min(4.9E-324d,4.9E-324d));
assertEquals("min(double)[88] ::", 4.9E-324d, StrictMath.min(4.9E-324d,9.9E-322d));
assertEquals("min(double)[89] ::", 4.9E-324d, Math.min(4.9E-324d,9.9E-322d));
assertEquals("min(double)[90] ::", 4.9E-324d, StrictMath.min(9.9E-322d,4.9E-324d));
assertEquals("min(double)[91] ::", 4.9E-324d, Math.min(9.9E-322d,4.9E-324d));
assertEquals("min(double)[92] ::", 4.9E-324d, StrictMath.min(4.9E-324d,4.9E-324d));
assertEquals("min(double)[93] ::", 4.9E-324d, Math.min(4.9E-324d,4.9E-324d));
assertEquals("min(double)[94] ::", 4.9E-324d, StrictMath.min(9.9E-322d,4.9E-324d));
assertEquals("min(double)[95] ::", 4.9E-324d, Math.min(9.9E-322d,4.9E-324d));
assertEquals("min(double)[96] ::", 9.9E-322d, StrictMath.min(9.9E-322d,3.595386269724631E305d));
assertEquals("min(double)[97] ::", 9.9E-322d, Math.min(9.9E-322d,3.595386269724631E305d));
assertEquals("min(double)[98] ::", 9.9E-322d, StrictMath.min(3.595386269724631E305d,9.9E-322d));
assertEquals("min(double)[99] ::", 9.9E-322d, Math.min(3.595386269724631E305d,9.9E-322d));
assertEquals("min(double)[100] ::", 9.9E-322d, StrictMath.min(9.9E-322d,9.9E-322d));
assertEquals("min(double)[101] ::", 9.9E-322d, Math.min(9.9E-322d,9.9E-322d));
assertEquals("min(double)[102] ::", 9.9E-322d, StrictMath.min(3.595386269724631E305d,9.9E-322d));
assertEquals("min(double)[103] ::", 9.9E-322d, Math.min(3.595386269724631E305d,9.9E-322d));
assertEquals("min(double)[104] ::", 3.595386269724631E305d, StrictMath.min(3.595386269724631E305d,8.988465674311578E305d));
assertEquals("min(double)[105] ::", 3.595386269724631E305d, Math.min(3.595386269724631E305d,8.988465674311578E305d));
assertEquals("min(double)[106] ::", 3.595386269724631E305d, StrictMath.min(8.988465674311578E305d,3.595386269724631E305d));
assertEquals("min(double)[107] ::", 3.595386269724631E305d, Math.min(8.988465674311578E305d,3.595386269724631E305d));
assertEquals("min(double)[108] ::", 3.595386269724631E305d, StrictMath.min(3.595386269724631E305d,3.595386269724631E305d));
assertEquals("min(double)[109] ::", 3.595386269724631E305d, Math.min(3.595386269724631E305d,3.595386269724631E305d));
assertEquals("min(double)[110] ::", 3.595386269724631E305d, StrictMath.min(8.988465674311578E305d,3.595386269724631E305d));
assertEquals("min(double)[111] ::", 3.595386269724631E305d, Math.min(8.988465674311578E305d,3.595386269724631E305d));
assertEquals("min(double)[112] ::", 8.988465674311578E305d, StrictMath.min(8.988465674311578E305d,1.7976931348623157E308d));
assertEquals("min(double)[113] ::", 8.988465674311578E305d, Math.min(8.988465674311578E305d,1.7976931348623157E308d));
assertEquals("min(double)[114] ::", 8.988465674311578E305d, StrictMath.min(1.7976931348623157E308d,8.988465674311578E305d));
assertEquals("min(double)[115] ::", 8.988465674311578E305d, Math.min(1.7976931348623157E308d,8.988465674311578E305d));
assertEquals("min(double)[116] ::", 8.988465674311578E305d, StrictMath.min(8.988465674311578E305d,8.988465674311578E305d));
assertEquals("min(double)[117] ::", 8.988465674311578E305d, Math.min(8.988465674311578E305d,8.988465674311578E305d));
assertEquals("min(double)[118] ::", 8.988465674311578E305d, StrictMath.min(1.7976931348623157E308d,8.988465674311578E305d));
assertEquals("min(double)[119] ::", 8.988465674311578E305d, Math.min(1.7976931348623157E308d,8.988465674311578E305d));
assertEquals("min(double)[120] ::", 1.7976931348623157E308d, StrictMath.min(1.7976931348623157E308d,1.7976931348623157E308d));
assertEquals("min(double)[121] ::", 1.7976931348623157E308d, Math.min(1.7976931348623157E308d,1.7976931348623157E308d));
assertEquals("min(double)[122] ::", 1.7976931348623157E308d, StrictMath.min(1.7976931348623157E308d,1.7976931348623157E308d));
assertEquals("min(double)[123] ::", 1.7976931348623157E308d, Math.min(1.7976931348623157E308d,1.7976931348623157E308d));
assertEquals("min(double)[124] ::", 1.7976931348623157E308d, StrictMath.min(1.7976931348623157E308d,1.7976931348623157E308d));
assertEquals("min(double)[125] ::", 1.7976931348623157E308d, Math.min(1.7976931348623157E308d,1.7976931348623157E308d));
assertEquals("min(double)[126] ::", 1.7976931348623157E308d, StrictMath.min(1.7976931348623157E308d,1.7976931348623157E308d));
assertEquals("min(double)[127] ::", 1.7976931348623157E308d, Math.min(1.7976931348623157E308d,1.7976931348623157E308d));
}

public void testMin_float()
{
assertEquals("min(float)[0] ::", -3.4028235E38f, StrictMath.min(-3.4028235E38f,-1.7014118E36f));
assertEquals("min(float)[1] ::", -3.4028235E38f, Math.min(-3.4028235E38f,-1.7014118E36f));
assertEquals("min(float)[2] ::", -3.4028235E38f, StrictMath.min(-1.7014118E36f,-3.4028235E38f));
assertEquals("min(float)[3] ::", -3.4028235E38f, Math.min(-1.7014118E36f,-3.4028235E38f));
assertEquals("min(float)[4] ::", -3.4028235E38f, StrictMath.min(-3.4028235E38f,-3.4028235E38f));
assertEquals("min(float)[5] ::", -3.4028235E38f, Math.min(-3.4028235E38f,-3.4028235E38f));
assertEquals("min(float)[6] ::", -3.4028235E38f, StrictMath.min(-1.7014118E36f,-3.4028235E38f));
assertEquals("min(float)[7] ::", -3.4028235E38f, Math.min(-1.7014118E36f,-3.4028235E38f));
assertEquals("min(float)[8] ::", -1.7014118E36f, StrictMath.min(-1.7014118E36f,-6.805647E35f));
assertEquals("min(float)[9] ::", -1.7014118E36f, Math.min(-1.7014118E36f,-6.805647E35f));
assertEquals("min(float)[10] ::", -1.7014118E36f, StrictMath.min(-6.805647E35f,-1.7014118E36f));
assertEquals("min(float)[11] ::", -1.7014118E36f, Math.min(-6.805647E35f,-1.7014118E36f));
assertEquals("min(float)[12] ::", -1.7014118E36f, StrictMath.min(-1.7014118E36f,-1.7014118E36f));
assertEquals("min(float)[13] ::", -1.7014118E36f, Math.min(-1.7014118E36f,-1.7014118E36f));
assertEquals("min(float)[14] ::", -1.7014118E36f, StrictMath.min(-6.805647E35f,-1.7014118E36f));
assertEquals("min(float)[15] ::", -1.7014118E36f, Math.min(-6.805647E35f,-1.7014118E36f));
assertEquals("min(float)[16] ::", -6.805647E35f, StrictMath.min(-6.805647E35f,-2.803E-42f));
assertEquals("min(float)[17] ::", -6.805647E35f, Math.min(-6.805647E35f,-2.803E-42f));
assertEquals("min(float)[18] ::", -6.805647E35f, StrictMath.min(-2.803E-42f,-6.805647E35f));
assertEquals("min(float)[19] ::", -6.805647E35f, Math.min(-2.803E-42f,-6.805647E35f));
assertEquals("min(float)[20] ::", -6.805647E35f, StrictMath.min(-6.805647E35f,-6.805647E35f));
assertEquals("min(float)[21] ::", -6.805647E35f, Math.min(-6.805647E35f,-6.805647E35f));
assertEquals("min(float)[22] ::", -6.805647E35f, StrictMath.min(-2.803E-42f,-6.805647E35f));
assertEquals("min(float)[23] ::", -6.805647E35f, Math.min(-2.803E-42f,-6.805647E35f));
assertEquals("min(float)[24] ::", -2.803E-42f, StrictMath.min(-2.803E-42f,-1.401E-42f));
assertEquals("min(float)[25] ::", -2.803E-42f, Math.min(-2.803E-42f,-1.401E-42f));
assertEquals("min(float)[26] ::", -2.803E-42f, StrictMath.min(-1.401E-42f,-2.803E-42f));
assertEquals("min(float)[27] ::", -2.803E-42f, Math.min(-1.401E-42f,-2.803E-42f));
assertEquals("min(float)[28] ::", -2.803E-42f, StrictMath.min(-2.803E-42f,-2.803E-42f));
assertEquals("min(float)[29] ::", -2.803E-42f, Math.min(-2.803E-42f,-2.803E-42f));
assertEquals("min(float)[30] ::", -2.803E-42f, StrictMath.min(-1.401E-42f,-2.803E-42f));
assertEquals("min(float)[31] ::", -2.803E-42f, Math.min(-1.401E-42f,-2.803E-42f));
assertEquals("min(float)[32] ::", -3.2948748E7f, StrictMath.min(-1.401E-42f,-3.2948748E7f));
assertEquals("min(float)[33] ::", -3.2948748E7f, Math.min(-1.401E-42f,-3.2948748E7f));
assertEquals("min(float)[34] ::", -3.2948748E7f, StrictMath.min(-3.2948748E7f,-1.401E-42f));
assertEquals("min(float)[35] ::", -3.2948748E7f, Math.min(-3.2948748E7f,-1.401E-42f));
assertEquals("min(float)[36] ::", -3.2948748E7f, StrictMath.min(-1.401E-42f,-3.2948748E7f));
assertEquals("min(float)[37] ::", -3.2948748E7f, Math.min(-1.401E-42f,-3.2948748E7f));
assertEquals("min(float)[38] ::", -3.2948748E7f, StrictMath.min(-3.2948748E7f,-3.2948748E7f));
assertEquals("min(float)[39] ::", -3.2948748E7f, Math.min(-3.2948748E7f,-3.2948748E7f));
assertEquals("min(float)[40] ::", -3.2948748E7f, StrictMath.min(-3.2948748E7f,-9.0E-9f));
assertEquals("min(float)[41] ::", -3.2948748E7f, Math.min(-3.2948748E7f,-9.0E-9f));
assertEquals("min(float)[42] ::", -3.2948748E7f, StrictMath.min(-9.0E-9f,-3.2948748E7f));
assertEquals("min(float)[43] ::", -3.2948748E7f, Math.min(-9.0E-9f,-3.2948748E7f));
assertEquals("min(float)[44] ::", -3.2948748E7f, StrictMath.min(-3.2948748E7f,-3.2948748E7f));
assertEquals("min(float)[45] ::", -3.2948748E7f, Math.min(-3.2948748E7f,-3.2948748E7f));
assertEquals("min(float)[46] ::", -3.2948748E7f, StrictMath.min(-9.0E-9f,-3.2948748E7f));
assertEquals("min(float)[47] ::", -3.2948748E7f, Math.min(-9.0E-9f,-3.2948748E7f));
assertEquals("min(float)[48] ::", -2.0E-7f, StrictMath.min(-9.0E-9f,-2.0E-7f));
assertEquals("min(float)[49] ::", -2.0E-7f, Math.min(-9.0E-9f,-2.0E-7f));
assertEquals("min(float)[50] ::", -2.0E-7f, StrictMath.min(-2.0E-7f,-9.0E-9f));
assertEquals("min(float)[51] ::", -2.0E-7f, Math.min(-2.0E-7f,-9.0E-9f));
assertEquals("min(float)[52] ::", -2.0E-7f, StrictMath.min(-9.0E-9f,-2.0E-7f));
assertEquals("min(float)[53] ::", -2.0E-7f, Math.min(-9.0E-9f,-2.0E-7f));
assertEquals("min(float)[54] ::", -2.0E-7f, StrictMath.min(-2.0E-7f,-2.0E-7f));
assertEquals("min(float)[55] ::", -2.0E-7f, Math.min(-2.0E-7f,-2.0E-7f));
assertEquals("min(float)[56] ::", -2.0E-7f, StrictMath.min(-2.0E-7f,0.0f));
assertEquals("min(float)[57] ::", -2.0E-7f, Math.min(-2.0E-7f,0.0f));
assertEquals("min(float)[58] ::", -2.0E-7f, StrictMath.min(0.0f,-2.0E-7f));
assertEquals("min(float)[59] ::", -2.0E-7f, Math.min(0.0f,-2.0E-7f));
assertEquals("min(float)[60] ::", -2.0E-7f, StrictMath.min(-2.0E-7f,-2.0E-7f));
assertEquals("min(float)[61] ::", -2.0E-7f, Math.min(-2.0E-7f,-2.0E-7f));
assertEquals("min(float)[62] ::", -2.0E-7f, StrictMath.min(0.0f,-2.0E-7f));
assertEquals("min(float)[63] ::", -2.0E-7f, Math.min(0.0f,-2.0E-7f));
assertEquals("min(float)[64] ::", 0.0f, StrictMath.min(0.0f,0.45623234f));
assertEquals("min(float)[65] ::", 0.0f, Math.min(0.0f,0.45623234f));
assertEquals("min(float)[66] ::", 0.0f, StrictMath.min(0.45623234f,0.0f));
assertEquals("min(float)[67] ::", 0.0f, Math.min(0.45623234f,0.0f));
assertEquals("min(float)[68] ::", 0.0f, StrictMath.min(0.0f,0.0f));
assertEquals("min(float)[69] ::", 0.0f, Math.min(0.0f,0.0f));
assertEquals("min(float)[70] ::", 0.0f, StrictMath.min(0.45623234f,0.0f));
assertEquals("min(float)[71] ::", 0.0f, Math.min(0.45623234f,0.0f));
assertEquals("min(float)[72] ::", 0.45623234f, StrictMath.min(0.45623234f,1224257.2f));
assertEquals("min(float)[73] ::", 0.45623234f, Math.min(0.45623234f,1224257.2f));
assertEquals("min(float)[74] ::", 0.45623234f, StrictMath.min(1224257.2f,0.45623234f));
assertEquals("min(float)[75] ::", 0.45623234f, Math.min(1224257.2f,0.45623234f));
assertEquals("min(float)[76] ::", 0.45623234f, StrictMath.min(0.45623234f,0.45623234f));
assertEquals("min(float)[77] ::", 0.45623234f, Math.min(0.45623234f,0.45623234f));
assertEquals("min(float)[78] ::", 0.45623234f, StrictMath.min(1224257.2f,0.45623234f));
assertEquals("min(float)[79] ::", 0.45623234f, Math.min(1224257.2f,0.45623234f));
assertEquals("min(float)[80] ::", 1224257.2f, StrictMath.min(1224257.2f,9.9998321E9f));
assertEquals("min(float)[81] ::", 1224257.2f, Math.min(1224257.2f,9.9998321E9f));
assertEquals("min(float)[82] ::", 1224257.2f, StrictMath.min(9.9998321E9f,1224257.2f));
assertEquals("min(float)[83] ::", 1224257.2f, Math.min(9.9998321E9f,1224257.2f));
assertEquals("min(float)[84] ::", 1224257.2f, StrictMath.min(1224257.2f,1224257.2f));
assertEquals("min(float)[85] ::", 1224257.2f, Math.min(1224257.2f,1224257.2f));
assertEquals("min(float)[86] ::", 1224257.2f, StrictMath.min(9.9998321E9f,1224257.2f));
assertEquals("min(float)[87] ::", 1224257.2f, Math.min(9.9998321E9f,1224257.2f));
assertEquals("min(float)[88] ::", 1.4E-45f, StrictMath.min(9.9998321E9f,1.4E-45f));
assertEquals("min(float)[89] ::", 1.4E-45f, Math.min(9.9998321E9f,1.4E-45f));
assertEquals("min(float)[90] ::", 1.4E-45f, StrictMath.min(1.4E-45f,9.9998321E9f));
assertEquals("min(float)[91] ::", 1.4E-45f, Math.min(1.4E-45f,9.9998321E9f));
assertEquals("min(float)[92] ::", 1.4E-45f, StrictMath.min(9.9998321E9f,1.4E-45f));
assertEquals("min(float)[93] ::", 1.4E-45f, Math.min(9.9998321E9f,1.4E-45f));
assertEquals("min(float)[94] ::", 1.4E-45f, StrictMath.min(1.4E-45f,1.4E-45f));
assertEquals("min(float)[95] ::", 1.4E-45f, Math.min(1.4E-45f,1.4E-45f));
assertEquals("min(float)[96] ::", 1.4E-45f, StrictMath.min(1.4E-45f,2.8E-43f));
assertEquals("min(float)[97] ::", 1.4E-45f, Math.min(1.4E-45f,2.8E-43f));
assertEquals("min(float)[98] ::", 1.4E-45f, StrictMath.min(2.8E-43f,1.4E-45f));
assertEquals("min(float)[99] ::", 1.4E-45f, Math.min(2.8E-43f,1.4E-45f));
assertEquals("min(float)[100] ::", 1.4E-45f, StrictMath.min(1.4E-45f,1.4E-45f));
assertEquals("min(float)[101] ::", 1.4E-45f, Math.min(1.4E-45f,1.4E-45f));
assertEquals("min(float)[102] ::", 1.4E-45f, StrictMath.min(2.8E-43f,1.4E-45f));
assertEquals("min(float)[103] ::", 1.4E-45f, Math.min(2.8E-43f,1.4E-45f));
assertEquals("min(float)[104] ::", 2.8E-43f, StrictMath.min(2.8E-43f,6.805647E35f));
assertEquals("min(float)[105] ::", 2.8E-43f, Math.min(2.8E-43f,6.805647E35f));
assertEquals("min(float)[106] ::", 2.8E-43f, StrictMath.min(6.805647E35f,2.8E-43f));
assertEquals("min(float)[107] ::", 2.8E-43f, Math.min(6.805647E35f,2.8E-43f));
assertEquals("min(float)[108] ::", 2.8E-43f, StrictMath.min(2.8E-43f,2.8E-43f));
assertEquals("min(float)[109] ::", 2.8E-43f, Math.min(2.8E-43f,2.8E-43f));
assertEquals("min(float)[110] ::", 2.8E-43f, StrictMath.min(6.805647E35f,2.8E-43f));
assertEquals("min(float)[111] ::", 2.8E-43f, Math.min(6.805647E35f,2.8E-43f));
assertEquals("min(float)[112] ::", 6.805647E35f, StrictMath.min(6.805647E35f,1.7014118E36f));
assertEquals("min(float)[113] ::", 6.805647E35f, Math.min(6.805647E35f,1.7014118E36f));
assertEquals("min(float)[114] ::", 6.805647E35f, StrictMath.min(1.7014118E36f,6.805647E35f));
assertEquals("min(float)[115] ::", 6.805647E35f, Math.min(1.7014118E36f,6.805647E35f));
assertEquals("min(float)[116] ::", 6.805647E35f, StrictMath.min(6.805647E35f,6.805647E35f));
assertEquals("min(float)[117] ::", 6.805647E35f, Math.min(6.805647E35f,6.805647E35f));
assertEquals("min(float)[118] ::", 6.805647E35f, StrictMath.min(1.7014118E36f,6.805647E35f));
assertEquals("min(float)[119] ::", 6.805647E35f, Math.min(1.7014118E36f,6.805647E35f));
assertEquals("min(float)[120] ::", 1.7014118E36f, StrictMath.min(1.7014118E36f,3.4028235E38f));
assertEquals("min(float)[121] ::", 1.7014118E36f, Math.min(1.7014118E36f,3.4028235E38f));
assertEquals("min(float)[122] ::", 1.7014118E36f, StrictMath.min(3.4028235E38f,1.7014118E36f));
assertEquals("min(float)[123] ::", 1.7014118E36f, Math.min(3.4028235E38f,1.7014118E36f));
assertEquals("min(float)[124] ::", 1.7014118E36f, StrictMath.min(1.7014118E36f,1.7014118E36f));
assertEquals("min(float)[125] ::", 1.7014118E36f, Math.min(1.7014118E36f,1.7014118E36f));
assertEquals("min(float)[126] ::", 1.7014118E36f, StrictMath.min(3.4028235E38f,1.7014118E36f));
assertEquals("min(float)[127] ::", 1.7014118E36f, Math.min(3.4028235E38f,1.7014118E36f));
assertEquals("min(float)[128] ::", 3.4028235E38f, StrictMath.min(3.4028235E38f,3.4028235E38f));
assertEquals("min(float)[129] ::", 3.4028235E38f, Math.min(3.4028235E38f,3.4028235E38f));
assertEquals("min(float)[130] ::", 3.4028235E38f, StrictMath.min(3.4028235E38f,3.4028235E38f));
assertEquals("min(float)[131] ::", 3.4028235E38f, Math.min(3.4028235E38f,3.4028235E38f));
assertEquals("min(float)[132] ::", 3.4028235E38f, StrictMath.min(3.4028235E38f,3.4028235E38f));
assertEquals("min(float)[133] ::", 3.4028235E38f, Math.min(3.4028235E38f,3.4028235E38f));
assertEquals("min(float)[134] ::", 3.4028235E38f, StrictMath.min(3.4028235E38f,3.4028235E38f));
assertEquals("min(float)[135] ::", 3.4028235E38f, Math.min(3.4028235E38f,3.4028235E38f));
}

public void testMin_long()
{
assertEquals("min(long)[0] ::", -9223372036854775808l, StrictMath.min(-9223372036854775808l,-9223372036854775807l));
assertEquals("min(long)[1] ::", -9223372036854775808l, Math.min(-9223372036854775808l,-9223372036854775807l));
assertEquals("min(long)[2] ::", -9223372036854775808l, StrictMath.min(-9223372036854775807l,-9223372036854775808l));
assertEquals("min(long)[3] ::", -9223372036854775808l, Math.min(-9223372036854775807l,-9223372036854775808l));
assertEquals("min(long)[4] ::", -9223372036854775808l, StrictMath.min(-9223372036854775808l,-9223372036854775808l));
assertEquals("min(long)[5] ::", -9223372036854775808l, Math.min(-9223372036854775808l,-9223372036854775808l));
assertEquals("min(long)[6] ::", -9223372036854775808l, StrictMath.min(-9223372036854775807l,-9223372036854775808l));
assertEquals("min(long)[7] ::", -9223372036854775808l, Math.min(-9223372036854775807l,-9223372036854775808l));
assertEquals("min(long)[8] ::", -9223372036854775807l, StrictMath.min(-9223372036854775807l,-9223372036854775806l));
assertEquals("min(long)[9] ::", -9223372036854775807l, Math.min(-9223372036854775807l,-9223372036854775806l));
assertEquals("min(long)[10] ::", -9223372036854775807l, StrictMath.min(-9223372036854775806l,-9223372036854775807l));
assertEquals("min(long)[11] ::", -9223372036854775807l, Math.min(-9223372036854775806l,-9223372036854775807l));
assertEquals("min(long)[12] ::", -9223372036854775807l, StrictMath.min(-9223372036854775807l,-9223372036854775807l));
assertEquals("min(long)[13] ::", -9223372036854775807l, Math.min(-9223372036854775807l,-9223372036854775807l));
assertEquals("min(long)[14] ::", -9223372036854775807l, StrictMath.min(-9223372036854775806l,-9223372036854775807l));
assertEquals("min(long)[15] ::", -9223372036854775807l, Math.min(-9223372036854775806l,-9223372036854775807l));
assertEquals("min(long)[16] ::", -9223372036854775806l, StrictMath.min(-9223372036854775806l,-332342l));
assertEquals("min(long)[17] ::", -9223372036854775806l, Math.min(-9223372036854775806l,-332342l));
assertEquals("min(long)[18] ::", -9223372036854775806l, StrictMath.min(-332342l,-9223372036854775806l));
assertEquals("min(long)[19] ::", -9223372036854775806l, Math.min(-332342l,-9223372036854775806l));
assertEquals("min(long)[20] ::", -9223372036854775806l, StrictMath.min(-9223372036854775806l,-9223372036854775806l));
assertEquals("min(long)[21] ::", -9223372036854775806l, Math.min(-9223372036854775806l,-9223372036854775806l));
assertEquals("min(long)[22] ::", -9223372036854775806l, StrictMath.min(-332342l,-9223372036854775806l));
assertEquals("min(long)[23] ::", -9223372036854775806l, Math.min(-332342l,-9223372036854775806l));
assertEquals("min(long)[24] ::", -332342l, StrictMath.min(-332342l,-2l));
assertEquals("min(long)[25] ::", -332342l, Math.min(-332342l,-2l));
assertEquals("min(long)[26] ::", -332342l, StrictMath.min(-2l,-332342l));
assertEquals("min(long)[27] ::", -332342l, Math.min(-2l,-332342l));
assertEquals("min(long)[28] ::", -332342l, StrictMath.min(-332342l,-332342l));
assertEquals("min(long)[29] ::", -332342l, Math.min(-332342l,-332342l));
assertEquals("min(long)[30] ::", -332342l, StrictMath.min(-2l,-332342l));
assertEquals("min(long)[31] ::", -332342l, Math.min(-2l,-332342l));
assertEquals("min(long)[32] ::", -2l, StrictMath.min(-2l,-1l));
assertEquals("min(long)[33] ::", -2l, Math.min(-2l,-1l));
assertEquals("min(long)[34] ::", -2l, StrictMath.min(-1l,-2l));
assertEquals("min(long)[35] ::", -2l, Math.min(-1l,-2l));
assertEquals("min(long)[36] ::", -2l, StrictMath.min(-2l,-2l));
assertEquals("min(long)[37] ::", -2l, Math.min(-2l,-2l));
assertEquals("min(long)[38] ::", -2l, StrictMath.min(-1l,-2l));
assertEquals("min(long)[39] ::", -2l, Math.min(-1l,-2l));
assertEquals("min(long)[40] ::", -1l, StrictMath.min(-1l,0l));
assertEquals("min(long)[41] ::", -1l, Math.min(-1l,0l));
assertEquals("min(long)[42] ::", -1l, StrictMath.min(0l,-1l));
assertEquals("min(long)[43] ::", -1l, Math.min(0l,-1l));
assertEquals("min(long)[44] ::", -1l, StrictMath.min(-1l,-1l));
assertEquals("min(long)[45] ::", -1l, Math.min(-1l,-1l));
assertEquals("min(long)[46] ::", -1l, StrictMath.min(0l,-1l));
assertEquals("min(long)[47] ::", -1l, Math.min(0l,-1l));
assertEquals("min(long)[48] ::", 0l, StrictMath.min(0l,1l));
assertEquals("min(long)[49] ::", 0l, Math.min(0l,1l));
assertEquals("min(long)[50] ::", 0l, StrictMath.min(1l,0l));
assertEquals("min(long)[51] ::", 0l, Math.min(1l,0l));
assertEquals("min(long)[52] ::", 0l, StrictMath.min(0l,0l));
assertEquals("min(long)[53] ::", 0l, Math.min(0l,0l));
assertEquals("min(long)[54] ::", 0l, StrictMath.min(1l,0l));
assertEquals("min(long)[55] ::", 0l, Math.min(1l,0l));
assertEquals("min(long)[56] ::", 1l, StrictMath.min(1l,2l));
assertEquals("min(long)[57] ::", 1l, Math.min(1l,2l));
assertEquals("min(long)[58] ::", 1l, StrictMath.min(2l,1l));
assertEquals("min(long)[59] ::", 1l, Math.min(2l,1l));
assertEquals("min(long)[60] ::", 1l, StrictMath.min(1l,1l));
assertEquals("min(long)[61] ::", 1l, Math.min(1l,1l));
assertEquals("min(long)[62] ::", 1l, StrictMath.min(2l,1l));
assertEquals("min(long)[63] ::", 1l, Math.min(2l,1l));
assertEquals("min(long)[64] ::", 2l, StrictMath.min(2l,348238234234l));
assertEquals("min(long)[65] ::", 2l, Math.min(2l,348238234234l));
assertEquals("min(long)[66] ::", 2l, StrictMath.min(348238234234l,2l));
assertEquals("min(long)[67] ::", 2l, Math.min(348238234234l,2l));
assertEquals("min(long)[68] ::", 2l, StrictMath.min(2l,2l));
assertEquals("min(long)[69] ::", 2l, Math.min(2l,2l));
assertEquals("min(long)[70] ::", 2l, StrictMath.min(348238234234l,2l));
assertEquals("min(long)[71] ::", 2l, Math.min(348238234234l,2l));
assertEquals("min(long)[72] ::", 348238234234l, StrictMath.min(348238234234l,9223372036854775805l));
assertEquals("min(long)[73] ::", 348238234234l, Math.min(348238234234l,9223372036854775805l));
assertEquals("min(long)[74] ::", 348238234234l, StrictMath.min(9223372036854775805l,348238234234l));
assertEquals("min(long)[75] ::", 348238234234l, Math.min(9223372036854775805l,348238234234l));
assertEquals("min(long)[76] ::", 348238234234l, StrictMath.min(348238234234l,348238234234l));
assertEquals("min(long)[77] ::", 348238234234l, Math.min(348238234234l,348238234234l));
assertEquals("min(long)[78] ::", 348238234234l, StrictMath.min(9223372036854775805l,348238234234l));
assertEquals("min(long)[79] ::", 348238234234l, Math.min(9223372036854775805l,348238234234l));
assertEquals("min(long)[80] ::", 9223372036854775805l, StrictMath.min(9223372036854775805l,9223372036854775806l));
assertEquals("min(long)[81] ::", 9223372036854775805l, Math.min(9223372036854775805l,9223372036854775806l));
assertEquals("min(long)[82] ::", 9223372036854775805l, StrictMath.min(9223372036854775806l,9223372036854775805l));
assertEquals("min(long)[83] ::", 9223372036854775805l, Math.min(9223372036854775806l,9223372036854775805l));
assertEquals("min(long)[84] ::", 9223372036854775805l, StrictMath.min(9223372036854775805l,9223372036854775805l));
assertEquals("min(long)[85] ::", 9223372036854775805l, Math.min(9223372036854775805l,9223372036854775805l));
assertEquals("min(long)[86] ::", 9223372036854775805l, StrictMath.min(9223372036854775806l,9223372036854775805l));
assertEquals("min(long)[87] ::", 9223372036854775805l, Math.min(9223372036854775806l,9223372036854775805l));
assertEquals("min(long)[88] ::", 9223372036854775806l, StrictMath.min(9223372036854775806l,9223372036854775807l));
assertEquals("min(long)[89] ::", 9223372036854775806l, Math.min(9223372036854775806l,9223372036854775807l));
assertEquals("min(long)[90] ::", 9223372036854775806l, StrictMath.min(9223372036854775807l,9223372036854775806l));
assertEquals("min(long)[91] ::", 9223372036854775806l, Math.min(9223372036854775807l,9223372036854775806l));
assertEquals("min(long)[92] ::", 9223372036854775806l, StrictMath.min(9223372036854775806l,9223372036854775806l));
assertEquals("min(long)[93] ::", 9223372036854775806l, Math.min(9223372036854775806l,9223372036854775806l));
assertEquals("min(long)[94] ::", 9223372036854775806l, StrictMath.min(9223372036854775807l,9223372036854775806l));
assertEquals("min(long)[95] ::", 9223372036854775806l, Math.min(9223372036854775807l,9223372036854775806l));
}

public void testMin_int()
{
assertEquals("min(int)[0] ::", -2147483648, StrictMath.min(-2147483648,-2147483647));
assertEquals("min(int)[1] ::", -2147483648, Math.min(-2147483648,-2147483647));
assertEquals("min(int)[2] ::", -2147483648, StrictMath.min(-2147483647,-2147483648));
assertEquals("min(int)[3] ::", -2147483648, Math.min(-2147483647,-2147483648));
assertEquals("min(int)[4] ::", -2147483648, StrictMath.min(-2147483648,-2147483648));
assertEquals("min(int)[5] ::", -2147483648, Math.min(-2147483648,-2147483648));
assertEquals("min(int)[6] ::", -2147483648, StrictMath.min(-2147483647,-2147483648));
assertEquals("min(int)[7] ::", -2147483648, Math.min(-2147483647,-2147483648));
assertEquals("min(int)[8] ::", -2147483647, StrictMath.min(-2147483647,-2147483646));
assertEquals("min(int)[9] ::", -2147483647, Math.min(-2147483647,-2147483646));
assertEquals("min(int)[10] ::", -2147483647, StrictMath.min(-2147483646,-2147483647));
assertEquals("min(int)[11] ::", -2147483647, Math.min(-2147483646,-2147483647));
assertEquals("min(int)[12] ::", -2147483647, StrictMath.min(-2147483647,-2147483647));
assertEquals("min(int)[13] ::", -2147483647, Math.min(-2147483647,-2147483647));
assertEquals("min(int)[14] ::", -2147483647, StrictMath.min(-2147483646,-2147483647));
assertEquals("min(int)[15] ::", -2147483647, Math.min(-2147483646,-2147483647));
assertEquals("min(int)[16] ::", -2147483646, StrictMath.min(-2147483646,-42218));
assertEquals("min(int)[17] ::", -2147483646, Math.min(-2147483646,-42218));
assertEquals("min(int)[18] ::", -2147483646, StrictMath.min(-42218,-2147483646));
assertEquals("min(int)[19] ::", -2147483646, Math.min(-42218,-2147483646));
assertEquals("min(int)[20] ::", -2147483646, StrictMath.min(-2147483646,-2147483646));
assertEquals("min(int)[21] ::", -2147483646, Math.min(-2147483646,-2147483646));
assertEquals("min(int)[22] ::", -2147483646, StrictMath.min(-42218,-2147483646));
assertEquals("min(int)[23] ::", -2147483646, Math.min(-42218,-2147483646));
assertEquals("min(int)[24] ::", -42218, StrictMath.min(-42218,-2));
assertEquals("min(int)[25] ::", -42218, Math.min(-42218,-2));
assertEquals("min(int)[26] ::", -42218, StrictMath.min(-2,-42218));
assertEquals("min(int)[27] ::", -42218, Math.min(-2,-42218));
assertEquals("min(int)[28] ::", -42218, StrictMath.min(-42218,-42218));
assertEquals("min(int)[29] ::", -42218, Math.min(-42218,-42218));
assertEquals("min(int)[30] ::", -42218, StrictMath.min(-2,-42218));
assertEquals("min(int)[31] ::", -42218, Math.min(-2,-42218));
assertEquals("min(int)[32] ::", -2, StrictMath.min(-2,-1));
assertEquals("min(int)[33] ::", -2, Math.min(-2,-1));
assertEquals("min(int)[34] ::", -2, StrictMath.min(-1,-2));
assertEquals("min(int)[35] ::", -2, Math.min(-1,-2));
assertEquals("min(int)[36] ::", -2, StrictMath.min(-2,-2));
assertEquals("min(int)[37] ::", -2, Math.min(-2,-2));
assertEquals("min(int)[38] ::", -2, StrictMath.min(-1,-2));
assertEquals("min(int)[39] ::", -2, Math.min(-1,-2));
assertEquals("min(int)[40] ::", -1, StrictMath.min(-1,0));
assertEquals("min(int)[41] ::", -1, Math.min(-1,0));
assertEquals("min(int)[42] ::", -1, StrictMath.min(0,-1));
assertEquals("min(int)[43] ::", -1, Math.min(0,-1));
assertEquals("min(int)[44] ::", -1, StrictMath.min(-1,-1));
assertEquals("min(int)[45] ::", -1, Math.min(-1,-1));
assertEquals("min(int)[46] ::", -1, StrictMath.min(0,-1));
assertEquals("min(int)[47] ::", -1, Math.min(0,-1));
assertEquals("min(int)[48] ::", 0, StrictMath.min(0,1));
assertEquals("min(int)[49] ::", 0, Math.min(0,1));
assertEquals("min(int)[50] ::", 0, StrictMath.min(1,0));
assertEquals("min(int)[51] ::", 0, Math.min(1,0));
assertEquals("min(int)[52] ::", 0, StrictMath.min(0,0));
assertEquals("min(int)[53] ::", 0, Math.min(0,0));
assertEquals("min(int)[54] ::", 0, StrictMath.min(1,0));
assertEquals("min(int)[55] ::", 0, Math.min(1,0));
assertEquals("min(int)[56] ::", 1, StrictMath.min(1,2));
assertEquals("min(int)[57] ::", 1, Math.min(1,2));
assertEquals("min(int)[58] ::", 1, StrictMath.min(2,1));
assertEquals("min(int)[59] ::", 1, Math.min(2,1));
assertEquals("min(int)[60] ::", 1, StrictMath.min(1,1));
assertEquals("min(int)[61] ::", 1, Math.min(1,1));
assertEquals("min(int)[62] ::", 1, StrictMath.min(2,1));
assertEquals("min(int)[63] ::", 1, Math.min(2,1));
assertEquals("min(int)[64] ::", 2, StrictMath.min(2,892389));
assertEquals("min(int)[65] ::", 2, Math.min(2,892389));
assertEquals("min(int)[66] ::", 2, StrictMath.min(892389,2));
assertEquals("min(int)[67] ::", 2, Math.min(892389,2));
assertEquals("min(int)[68] ::", 2, StrictMath.min(2,2));
assertEquals("min(int)[69] ::", 2, Math.min(2,2));
assertEquals("min(int)[70] ::", 2, StrictMath.min(892389,2));
assertEquals("min(int)[71] ::", 2, Math.min(892389,2));
assertEquals("min(int)[72] ::", 892389, StrictMath.min(892389,2147483645));
assertEquals("min(int)[73] ::", 892389, Math.min(892389,2147483645));
assertEquals("min(int)[74] ::", 892389, StrictMath.min(2147483645,892389));
assertEquals("min(int)[75] ::", 892389, Math.min(2147483645,892389));
assertEquals("min(int)[76] ::", 892389, StrictMath.min(892389,892389));
assertEquals("min(int)[77] ::", 892389, Math.min(892389,892389));
assertEquals("min(int)[78] ::", 892389, StrictMath.min(2147483645,892389));
assertEquals("min(int)[79] ::", 892389, Math.min(2147483645,892389));
assertEquals("min(int)[80] ::", 2147483645, StrictMath.min(2147483645,2147483646));
assertEquals("min(int)[81] ::", 2147483645, Math.min(2147483645,2147483646));
assertEquals("min(int)[82] ::", 2147483645, StrictMath.min(2147483646,2147483645));
assertEquals("min(int)[83] ::", 2147483645, Math.min(2147483646,2147483645));
assertEquals("min(int)[84] ::", 2147483645, StrictMath.min(2147483645,2147483645));
assertEquals("min(int)[85] ::", 2147483645, Math.min(2147483645,2147483645));
assertEquals("min(int)[86] ::", 2147483645, StrictMath.min(2147483646,2147483645));
assertEquals("min(int)[87] ::", 2147483645, Math.min(2147483646,2147483645));
assertEquals("min(int)[88] ::", 2147483646, StrictMath.min(2147483646,2147483647));
assertEquals("min(int)[89] ::", 2147483646, Math.min(2147483646,2147483647));
assertEquals("min(int)[90] ::", 2147483646, StrictMath.min(2147483647,2147483646));
assertEquals("min(int)[91] ::", 2147483646, Math.min(2147483647,2147483646));
assertEquals("min(int)[92] ::", 2147483646, StrictMath.min(2147483646,2147483646));
assertEquals("min(int)[93] ::", 2147483646, Math.min(2147483646,2147483646));
assertEquals("min(int)[94] ::", 2147483646, StrictMath.min(2147483647,2147483646));
assertEquals("min(int)[95] ::", 2147483646, Math.min(2147483647,2147483646));
}

public void testNextAfter_double()
{
assertEquals("nextAfter(double,double)[0] ::", (double)-1.7976931348623155E308, StrictMath.nextAfter(-Double.MAX_VALUE,+0.0D));
assertTrue("nextAfter(double,double)[1] ::", -1.7976931348623157E308 <= Math.nextAfter(-Double.MAX_VALUE,+0.0D) && -1.7976931348623153E308 >= Math.nextAfter(-Double.MAX_VALUE,+0.0D));
assertEquals("nextAfter(double,double)[2] ::", (double)-1.7976931348623155E308, StrictMath.nextAfter(-Double.MAX_VALUE,+0.0001D));
assertTrue("nextAfter(double,double)[3] ::", -1.7976931348623157E308 <= Math.nextAfter(-Double.MAX_VALUE,+0.0001D) && -1.7976931348623153E308 >= Math.nextAfter(-Double.MAX_VALUE,+0.0001D));
assertEquals("nextAfter(double,double)[4] ::", (double)-1.7976931348623155E308, StrictMath.nextAfter(-Double.MAX_VALUE,+1.0D));
assertTrue("nextAfter(double,double)[5] ::", -1.7976931348623157E308 <= Math.nextAfter(-Double.MAX_VALUE,+1.0D) && -1.7976931348623153E308 >= Math.nextAfter(-Double.MAX_VALUE,+1.0D));
assertEquals("nextAfter(double,double)[6] ::", (double)-1.7976931348623155E308, StrictMath.nextAfter(-Double.MAX_VALUE,+10.0D));
assertTrue("nextAfter(double,double)[7] ::", -1.7976931348623157E308 <= Math.nextAfter(-Double.MAX_VALUE,+10.0D) && -1.7976931348623153E308 >= Math.nextAfter(-Double.MAX_VALUE,+10.0D));
assertEquals("nextAfter(double,double)[8] ::", (double)-1.7976931348623155E308, StrictMath.nextAfter(-Double.MAX_VALUE,+3327.191D));
assertTrue("nextAfter(double,double)[9] ::", -1.7976931348623157E308 <= Math.nextAfter(-Double.MAX_VALUE,+3327.191D) && -1.7976931348623153E308 >= Math.nextAfter(-Double.MAX_VALUE,+3327.191D));
assertEquals("nextAfter(double,double)[10] ::", (double)-1.7976931348623155E308, StrictMath.nextAfter(-Double.MAX_VALUE,-0.0D));
assertTrue("nextAfter(double,double)[11] ::", -1.7976931348623157E308 <= Math.nextAfter(-Double.MAX_VALUE,-0.0D) && -1.7976931348623153E308 >= Math.nextAfter(-Double.MAX_VALUE,-0.0D));
assertEquals("nextAfter(double,double)[12] ::", (double)-1.7976931348623155E308, StrictMath.nextAfter(-Double.MAX_VALUE,-0.0001D));
assertTrue("nextAfter(double,double)[13] ::", -1.7976931348623157E308 <= Math.nextAfter(-Double.MAX_VALUE,-0.0001D) && -1.7976931348623153E308 >= Math.nextAfter(-Double.MAX_VALUE,-0.0001D));
assertEquals("nextAfter(double,double)[14] ::", (double)-1.7976931348623155E308, StrictMath.nextAfter(-Double.MAX_VALUE,-1.0D));
assertTrue("nextAfter(double,double)[15] ::", -1.7976931348623157E308 <= Math.nextAfter(-Double.MAX_VALUE,-1.0D) && -1.7976931348623153E308 >= Math.nextAfter(-Double.MAX_VALUE,-1.0D));
assertEquals("nextAfter(double,double)[16] ::", (double)-1.7976931348623155E308, StrictMath.nextAfter(-Double.MAX_VALUE,-10.0D));
assertTrue("nextAfter(double,double)[17] ::", -1.7976931348623157E308 <= Math.nextAfter(-Double.MAX_VALUE,-10.0D) && -1.7976931348623153E308 >= Math.nextAfter(-Double.MAX_VALUE,-10.0D));
assertEquals("nextAfter(double,double)[18] ::", (double)-1.7976931348623155E308, StrictMath.nextAfter(-Double.MAX_VALUE,-3327.191D));
assertTrue("nextAfter(double,double)[19] ::", -1.7976931348623157E308 <= Math.nextAfter(-Double.MAX_VALUE,-3327.191D) && -1.7976931348623153E308 >= Math.nextAfter(-Double.MAX_VALUE,-3327.191D));
assertEquals("nextAfter(double,double)[20] ::", (double)-8.988465674311577E305, StrictMath.nextAfter((-Double.MAX_VALUE / 200),+0.0D));
assertTrue("nextAfter(double,double)[21] ::", -8.988465674311578E305 <= Math.nextAfter((-Double.MAX_VALUE / 200),+0.0D) && -8.988465674311575E305 >= Math.nextAfter((-Double.MAX_VALUE / 200),+0.0D));
assertEquals("nextAfter(double,double)[22] ::", (double)-8.988465674311577E305, StrictMath.nextAfter((-Double.MAX_VALUE / 200),+0.0001D));
assertTrue("nextAfter(double,double)[23] ::", -8.988465674311578E305 <= Math.nextAfter((-Double.MAX_VALUE / 200),+0.0001D) && -8.988465674311575E305 >= Math.nextAfter((-Double.MAX_VALUE / 200),+0.0001D));
assertEquals("nextAfter(double,double)[24] ::", (double)-8.988465674311577E305, StrictMath.nextAfter((-Double.MAX_VALUE / 200),+1.0D));
assertTrue("nextAfter(double,double)[25] ::", -8.988465674311578E305 <= Math.nextAfter((-Double.MAX_VALUE / 200),+1.0D) && -8.988465674311575E305 >= Math.nextAfter((-Double.MAX_VALUE / 200),+1.0D));
assertEquals("nextAfter(double,double)[26] ::", (double)-8.988465674311577E305, StrictMath.nextAfter((-Double.MAX_VALUE / 200),+10.0D));
assertTrue("nextAfter(double,double)[27] ::", -8.988465674311578E305 <= Math.nextAfter((-Double.MAX_VALUE / 200),+10.0D) && -8.988465674311575E305 >= Math.nextAfter((-Double.MAX_VALUE / 200),+10.0D));
assertEquals("nextAfter(double,double)[28] ::", (double)-8.988465674311577E305, StrictMath.nextAfter((-Double.MAX_VALUE / 200),+3327.191D));
assertTrue("nextAfter(double,double)[29] ::", -8.988465674311578E305 <= Math.nextAfter((-Double.MAX_VALUE / 200),+3327.191D) && -8.988465674311575E305 >= Math.nextAfter((-Double.MAX_VALUE / 200),+3327.191D));
assertEquals("nextAfter(double,double)[30] ::", (double)-8.988465674311577E305, StrictMath.nextAfter((-Double.MAX_VALUE / 200),-0.0D));
assertTrue("nextAfter(double,double)[31] ::", -8.988465674311578E305 <= Math.nextAfter((-Double.MAX_VALUE / 200),-0.0D) && -8.988465674311575E305 >= Math.nextAfter((-Double.MAX_VALUE / 200),-0.0D));
assertEquals("nextAfter(double,double)[32] ::", (double)-8.988465674311577E305, StrictMath.nextAfter((-Double.MAX_VALUE / 200),-0.0001D));
assertTrue("nextAfter(double,double)[33] ::", -8.988465674311578E305 <= Math.nextAfter((-Double.MAX_VALUE / 200),-0.0001D) && -8.988465674311575E305 >= Math.nextAfter((-Double.MAX_VALUE / 200),-0.0001D));
assertEquals("nextAfter(double,double)[34] ::", (double)-8.988465674311577E305, StrictMath.nextAfter((-Double.MAX_VALUE / 200),-1.0D));
assertTrue("nextAfter(double,double)[35] ::", -8.988465674311578E305 <= Math.nextAfter((-Double.MAX_VALUE / 200),-1.0D) && -8.988465674311575E305 >= Math.nextAfter((-Double.MAX_VALUE / 200),-1.0D));
assertEquals("nextAfter(double,double)[36] ::", (double)-8.988465674311577E305, StrictMath.nextAfter((-Double.MAX_VALUE / 200),-10.0D));
assertTrue("nextAfter(double,double)[37] ::", -8.988465674311578E305 <= Math.nextAfter((-Double.MAX_VALUE / 200),-10.0D) && -8.988465674311575E305 >= Math.nextAfter((-Double.MAX_VALUE / 200),-10.0D));
assertEquals("nextAfter(double,double)[38] ::", (double)-8.988465674311577E305, StrictMath.nextAfter((-Double.MAX_VALUE / 200),-3327.191D));
assertTrue("nextAfter(double,double)[39] ::", -8.988465674311578E305 <= Math.nextAfter((-Double.MAX_VALUE / 200),-3327.191D) && -8.988465674311575E305 >= Math.nextAfter((-Double.MAX_VALUE / 200),-3327.191D));
assertEquals("nextAfter(double,double)[40] ::", (double)-3.59538626972463E305, StrictMath.nextAfter((-Double.MAX_VALUE / 500),+0.0D));
assertTrue("nextAfter(double,double)[41] ::", -3.595386269724631E305 <= Math.nextAfter((-Double.MAX_VALUE / 500),+0.0D) && -3.5953862697246296E305 >= Math.nextAfter((-Double.MAX_VALUE / 500),+0.0D));
assertEquals("nextAfter(double,double)[42] ::", (double)-3.59538626972463E305, StrictMath.nextAfter((-Double.MAX_VALUE / 500),+0.0001D));
assertTrue("nextAfter(double,double)[43] ::", -3.595386269724631E305 <= Math.nextAfter((-Double.MAX_VALUE / 500),+0.0001D) && -3.5953862697246296E305 >= Math.nextAfter((-Double.MAX_VALUE / 500),+0.0001D));
assertEquals("nextAfter(double,double)[44] ::", (double)-3.59538626972463E305, StrictMath.nextAfter((-Double.MAX_VALUE / 500),+1.0D));
assertTrue("nextAfter(double,double)[45] ::", -3.595386269724631E305 <= Math.nextAfter((-Double.MAX_VALUE / 500),+1.0D) && -3.5953862697246296E305 >= Math.nextAfter((-Double.MAX_VALUE / 500),+1.0D));
assertEquals("nextAfter(double,double)[46] ::", (double)-3.59538626972463E305, StrictMath.nextAfter((-Double.MAX_VALUE / 500),+10.0D));
assertTrue("nextAfter(double,double)[47] ::", -3.595386269724631E305 <= Math.nextAfter((-Double.MAX_VALUE / 500),+10.0D) && -3.5953862697246296E305 >= Math.nextAfter((-Double.MAX_VALUE / 500),+10.0D));
assertEquals("nextAfter(double,double)[48] ::", (double)-3.59538626972463E305, StrictMath.nextAfter((-Double.MAX_VALUE / 500),+3327.191D));
assertTrue("nextAfter(double,double)[49] ::", -3.595386269724631E305 <= Math.nextAfter((-Double.MAX_VALUE / 500),+3327.191D) && -3.5953862697246296E305 >= Math.nextAfter((-Double.MAX_VALUE / 500),+3327.191D));
assertEquals("nextAfter(double,double)[50] ::", (double)-3.59538626972463E305, StrictMath.nextAfter((-Double.MAX_VALUE / 500),-0.0D));
assertTrue("nextAfter(double,double)[51] ::", -3.595386269724631E305 <= Math.nextAfter((-Double.MAX_VALUE / 500),-0.0D) && -3.5953862697246296E305 >= Math.nextAfter((-Double.MAX_VALUE / 500),-0.0D));
assertEquals("nextAfter(double,double)[52] ::", (double)-3.59538626972463E305, StrictMath.nextAfter((-Double.MAX_VALUE / 500),-0.0001D));
assertTrue("nextAfter(double,double)[53] ::", -3.595386269724631E305 <= Math.nextAfter((-Double.MAX_VALUE / 500),-0.0001D) && -3.5953862697246296E305 >= Math.nextAfter((-Double.MAX_VALUE / 500),-0.0001D));
assertEquals("nextAfter(double,double)[54] ::", (double)-3.59538626972463E305, StrictMath.nextAfter((-Double.MAX_VALUE / 500),-1.0D));
assertTrue("nextAfter(double,double)[55] ::", -3.595386269724631E305 <= Math.nextAfter((-Double.MAX_VALUE / 500),-1.0D) && -3.5953862697246296E305 >= Math.nextAfter((-Double.MAX_VALUE / 500),-1.0D));
assertEquals("nextAfter(double,double)[56] ::", (double)-3.59538626972463E305, StrictMath.nextAfter((-Double.MAX_VALUE / 500),-10.0D));
assertTrue("nextAfter(double,double)[57] ::", -3.595386269724631E305 <= Math.nextAfter((-Double.MAX_VALUE / 500),-10.0D) && -3.5953862697246296E305 >= Math.nextAfter((-Double.MAX_VALUE / 500),-10.0D));
assertEquals("nextAfter(double,double)[58] ::", (double)-3.59538626972463E305, StrictMath.nextAfter((-Double.MAX_VALUE / 500),-3327.191D));
assertTrue("nextAfter(double,double)[59] ::", -3.595386269724631E305 <= Math.nextAfter((-Double.MAX_VALUE / 500),-3327.191D) && -3.5953862697246296E305 >= Math.nextAfter((-Double.MAX_VALUE / 500),-3327.191D));
assertEquals("nextAfter(double,double)[60] ::", (double)-9.876E-321, StrictMath.nextAfter((-Double.MIN_VALUE * 2000),+0.0D));
assertTrue("nextAfter(double,double)[61] ::", -9.88E-321 <= Math.nextAfter((-Double.MIN_VALUE * 2000),+0.0D) && -9.87E-321 >= Math.nextAfter((-Double.MIN_VALUE * 2000),+0.0D));
assertEquals("nextAfter(double,double)[62] ::", (double)-9.876E-321, StrictMath.nextAfter((-Double.MIN_VALUE * 2000),+0.0001D));
assertTrue("nextAfter(double,double)[63] ::", -9.88E-321 <= Math.nextAfter((-Double.MIN_VALUE * 2000),+0.0001D) && -9.87E-321 >= Math.nextAfter((-Double.MIN_VALUE * 2000),+0.0001D));
assertEquals("nextAfter(double,double)[64] ::", (double)-9.876E-321, StrictMath.nextAfter((-Double.MIN_VALUE * 2000),+1.0D));
assertTrue("nextAfter(double,double)[65] ::", -9.88E-321 <= Math.nextAfter((-Double.MIN_VALUE * 2000),+1.0D) && -9.87E-321 >= Math.nextAfter((-Double.MIN_VALUE * 2000),+1.0D));
assertEquals("nextAfter(double,double)[66] ::", (double)-9.876E-321, StrictMath.nextAfter((-Double.MIN_VALUE * 2000),+10.0D));
assertTrue("nextAfter(double,double)[67] ::", -9.88E-321 <= Math.nextAfter((-Double.MIN_VALUE * 2000),+10.0D) && -9.87E-321 >= Math.nextAfter((-Double.MIN_VALUE * 2000),+10.0D));
assertEquals("nextAfter(double,double)[68] ::", (double)-9.876E-321, StrictMath.nextAfter((-Double.MIN_VALUE * 2000),+3327.191D));
assertTrue("nextAfter(double,double)[69] ::", -9.88E-321 <= Math.nextAfter((-Double.MIN_VALUE * 2000),+3327.191D) && -9.87E-321 >= Math.nextAfter((-Double.MIN_VALUE * 2000),+3327.191D));
assertEquals("nextAfter(double,double)[70] ::", (double)-9.876E-321, StrictMath.nextAfter((-Double.MIN_VALUE * 2000),-0.0D));
assertTrue("nextAfter(double,double)[71] ::", -9.88E-321 <= Math.nextAfter((-Double.MIN_VALUE * 2000),-0.0D) && -9.87E-321 >= Math.nextAfter((-Double.MIN_VALUE * 2000),-0.0D));
assertEquals("nextAfter(double,double)[72] ::", (double)-9.886E-321, StrictMath.nextAfter((-Double.MIN_VALUE * 2000),-0.0001D));
assertTrue("nextAfter(double,double)[73] ::", -9.89E-321 <= Math.nextAfter((-Double.MIN_VALUE * 2000),-0.0001D) && -9.88E-321 >= Math.nextAfter((-Double.MIN_VALUE * 2000),-0.0001D));
assertEquals("nextAfter(double,double)[74] ::", (double)-9.886E-321, StrictMath.nextAfter((-Double.MIN_VALUE * 2000),-1.0D));
assertTrue("nextAfter(double,double)[75] ::", -9.89E-321 <= Math.nextAfter((-Double.MIN_VALUE * 2000),-1.0D) && -9.88E-321 >= Math.nextAfter((-Double.MIN_VALUE * 2000),-1.0D));
assertEquals("nextAfter(double,double)[76] ::", (double)-9.886E-321, StrictMath.nextAfter((-Double.MIN_VALUE * 2000),-10.0D));
assertTrue("nextAfter(double,double)[77] ::", -9.89E-321 <= Math.nextAfter((-Double.MIN_VALUE * 2000),-10.0D) && -9.88E-321 >= Math.nextAfter((-Double.MIN_VALUE * 2000),-10.0D));
assertEquals("nextAfter(double,double)[78] ::", (double)-9.886E-321, StrictMath.nextAfter((-Double.MIN_VALUE * 2000),-3327.191D));
assertTrue("nextAfter(double,double)[79] ::", -9.89E-321 <= Math.nextAfter((-Double.MIN_VALUE * 2000),-3327.191D) && -9.88E-321 >= Math.nextAfter((-Double.MIN_VALUE * 2000),-3327.191D));
assertEquals("nextAfter(double,double)[80] ::", (double)-4.936E-321, StrictMath.nextAfter((-Double.MIN_VALUE * 1000),+0.0D));
assertTrue("nextAfter(double,double)[81] ::", -4.94E-321 <= Math.nextAfter((-Double.MIN_VALUE * 1000),+0.0D) && -4.93E-321 >= Math.nextAfter((-Double.MIN_VALUE * 1000),+0.0D));
assertEquals("nextAfter(double,double)[82] ::", (double)-4.936E-321, StrictMath.nextAfter((-Double.MIN_VALUE * 1000),+0.0001D));
assertTrue("nextAfter(double,double)[83] ::", -4.94E-321 <= Math.nextAfter((-Double.MIN_VALUE * 1000),+0.0001D) && -4.93E-321 >= Math.nextAfter((-Double.MIN_VALUE * 1000),+0.0001D));
assertEquals("nextAfter(double,double)[84] ::", (double)-4.936E-321, StrictMath.nextAfter((-Double.MIN_VALUE * 1000),+1.0D));
assertTrue("nextAfter(double,double)[85] ::", -4.94E-321 <= Math.nextAfter((-Double.MIN_VALUE * 1000),+1.0D) && -4.93E-321 >= Math.nextAfter((-Double.MIN_VALUE * 1000),+1.0D));
assertEquals("nextAfter(double,double)[86] ::", (double)-4.936E-321, StrictMath.nextAfter((-Double.MIN_VALUE * 1000),+10.0D));
assertTrue("nextAfter(double,double)[87] ::", -4.94E-321 <= Math.nextAfter((-Double.MIN_VALUE * 1000),+10.0D) && -4.93E-321 >= Math.nextAfter((-Double.MIN_VALUE * 1000),+10.0D));
assertEquals("nextAfter(double,double)[88] ::", (double)-4.936E-321, StrictMath.nextAfter((-Double.MIN_VALUE * 1000),+3327.191D));
assertTrue("nextAfter(double,double)[89] ::", -4.94E-321 <= Math.nextAfter((-Double.MIN_VALUE * 1000),+3327.191D) && -4.93E-321 >= Math.nextAfter((-Double.MIN_VALUE * 1000),+3327.191D));
assertEquals("nextAfter(double,double)[90] ::", (double)-4.936E-321, StrictMath.nextAfter((-Double.MIN_VALUE * 1000),-0.0D));
assertTrue("nextAfter(double,double)[91] ::", -4.94E-321 <= Math.nextAfter((-Double.MIN_VALUE * 1000),-0.0D) && -4.93E-321 >= Math.nextAfter((-Double.MIN_VALUE * 1000),-0.0D));
assertEquals("nextAfter(double,double)[92] ::", (double)-4.946E-321, StrictMath.nextAfter((-Double.MIN_VALUE * 1000),-0.0001D));
assertTrue("nextAfter(double,double)[93] ::", -4.95E-321 <= Math.nextAfter((-Double.MIN_VALUE * 1000),-0.0001D) && -4.94E-321 >= Math.nextAfter((-Double.MIN_VALUE * 1000),-0.0001D));
assertEquals("nextAfter(double,double)[94] ::", (double)-4.946E-321, StrictMath.nextAfter((-Double.MIN_VALUE * 1000),-1.0D));
assertTrue("nextAfter(double,double)[95] ::", -4.95E-321 <= Math.nextAfter((-Double.MIN_VALUE * 1000),-1.0D) && -4.94E-321 >= Math.nextAfter((-Double.MIN_VALUE * 1000),-1.0D));
assertEquals("nextAfter(double,double)[96] ::", (double)-4.946E-321, StrictMath.nextAfter((-Double.MIN_VALUE * 1000),-10.0D));
assertTrue("nextAfter(double,double)[97] ::", -4.95E-321 <= Math.nextAfter((-Double.MIN_VALUE * 1000),-10.0D) && -4.94E-321 >= Math.nextAfter((-Double.MIN_VALUE * 1000),-10.0D));
assertEquals("nextAfter(double,double)[98] ::", (double)-4.946E-321, StrictMath.nextAfter((-Double.MIN_VALUE * 1000),-3327.191D));
assertTrue("nextAfter(double,double)[99] ::", -4.95E-321 <= Math.nextAfter((-Double.MIN_VALUE * 1000),-3327.191D) && -4.94E-321 >= Math.nextAfter((-Double.MIN_VALUE * 1000),-3327.191D));
assertEquals("nextAfter(double,double)[100] ::", (double)-2.929112212129231E9, StrictMath.nextAfter(-2929112212.129231481346,+0.0D));
assertTrue("nextAfter(double,double)[101] ::", -2.9291122121292315E9 <= Math.nextAfter(-2929112212.129231481346,+0.0D) && -2.9291122121292305E9 >= Math.nextAfter(-2929112212.129231481346,+0.0D));
assertEquals("nextAfter(double,double)[102] ::", (double)-2.929112212129231E9, StrictMath.nextAfter(-2929112212.129231481346,+0.0001D));
assertTrue("nextAfter(double,double)[103] ::", -2.9291122121292315E9 <= Math.nextAfter(-2929112212.129231481346,+0.0001D) && -2.9291122121292305E9 >= Math.nextAfter(-2929112212.129231481346,+0.0001D));
assertEquals("nextAfter(double,double)[104] ::", (double)-2.929112212129231E9, StrictMath.nextAfter(-2929112212.129231481346,+1.0D));
assertTrue("nextAfter(double,double)[105] ::", -2.9291122121292315E9 <= Math.nextAfter(-2929112212.129231481346,+1.0D) && -2.9291122121292305E9 >= Math.nextAfter(-2929112212.129231481346,+1.0D));
assertEquals("nextAfter(double,double)[106] ::", (double)-2.929112212129231E9, StrictMath.nextAfter(-2929112212.129231481346,+10.0D));
assertTrue("nextAfter(double,double)[107] ::", -2.9291122121292315E9 <= Math.nextAfter(-2929112212.129231481346,+10.0D) && -2.9291122121292305E9 >= Math.nextAfter(-2929112212.129231481346,+10.0D));
assertEquals("nextAfter(double,double)[108] ::", (double)-2.929112212129231E9, StrictMath.nextAfter(-2929112212.129231481346,+3327.191D));
assertTrue("nextAfter(double,double)[109] ::", -2.9291122121292315E9 <= Math.nextAfter(-2929112212.129231481346,+3327.191D) && -2.9291122121292305E9 >= Math.nextAfter(-2929112212.129231481346,+3327.191D));
assertEquals("nextAfter(double,double)[110] ::", (double)-2.929112212129231E9, StrictMath.nextAfter(-2929112212.129231481346,-0.0D));
assertTrue("nextAfter(double,double)[111] ::", -2.9291122121292315E9 <= Math.nextAfter(-2929112212.129231481346,-0.0D) && -2.9291122121292305E9 >= Math.nextAfter(-2929112212.129231481346,-0.0D));
assertEquals("nextAfter(double,double)[112] ::", (double)-2.929112212129231E9, StrictMath.nextAfter(-2929112212.129231481346,-0.0001D));
assertTrue("nextAfter(double,double)[113] ::", -2.9291122121292315E9 <= Math.nextAfter(-2929112212.129231481346,-0.0001D) && -2.9291122121292305E9 >= Math.nextAfter(-2929112212.129231481346,-0.0001D));
assertEquals("nextAfter(double,double)[114] ::", (double)-2.929112212129231E9, StrictMath.nextAfter(-2929112212.129231481346,-1.0D));
assertTrue("nextAfter(double,double)[115] ::", -2.9291122121292315E9 <= Math.nextAfter(-2929112212.129231481346,-1.0D) && -2.9291122121292305E9 >= Math.nextAfter(-2929112212.129231481346,-1.0D));
assertEquals("nextAfter(double,double)[116] ::", (double)-2.929112212129231E9, StrictMath.nextAfter(-2929112212.129231481346,-10.0D));
assertTrue("nextAfter(double,double)[117] ::", -2.9291122121292315E9 <= Math.nextAfter(-2929112212.129231481346,-10.0D) && -2.9291122121292305E9 >= Math.nextAfter(-2929112212.129231481346,-10.0D));
assertEquals("nextAfter(double,double)[118] ::", (double)-2.929112212129231E9, StrictMath.nextAfter(-2929112212.129231481346,-3327.191D));
assertTrue("nextAfter(double,double)[119] ::", -2.9291122121292315E9 <= Math.nextAfter(-2929112212.129231481346,-3327.191D) && -2.9291122121292305E9 >= Math.nextAfter(-2929112212.129231481346,-3327.191D));
assertEquals("nextAfter(double,double)[120] ::", (double)-2372.2282119999995, StrictMath.nextAfter(-2372.228212D,+0.0D));
assertTrue("nextAfter(double,double)[121] ::", -2372.228212 <= Math.nextAfter(-2372.228212D,+0.0D) && -2372.228211999999 >= Math.nextAfter(-2372.228212D,+0.0D));
assertEquals("nextAfter(double,double)[122] ::", (double)-2372.2282119999995, StrictMath.nextAfter(-2372.228212D,+0.0001D));
assertTrue("nextAfter(double,double)[123] ::", -2372.228212 <= Math.nextAfter(-2372.228212D,+0.0001D) && -2372.228211999999 >= Math.nextAfter(-2372.228212D,+0.0001D));
assertEquals("nextAfter(double,double)[124] ::", (double)-2372.2282119999995, StrictMath.nextAfter(-2372.228212D,+1.0D));
assertTrue("nextAfter(double,double)[125] ::", -2372.228212 <= Math.nextAfter(-2372.228212D,+1.0D) && -2372.228211999999 >= Math.nextAfter(-2372.228212D,+1.0D));
assertEquals("nextAfter(double,double)[126] ::", (double)-2372.2282119999995, StrictMath.nextAfter(-2372.228212D,+10.0D));
assertTrue("nextAfter(double,double)[127] ::", -2372.228212 <= Math.nextAfter(-2372.228212D,+10.0D) && -2372.228211999999 >= Math.nextAfter(-2372.228212D,+10.0D));
assertEquals("nextAfter(double,double)[128] ::", (double)-2372.2282119999995, StrictMath.nextAfter(-2372.228212D,+3327.191D));
assertTrue("nextAfter(double,double)[129] ::", -2372.228212 <= Math.nextAfter(-2372.228212D,+3327.191D) && -2372.228211999999 >= Math.nextAfter(-2372.228212D,+3327.191D));
assertEquals("nextAfter(double,double)[130] ::", (double)-2372.2282119999995, StrictMath.nextAfter(-2372.228212D,-0.0D));
assertTrue("nextAfter(double,double)[131] ::", -2372.228212 <= Math.nextAfter(-2372.228212D,-0.0D) && -2372.228211999999 >= Math.nextAfter(-2372.228212D,-0.0D));
assertEquals("nextAfter(double,double)[132] ::", (double)-2372.2282119999995, StrictMath.nextAfter(-2372.228212D,-0.0001D));
assertTrue("nextAfter(double,double)[133] ::", -2372.228212 <= Math.nextAfter(-2372.228212D,-0.0001D) && -2372.228211999999 >= Math.nextAfter(-2372.228212D,-0.0001D));
assertEquals("nextAfter(double,double)[134] ::", (double)-2372.2282119999995, StrictMath.nextAfter(-2372.228212D,-1.0D));
assertTrue("nextAfter(double,double)[135] ::", -2372.228212 <= Math.nextAfter(-2372.228212D,-1.0D) && -2372.228211999999 >= Math.nextAfter(-2372.228212D,-1.0D));
assertEquals("nextAfter(double,double)[136] ::", (double)-2372.2282119999995, StrictMath.nextAfter(-2372.228212D,-10.0D));
assertTrue("nextAfter(double,double)[137] ::", -2372.228212 <= Math.nextAfter(-2372.228212D,-10.0D) && -2372.228211999999 >= Math.nextAfter(-2372.228212D,-10.0D));
assertEquals("nextAfter(double,double)[138] ::", (double)-2372.2282120000004, StrictMath.nextAfter(-2372.228212D,-3327.191D));
assertTrue("nextAfter(double,double)[139] ::", -2372.228212000001 <= Math.nextAfter(-2372.228212D,-3327.191D) && -2372.228212 >= Math.nextAfter(-2372.228212D,-3327.191D));
assertEquals("nextAfter(double,double)[140] ::", (double)-1.2231999999999998, StrictMath.nextAfter(-1.2232D,+0.0D));
assertTrue("nextAfter(double,double)[141] ::", -1.2232 <= Math.nextAfter(-1.2232D,+0.0D) && -1.2231999999999996 >= Math.nextAfter(-1.2232D,+0.0D));
assertEquals("nextAfter(double,double)[142] ::", (double)-1.2231999999999998, StrictMath.nextAfter(-1.2232D,+0.0001D));
assertTrue("nextAfter(double,double)[143] ::", -1.2232 <= Math.nextAfter(-1.2232D,+0.0001D) && -1.2231999999999996 >= Math.nextAfter(-1.2232D,+0.0001D));
assertEquals("nextAfter(double,double)[144] ::", (double)-1.2231999999999998, StrictMath.nextAfter(-1.2232D,+1.0D));
assertTrue("nextAfter(double,double)[145] ::", -1.2232 <= Math.nextAfter(-1.2232D,+1.0D) && -1.2231999999999996 >= Math.nextAfter(-1.2232D,+1.0D));
assertEquals("nextAfter(double,double)[146] ::", (double)-1.2231999999999998, StrictMath.nextAfter(-1.2232D,+10.0D));
assertTrue("nextAfter(double,double)[147] ::", -1.2232 <= Math.nextAfter(-1.2232D,+10.0D) && -1.2231999999999996 >= Math.nextAfter(-1.2232D,+10.0D));
assertEquals("nextAfter(double,double)[148] ::", (double)-1.2231999999999998, StrictMath.nextAfter(-1.2232D,+3327.191D));
assertTrue("nextAfter(double,double)[149] ::", -1.2232 <= Math.nextAfter(-1.2232D,+3327.191D) && -1.2231999999999996 >= Math.nextAfter(-1.2232D,+3327.191D));
assertEquals("nextAfter(double,double)[150] ::", (double)-1.2231999999999998, StrictMath.nextAfter(-1.2232D,-0.0D));
assertTrue("nextAfter(double,double)[151] ::", -1.2232 <= Math.nextAfter(-1.2232D,-0.0D) && -1.2231999999999996 >= Math.nextAfter(-1.2232D,-0.0D));
assertEquals("nextAfter(double,double)[152] ::", (double)-1.2231999999999998, StrictMath.nextAfter(-1.2232D,-0.0001D));
assertTrue("nextAfter(double,double)[153] ::", -1.2232 <= Math.nextAfter(-1.2232D,-0.0001D) && -1.2231999999999996 >= Math.nextAfter(-1.2232D,-0.0001D));
assertEquals("nextAfter(double,double)[154] ::", (double)-1.2231999999999998, StrictMath.nextAfter(-1.2232D,-1.0D));
assertTrue("nextAfter(double,double)[155] ::", -1.2232 <= Math.nextAfter(-1.2232D,-1.0D) && -1.2231999999999996 >= Math.nextAfter(-1.2232D,-1.0D));
assertEquals("nextAfter(double,double)[156] ::", (double)-1.2232000000000003, StrictMath.nextAfter(-1.2232D,-10.0D));
assertTrue("nextAfter(double,double)[157] ::", -1.2232000000000005 <= Math.nextAfter(-1.2232D,-10.0D) && -1.2232 >= Math.nextAfter(-1.2232D,-10.0D));
assertEquals("nextAfter(double,double)[158] ::", (double)-1.2232000000000003, StrictMath.nextAfter(-1.2232D,-3327.191D));
assertTrue("nextAfter(double,double)[159] ::", -1.2232000000000005 <= Math.nextAfter(-1.2232D,-3327.191D) && -1.2232 >= Math.nextAfter(-1.2232D,-3327.191D));
assertEquals("nextAfter(double,double)[160] ::", (double)0.0, StrictMath.nextAfter(0D,+0.0D));
assertTrue("nextAfter(double,double)[161] ::", -4.9E-324 <= Math.nextAfter(0D,+0.0D) && 4.9E-324 >= Math.nextAfter(0D,+0.0D));
assertEquals("nextAfter(double,double)[162] ::", (double)4.9E-324, StrictMath.nextAfter(0D,+0.0001D));
assertTrue("nextAfter(double,double)[163] ::", 0.0 <= Math.nextAfter(0D,+0.0001D) && 1.0E-323 >= Math.nextAfter(0D,+0.0001D));
assertEquals("nextAfter(double,double)[164] ::", (double)4.9E-324, StrictMath.nextAfter(0D,+1.0D));
assertTrue("nextAfter(double,double)[165] ::", 0.0 <= Math.nextAfter(0D,+1.0D) && 1.0E-323 >= Math.nextAfter(0D,+1.0D));
assertEquals("nextAfter(double,double)[166] ::", (double)4.9E-324, StrictMath.nextAfter(0D,+10.0D));
assertTrue("nextAfter(double,double)[167] ::", 0.0 <= Math.nextAfter(0D,+10.0D) && 1.0E-323 >= Math.nextAfter(0D,+10.0D));
assertEquals("nextAfter(double,double)[168] ::", (double)4.9E-324, StrictMath.nextAfter(0D,+3327.191D));
assertTrue("nextAfter(double,double)[169] ::", 0.0 <= Math.nextAfter(0D,+3327.191D) && 1.0E-323 >= Math.nextAfter(0D,+3327.191D));
assertEquals("nextAfter(double,double)[170] ::", (double)-0.0, StrictMath.nextAfter(0D,-0.0D));
assertTrue("nextAfter(double,double)[171] ::", -4.9E-324 <= Math.nextAfter(0D,-0.0D) && 4.9E-324 >= Math.nextAfter(0D,-0.0D));
assertEquals("nextAfter(double,double)[172] ::", (double)-4.9E-324, StrictMath.nextAfter(0D,-0.0001D));
assertTrue("nextAfter(double,double)[173] ::", -1.0E-323 <= Math.nextAfter(0D,-0.0001D) && 0.0 >= Math.nextAfter(0D,-0.0001D));
assertEquals("nextAfter(double,double)[174] ::", (double)-4.9E-324, StrictMath.nextAfter(0D,-1.0D));
assertTrue("nextAfter(double,double)[175] ::", -1.0E-323 <= Math.nextAfter(0D,-1.0D) && 0.0 >= Math.nextAfter(0D,-1.0D));
assertEquals("nextAfter(double,double)[176] ::", (double)-4.9E-324, StrictMath.nextAfter(0D,-10.0D));
assertTrue("nextAfter(double,double)[177] ::", -1.0E-323 <= Math.nextAfter(0D,-10.0D) && 0.0 >= Math.nextAfter(0D,-10.0D));
assertEquals("nextAfter(double,double)[178] ::", (double)-4.9E-324, StrictMath.nextAfter(0D,-3327.191D));
assertTrue("nextAfter(double,double)[179] ::", -1.0E-323 <= Math.nextAfter(0D,-3327.191D) && 0.0 >= Math.nextAfter(0D,-3327.191D));
assertEquals("nextAfter(double,double)[180] ::", (double)2.4322299999999997, StrictMath.nextAfter(2.43223D,+0.0D));
assertTrue("nextAfter(double,double)[181] ::", 2.4322299999999992 <= Math.nextAfter(2.43223D,+0.0D) && 2.43223 >= Math.nextAfter(2.43223D,+0.0D));
assertEquals("nextAfter(double,double)[182] ::", (double)2.4322299999999997, StrictMath.nextAfter(2.43223D,+0.0001D));
assertTrue("nextAfter(double,double)[183] ::", 2.4322299999999992 <= Math.nextAfter(2.43223D,+0.0001D) && 2.43223 >= Math.nextAfter(2.43223D,+0.0001D));
assertEquals("nextAfter(double,double)[184] ::", (double)2.4322299999999997, StrictMath.nextAfter(2.43223D,+1.0D));
assertTrue("nextAfter(double,double)[185] ::", 2.4322299999999992 <= Math.nextAfter(2.43223D,+1.0D) && 2.43223 >= Math.nextAfter(2.43223D,+1.0D));
assertEquals("nextAfter(double,double)[186] ::", (double)2.4322300000000006, StrictMath.nextAfter(2.43223D,+10.0D));
assertTrue("nextAfter(double,double)[187] ::", 2.43223 <= Math.nextAfter(2.43223D,+10.0D) && 2.432230000000001 >= Math.nextAfter(2.43223D,+10.0D));
assertEquals("nextAfter(double,double)[188] ::", (double)2.4322300000000006, StrictMath.nextAfter(2.43223D,+3327.191D));
assertTrue("nextAfter(double,double)[189] ::", 2.43223 <= Math.nextAfter(2.43223D,+3327.191D) && 2.432230000000001 >= Math.nextAfter(2.43223D,+3327.191D));
assertEquals("nextAfter(double,double)[190] ::", (double)2.4322299999999997, StrictMath.nextAfter(2.43223D,-0.0D));
assertTrue("nextAfter(double,double)[191] ::", 2.4322299999999992 <= Math.nextAfter(2.43223D,-0.0D) && 2.43223 >= Math.nextAfter(2.43223D,-0.0D));
assertEquals("nextAfter(double,double)[192] ::", (double)2.4322299999999997, StrictMath.nextAfter(2.43223D,-0.0001D));
assertTrue("nextAfter(double,double)[193] ::", 2.4322299999999992 <= Math.nextAfter(2.43223D,-0.0001D) && 2.43223 >= Math.nextAfter(2.43223D,-0.0001D));
assertEquals("nextAfter(double,double)[194] ::", (double)2.4322299999999997, StrictMath.nextAfter(2.43223D,-1.0D));
assertTrue("nextAfter(double,double)[195] ::", 2.4322299999999992 <= Math.nextAfter(2.43223D,-1.0D) && 2.43223 >= Math.nextAfter(2.43223D,-1.0D));
assertEquals("nextAfter(double,double)[196] ::", (double)2.4322299999999997, StrictMath.nextAfter(2.43223D,-10.0D));
assertTrue("nextAfter(double,double)[197] ::", 2.4322299999999992 <= Math.nextAfter(2.43223D,-10.0D) && 2.43223 >= Math.nextAfter(2.43223D,-10.0D));
assertEquals("nextAfter(double,double)[198] ::", (double)2.4322299999999997, StrictMath.nextAfter(2.43223D,-3327.191D));
assertTrue("nextAfter(double,double)[199] ::", 2.4322299999999992 <= Math.nextAfter(2.43223D,-3327.191D) && 2.43223 >= Math.nextAfter(2.43223D,-3327.191D));
assertEquals("nextAfter(double,double)[200] ::", (double)1.8232155332356595E7, StrictMath.nextAfter(18232155.3323566D,+0.0D));
assertTrue("nextAfter(double,double)[201] ::", 1.823215533235659E7 <= Math.nextAfter(18232155.3323566D,+0.0D) && 1.82321553323566E7 >= Math.nextAfter(18232155.3323566D,+0.0D));
assertEquals("nextAfter(double,double)[202] ::", (double)1.8232155332356595E7, StrictMath.nextAfter(18232155.3323566D,+0.0001D));
assertTrue("nextAfter(double,double)[203] ::", 1.823215533235659E7 <= Math.nextAfter(18232155.3323566D,+0.0001D) && 1.82321553323566E7 >= Math.nextAfter(18232155.3323566D,+0.0001D));
assertEquals("nextAfter(double,double)[204] ::", (double)1.8232155332356595E7, StrictMath.nextAfter(18232155.3323566D,+1.0D));
assertTrue("nextAfter(double,double)[205] ::", 1.823215533235659E7 <= Math.nextAfter(18232155.3323566D,+1.0D) && 1.82321553323566E7 >= Math.nextAfter(18232155.3323566D,+1.0D));
assertEquals("nextAfter(double,double)[206] ::", (double)1.8232155332356595E7, StrictMath.nextAfter(18232155.3323566D,+10.0D));
assertTrue("nextAfter(double,double)[207] ::", 1.823215533235659E7 <= Math.nextAfter(18232155.3323566D,+10.0D) && 1.82321553323566E7 >= Math.nextAfter(18232155.3323566D,+10.0D));
assertEquals("nextAfter(double,double)[208] ::", (double)1.8232155332356595E7, StrictMath.nextAfter(18232155.3323566D,+3327.191D));
assertTrue("nextAfter(double,double)[209] ::", 1.823215533235659E7 <= Math.nextAfter(18232155.3323566D,+3327.191D) && 1.82321553323566E7 >= Math.nextAfter(18232155.3323566D,+3327.191D));
assertEquals("nextAfter(double,double)[210] ::", (double)1.8232155332356595E7, StrictMath.nextAfter(18232155.3323566D,-0.0D));
assertTrue("nextAfter(double,double)[211] ::", 1.823215533235659E7 <= Math.nextAfter(18232155.3323566D,-0.0D) && 1.82321553323566E7 >= Math.nextAfter(18232155.3323566D,-0.0D));
assertEquals("nextAfter(double,double)[212] ::", (double)1.8232155332356595E7, StrictMath.nextAfter(18232155.3323566D,-0.0001D));
assertTrue("nextAfter(double,double)[213] ::", 1.823215533235659E7 <= Math.nextAfter(18232155.3323566D,-0.0001D) && 1.82321553323566E7 >= Math.nextAfter(18232155.3323566D,-0.0001D));
assertEquals("nextAfter(double,double)[214] ::", (double)1.8232155332356595E7, StrictMath.nextAfter(18232155.3323566D,-1.0D));
assertTrue("nextAfter(double,double)[215] ::", 1.823215533235659E7 <= Math.nextAfter(18232155.3323566D,-1.0D) && 1.82321553323566E7 >= Math.nextAfter(18232155.3323566D,-1.0D));
assertEquals("nextAfter(double,double)[216] ::", (double)1.8232155332356595E7, StrictMath.nextAfter(18232155.3323566D,-10.0D));
assertTrue("nextAfter(double,double)[217] ::", 1.823215533235659E7 <= Math.nextAfter(18232155.3323566D,-10.0D) && 1.82321553323566E7 >= Math.nextAfter(18232155.3323566D,-10.0D));
assertEquals("nextAfter(double,double)[218] ::", (double)1.8232155332356595E7, StrictMath.nextAfter(18232155.3323566D,-3327.191D));
assertTrue("nextAfter(double,double)[219] ::", 1.823215533235659E7 <= Math.nextAfter(18232155.3323566D,-3327.191D) && 1.82321553323566E7 >= Math.nextAfter(18232155.3323566D,-3327.191D));
assertEquals("nextAfter(double,double)[220] ::", (double)0.0, StrictMath.nextAfter(Double.MIN_VALUE,+0.0D));
assertTrue("nextAfter(double,double)[221] ::", -4.9E-324 <= Math.nextAfter(Double.MIN_VALUE,+0.0D) && 4.9E-324 >= Math.nextAfter(Double.MIN_VALUE,+0.0D));
assertEquals("nextAfter(double,double)[222] ::", (double)1.0E-323, StrictMath.nextAfter(Double.MIN_VALUE,+0.0001D));
assertTrue("nextAfter(double,double)[223] ::", 4.9E-324 <= Math.nextAfter(Double.MIN_VALUE,+0.0001D) && 1.5E-323 >= Math.nextAfter(Double.MIN_VALUE,+0.0001D));
assertEquals("nextAfter(double,double)[224] ::", (double)1.0E-323, StrictMath.nextAfter(Double.MIN_VALUE,+1.0D));
assertTrue("nextAfter(double,double)[225] ::", 4.9E-324 <= Math.nextAfter(Double.MIN_VALUE,+1.0D) && 1.5E-323 >= Math.nextAfter(Double.MIN_VALUE,+1.0D));
assertEquals("nextAfter(double,double)[226] ::", (double)1.0E-323, StrictMath.nextAfter(Double.MIN_VALUE,+10.0D));
assertTrue("nextAfter(double,double)[227] ::", 4.9E-324 <= Math.nextAfter(Double.MIN_VALUE,+10.0D) && 1.5E-323 >= Math.nextAfter(Double.MIN_VALUE,+10.0D));
assertEquals("nextAfter(double,double)[228] ::", (double)1.0E-323, StrictMath.nextAfter(Double.MIN_VALUE,+3327.191D));
assertTrue("nextAfter(double,double)[229] ::", 4.9E-324 <= Math.nextAfter(Double.MIN_VALUE,+3327.191D) && 1.5E-323 >= Math.nextAfter(Double.MIN_VALUE,+3327.191D));
assertEquals("nextAfter(double,double)[230] ::", (double)0.0, StrictMath.nextAfter(Double.MIN_VALUE,-0.0D));
assertTrue("nextAfter(double,double)[231] ::", -4.9E-324 <= Math.nextAfter(Double.MIN_VALUE,-0.0D) && 4.9E-324 >= Math.nextAfter(Double.MIN_VALUE,-0.0D));
assertEquals("nextAfter(double,double)[232] ::", (double)0.0, StrictMath.nextAfter(Double.MIN_VALUE,-0.0001D));
assertTrue("nextAfter(double,double)[233] ::", -4.9E-324 <= Math.nextAfter(Double.MIN_VALUE,-0.0001D) && 4.9E-324 >= Math.nextAfter(Double.MIN_VALUE,-0.0001D));
assertEquals("nextAfter(double,double)[234] ::", (double)0.0, StrictMath.nextAfter(Double.MIN_VALUE,-1.0D));
assertTrue("nextAfter(double,double)[235] ::", -4.9E-324 <= Math.nextAfter(Double.MIN_VALUE,-1.0D) && 4.9E-324 >= Math.nextAfter(Double.MIN_VALUE,-1.0D));
assertEquals("nextAfter(double,double)[236] ::", (double)0.0, StrictMath.nextAfter(Double.MIN_VALUE,-10.0D));
assertTrue("nextAfter(double,double)[237] ::", -4.9E-324 <= Math.nextAfter(Double.MIN_VALUE,-10.0D) && 4.9E-324 >= Math.nextAfter(Double.MIN_VALUE,-10.0D));
assertEquals("nextAfter(double,double)[238] ::", (double)0.0, StrictMath.nextAfter(Double.MIN_VALUE,-3327.191D));
assertTrue("nextAfter(double,double)[239] ::", -4.9E-324 <= Math.nextAfter(Double.MIN_VALUE,-3327.191D) && 4.9E-324 >= Math.nextAfter(Double.MIN_VALUE,-3327.191D));
assertEquals("nextAfter(double,double)[240] ::", (double)9.83E-322, StrictMath.nextAfter((Double.MIN_VALUE * 200),+0.0D));
assertTrue("nextAfter(double,double)[241] ::", 9.8E-322 <= Math.nextAfter((Double.MIN_VALUE * 200),+0.0D) && 9.9E-322 >= Math.nextAfter((Double.MIN_VALUE * 200),+0.0D));
assertEquals("nextAfter(double,double)[242] ::", (double)9.93E-322, StrictMath.nextAfter((Double.MIN_VALUE * 200),+0.0001D));
assertTrue("nextAfter(double,double)[243] ::", 9.9E-322 <= Math.nextAfter((Double.MIN_VALUE * 200),+0.0001D) && 1.0E-321 >= Math.nextAfter((Double.MIN_VALUE * 200),+0.0001D));
assertEquals("nextAfter(double,double)[244] ::", (double)9.93E-322, StrictMath.nextAfter((Double.MIN_VALUE * 200),+1.0D));
assertTrue("nextAfter(double,double)[245] ::", 9.9E-322 <= Math.nextAfter((Double.MIN_VALUE * 200),+1.0D) && 1.0E-321 >= Math.nextAfter((Double.MIN_VALUE * 200),+1.0D));
assertEquals("nextAfter(double,double)[246] ::", (double)9.93E-322, StrictMath.nextAfter((Double.MIN_VALUE * 200),+10.0D));
assertTrue("nextAfter(double,double)[247] ::", 9.9E-322 <= Math.nextAfter((Double.MIN_VALUE * 200),+10.0D) && 1.0E-321 >= Math.nextAfter((Double.MIN_VALUE * 200),+10.0D));
assertEquals("nextAfter(double,double)[248] ::", (double)9.93E-322, StrictMath.nextAfter((Double.MIN_VALUE * 200),+3327.191D));
assertTrue("nextAfter(double,double)[249] ::", 9.9E-322 <= Math.nextAfter((Double.MIN_VALUE * 200),+3327.191D) && 1.0E-321 >= Math.nextAfter((Double.MIN_VALUE * 200),+3327.191D));
assertEquals("nextAfter(double,double)[250] ::", (double)9.83E-322, StrictMath.nextAfter((Double.MIN_VALUE * 200),-0.0D));
assertTrue("nextAfter(double,double)[251] ::", 9.8E-322 <= Math.nextAfter((Double.MIN_VALUE * 200),-0.0D) && 9.9E-322 >= Math.nextAfter((Double.MIN_VALUE * 200),-0.0D));
assertEquals("nextAfter(double,double)[252] ::", (double)9.83E-322, StrictMath.nextAfter((Double.MIN_VALUE * 200),-0.0001D));
assertTrue("nextAfter(double,double)[253] ::", 9.8E-322 <= Math.nextAfter((Double.MIN_VALUE * 200),-0.0001D) && 9.9E-322 >= Math.nextAfter((Double.MIN_VALUE * 200),-0.0001D));
assertEquals("nextAfter(double,double)[254] ::", (double)9.83E-322, StrictMath.nextAfter((Double.MIN_VALUE * 200),-1.0D));
assertTrue("nextAfter(double,double)[255] ::", 9.8E-322 <= Math.nextAfter((Double.MIN_VALUE * 200),-1.0D) && 9.9E-322 >= Math.nextAfter((Double.MIN_VALUE * 200),-1.0D));
assertEquals("nextAfter(double,double)[256] ::", (double)9.83E-322, StrictMath.nextAfter((Double.MIN_VALUE * 200),-10.0D));
assertTrue("nextAfter(double,double)[257] ::", 9.8E-322 <= Math.nextAfter((Double.MIN_VALUE * 200),-10.0D) && 9.9E-322 >= Math.nextAfter((Double.MIN_VALUE * 200),-10.0D));
assertEquals("nextAfter(double,double)[258] ::", (double)9.83E-322, StrictMath.nextAfter((Double.MIN_VALUE * 200),-3327.191D));
assertTrue("nextAfter(double,double)[259] ::", 9.8E-322 <= Math.nextAfter((Double.MIN_VALUE * 200),-3327.191D) && 9.9E-322 >= Math.nextAfter((Double.MIN_VALUE * 200),-3327.191D));
assertEquals("nextAfter(double,double)[260] ::", (double)3.59538626972463E305, StrictMath.nextAfter((Double.MAX_VALUE / 500),+0.0D));
assertTrue("nextAfter(double,double)[261] ::", 3.5953862697246296E305 <= Math.nextAfter((Double.MAX_VALUE / 500),+0.0D) && 3.595386269724631E305 >= Math.nextAfter((Double.MAX_VALUE / 500),+0.0D));
assertEquals("nextAfter(double,double)[262] ::", (double)3.59538626972463E305, StrictMath.nextAfter((Double.MAX_VALUE / 500),+0.0001D));
assertTrue("nextAfter(double,double)[263] ::", 3.5953862697246296E305 <= Math.nextAfter((Double.MAX_VALUE / 500),+0.0001D) && 3.595386269724631E305 >= Math.nextAfter((Double.MAX_VALUE / 500),+0.0001D));
assertEquals("nextAfter(double,double)[264] ::", (double)3.59538626972463E305, StrictMath.nextAfter((Double.MAX_VALUE / 500),+1.0D));
assertTrue("nextAfter(double,double)[265] ::", 3.5953862697246296E305 <= Math.nextAfter((Double.MAX_VALUE / 500),+1.0D) && 3.595386269724631E305 >= Math.nextAfter((Double.MAX_VALUE / 500),+1.0D));
assertEquals("nextAfter(double,double)[266] ::", (double)3.59538626972463E305, StrictMath.nextAfter((Double.MAX_VALUE / 500),+10.0D));
assertTrue("nextAfter(double,double)[267] ::", 3.5953862697246296E305 <= Math.nextAfter((Double.MAX_VALUE / 500),+10.0D) && 3.595386269724631E305 >= Math.nextAfter((Double.MAX_VALUE / 500),+10.0D));
assertEquals("nextAfter(double,double)[268] ::", (double)3.59538626972463E305, StrictMath.nextAfter((Double.MAX_VALUE / 500),+3327.191D));
assertTrue("nextAfter(double,double)[269] ::", 3.5953862697246296E305 <= Math.nextAfter((Double.MAX_VALUE / 500),+3327.191D) && 3.595386269724631E305 >= Math.nextAfter((Double.MAX_VALUE / 500),+3327.191D));
assertEquals("nextAfter(double,double)[270] ::", (double)3.59538626972463E305, StrictMath.nextAfter((Double.MAX_VALUE / 500),-0.0D));
assertTrue("nextAfter(double,double)[271] ::", 3.5953862697246296E305 <= Math.nextAfter((Double.MAX_VALUE / 500),-0.0D) && 3.595386269724631E305 >= Math.nextAfter((Double.MAX_VALUE / 500),-0.0D));
assertEquals("nextAfter(double,double)[272] ::", (double)3.59538626972463E305, StrictMath.nextAfter((Double.MAX_VALUE / 500),-0.0001D));
assertTrue("nextAfter(double,double)[273] ::", 3.5953862697246296E305 <= Math.nextAfter((Double.MAX_VALUE / 500),-0.0001D) && 3.595386269724631E305 >= Math.nextAfter((Double.MAX_VALUE / 500),-0.0001D));
assertEquals("nextAfter(double,double)[274] ::", (double)3.59538626972463E305, StrictMath.nextAfter((Double.MAX_VALUE / 500),-1.0D));
assertTrue("nextAfter(double,double)[275] ::", 3.5953862697246296E305 <= Math.nextAfter((Double.MAX_VALUE / 500),-1.0D) && 3.595386269724631E305 >= Math.nextAfter((Double.MAX_VALUE / 500),-1.0D));
assertEquals("nextAfter(double,double)[276] ::", (double)3.59538626972463E305, StrictMath.nextAfter((Double.MAX_VALUE / 500),-10.0D));
assertTrue("nextAfter(double,double)[277] ::", 3.5953862697246296E305 <= Math.nextAfter((Double.MAX_VALUE / 500),-10.0D) && 3.595386269724631E305 >= Math.nextAfter((Double.MAX_VALUE / 500),-10.0D));
assertEquals("nextAfter(double,double)[278] ::", (double)3.59538626972463E305, StrictMath.nextAfter((Double.MAX_VALUE / 500),-3327.191D));
assertTrue("nextAfter(double,double)[279] ::", 3.5953862697246296E305 <= Math.nextAfter((Double.MAX_VALUE / 500),-3327.191D) && 3.595386269724631E305 >= Math.nextAfter((Double.MAX_VALUE / 500),-3327.191D));
assertEquals("nextAfter(double,double)[280] ::", (double)8.988465674311577E305, StrictMath.nextAfter((Double.MAX_VALUE / 200),+0.0D));
assertTrue("nextAfter(double,double)[281] ::", 8.988465674311575E305 <= Math.nextAfter((Double.MAX_VALUE / 200),+0.0D) && 8.988465674311578E305 >= Math.nextAfter((Double.MAX_VALUE / 200),+0.0D));
assertEquals("nextAfter(double,double)[282] ::", (double)8.988465674311577E305, StrictMath.nextAfter((Double.MAX_VALUE / 200),+0.0001D));
assertTrue("nextAfter(double,double)[283] ::", 8.988465674311575E305 <= Math.nextAfter((Double.MAX_VALUE / 200),+0.0001D) && 8.988465674311578E305 >= Math.nextAfter((Double.MAX_VALUE / 200),+0.0001D));
assertEquals("nextAfter(double,double)[284] ::", (double)8.988465674311577E305, StrictMath.nextAfter((Double.MAX_VALUE / 200),+1.0D));
assertTrue("nextAfter(double,double)[285] ::", 8.988465674311575E305 <= Math.nextAfter((Double.MAX_VALUE / 200),+1.0D) && 8.988465674311578E305 >= Math.nextAfter((Double.MAX_VALUE / 200),+1.0D));
assertEquals("nextAfter(double,double)[286] ::", (double)8.988465674311577E305, StrictMath.nextAfter((Double.MAX_VALUE / 200),+10.0D));
assertTrue("nextAfter(double,double)[287] ::", 8.988465674311575E305 <= Math.nextAfter((Double.MAX_VALUE / 200),+10.0D) && 8.988465674311578E305 >= Math.nextAfter((Double.MAX_VALUE / 200),+10.0D));
assertEquals("nextAfter(double,double)[288] ::", (double)8.988465674311577E305, StrictMath.nextAfter((Double.MAX_VALUE / 200),+3327.191D));
assertTrue("nextAfter(double,double)[289] ::", 8.988465674311575E305 <= Math.nextAfter((Double.MAX_VALUE / 200),+3327.191D) && 8.988465674311578E305 >= Math.nextAfter((Double.MAX_VALUE / 200),+3327.191D));
assertEquals("nextAfter(double,double)[290] ::", (double)8.988465674311577E305, StrictMath.nextAfter((Double.MAX_VALUE / 200),-0.0D));
assertTrue("nextAfter(double,double)[291] ::", 8.988465674311575E305 <= Math.nextAfter((Double.MAX_VALUE / 200),-0.0D) && 8.988465674311578E305 >= Math.nextAfter((Double.MAX_VALUE / 200),-0.0D));
assertEquals("nextAfter(double,double)[292] ::", (double)8.988465674311577E305, StrictMath.nextAfter((Double.MAX_VALUE / 200),-0.0001D));
assertTrue("nextAfter(double,double)[293] ::", 8.988465674311575E305 <= Math.nextAfter((Double.MAX_VALUE / 200),-0.0001D) && 8.988465674311578E305 >= Math.nextAfter((Double.MAX_VALUE / 200),-0.0001D));
assertEquals("nextAfter(double,double)[294] ::", (double)8.988465674311577E305, StrictMath.nextAfter((Double.MAX_VALUE / 200),-1.0D));
assertTrue("nextAfter(double,double)[295] ::", 8.988465674311575E305 <= Math.nextAfter((Double.MAX_VALUE / 200),-1.0D) && 8.988465674311578E305 >= Math.nextAfter((Double.MAX_VALUE / 200),-1.0D));
assertEquals("nextAfter(double,double)[296] ::", (double)8.988465674311577E305, StrictMath.nextAfter((Double.MAX_VALUE / 200),-10.0D));
assertTrue("nextAfter(double,double)[297] ::", 8.988465674311575E305 <= Math.nextAfter((Double.MAX_VALUE / 200),-10.0D) && 8.988465674311578E305 >= Math.nextAfter((Double.MAX_VALUE / 200),-10.0D));
assertEquals("nextAfter(double,double)[298] ::", (double)8.988465674311577E305, StrictMath.nextAfter((Double.MAX_VALUE / 200),-3327.191D));
assertTrue("nextAfter(double,double)[299] ::", 8.988465674311575E305 <= Math.nextAfter((Double.MAX_VALUE / 200),-3327.191D) && 8.988465674311578E305 >= Math.nextAfter((Double.MAX_VALUE / 200),-3327.191D));
assertEquals("nextAfter(double,double)[300] ::", (double)1.7976931348623155E308, StrictMath.nextAfter(Double.MAX_VALUE,+0.0D));
assertTrue("nextAfter(double,double)[301] ::", 1.7976931348623153E308 <= Math.nextAfter(Double.MAX_VALUE,+0.0D) && 1.7976931348623157E308 >= Math.nextAfter(Double.MAX_VALUE,+0.0D));
assertEquals("nextAfter(double,double)[302] ::", (double)1.7976931348623155E308, StrictMath.nextAfter(Double.MAX_VALUE,+0.0001D));
assertTrue("nextAfter(double,double)[303] ::", 1.7976931348623153E308 <= Math.nextAfter(Double.MAX_VALUE,+0.0001D) && 1.7976931348623157E308 >= Math.nextAfter(Double.MAX_VALUE,+0.0001D));
assertEquals("nextAfter(double,double)[304] ::", (double)1.7976931348623155E308, StrictMath.nextAfter(Double.MAX_VALUE,+1.0D));
assertTrue("nextAfter(double,double)[305] ::", 1.7976931348623153E308 <= Math.nextAfter(Double.MAX_VALUE,+1.0D) && 1.7976931348623157E308 >= Math.nextAfter(Double.MAX_VALUE,+1.0D));
assertEquals("nextAfter(double,double)[306] ::", (double)1.7976931348623155E308, StrictMath.nextAfter(Double.MAX_VALUE,+10.0D));
assertTrue("nextAfter(double,double)[307] ::", 1.7976931348623153E308 <= Math.nextAfter(Double.MAX_VALUE,+10.0D) && 1.7976931348623157E308 >= Math.nextAfter(Double.MAX_VALUE,+10.0D));
assertEquals("nextAfter(double,double)[308] ::", (double)1.7976931348623155E308, StrictMath.nextAfter(Double.MAX_VALUE,+3327.191D));
assertTrue("nextAfter(double,double)[309] ::", 1.7976931348623153E308 <= Math.nextAfter(Double.MAX_VALUE,+3327.191D) && 1.7976931348623157E308 >= Math.nextAfter(Double.MAX_VALUE,+3327.191D));
assertEquals("nextAfter(double,double)[310] ::", (double)1.7976931348623155E308, StrictMath.nextAfter(Double.MAX_VALUE,-0.0D));
assertTrue("nextAfter(double,double)[311] ::", 1.7976931348623153E308 <= Math.nextAfter(Double.MAX_VALUE,-0.0D) && 1.7976931348623157E308 >= Math.nextAfter(Double.MAX_VALUE,-0.0D));
assertEquals("nextAfter(double,double)[312] ::", (double)1.7976931348623155E308, StrictMath.nextAfter(Double.MAX_VALUE,-0.0001D));
assertTrue("nextAfter(double,double)[313] ::", 1.7976931348623153E308 <= Math.nextAfter(Double.MAX_VALUE,-0.0001D) && 1.7976931348623157E308 >= Math.nextAfter(Double.MAX_VALUE,-0.0001D));
assertEquals("nextAfter(double,double)[314] ::", (double)1.7976931348623155E308, StrictMath.nextAfter(Double.MAX_VALUE,-1.0D));
assertTrue("nextAfter(double,double)[315] ::", 1.7976931348623153E308 <= Math.nextAfter(Double.MAX_VALUE,-1.0D) && 1.7976931348623157E308 >= Math.nextAfter(Double.MAX_VALUE,-1.0D));
assertEquals("nextAfter(double,double)[316] ::", (double)1.7976931348623155E308, StrictMath.nextAfter(Double.MAX_VALUE,-10.0D));
assertTrue("nextAfter(double,double)[317] ::", 1.7976931348623153E308 <= Math.nextAfter(Double.MAX_VALUE,-10.0D) && 1.7976931348623157E308 >= Math.nextAfter(Double.MAX_VALUE,-10.0D));
assertEquals("nextAfter(double,double)[318] ::", (double)1.7976931348623155E308, StrictMath.nextAfter(Double.MAX_VALUE,-3327.191D));
assertTrue("nextAfter(double,double)[319] ::", 1.7976931348623153E308 <= Math.nextAfter(Double.MAX_VALUE,-3327.191D) && 1.7976931348623157E308 >= Math.nextAfter(Double.MAX_VALUE,-3327.191D));
assertEquals("nextAfter(double,double)[320] ::", (double)1.7976931348623155E308, StrictMath.nextAfter(Double.MAX_VALUE + 1,+0.0D));
assertTrue("nextAfter(double,double)[321] ::", 1.7976931348623153E308 <= Math.nextAfter(Double.MAX_VALUE + 1,+0.0D) && 1.7976931348623157E308 >= Math.nextAfter(Double.MAX_VALUE + 1,+0.0D));
assertEquals("nextAfter(double,double)[322] ::", (double)1.7976931348623155E308, StrictMath.nextAfter(Double.MAX_VALUE + 1,+0.0001D));
assertTrue("nextAfter(double,double)[323] ::", 1.7976931348623153E308 <= Math.nextAfter(Double.MAX_VALUE + 1,+0.0001D) && 1.7976931348623157E308 >= Math.nextAfter(Double.MAX_VALUE + 1,+0.0001D));
assertEquals("nextAfter(double,double)[324] ::", (double)1.7976931348623155E308, StrictMath.nextAfter(Double.MAX_VALUE + 1,+1.0D));
assertTrue("nextAfter(double,double)[325] ::", 1.7976931348623153E308 <= Math.nextAfter(Double.MAX_VALUE + 1,+1.0D) && 1.7976931348623157E308 >= Math.nextAfter(Double.MAX_VALUE + 1,+1.0D));
assertEquals("nextAfter(double,double)[326] ::", (double)1.7976931348623155E308, StrictMath.nextAfter(Double.MAX_VALUE + 1,+10.0D));
assertTrue("nextAfter(double,double)[327] ::", 1.7976931348623153E308 <= Math.nextAfter(Double.MAX_VALUE + 1,+10.0D) && 1.7976931348623157E308 >= Math.nextAfter(Double.MAX_VALUE + 1,+10.0D));
assertEquals("nextAfter(double,double)[328] ::", (double)1.7976931348623155E308, StrictMath.nextAfter(Double.MAX_VALUE + 1,+3327.191D));
assertTrue("nextAfter(double,double)[329] ::", 1.7976931348623153E308 <= Math.nextAfter(Double.MAX_VALUE + 1,+3327.191D) && 1.7976931348623157E308 >= Math.nextAfter(Double.MAX_VALUE + 1,+3327.191D));
assertEquals("nextAfter(double,double)[330] ::", (double)1.7976931348623155E308, StrictMath.nextAfter(Double.MAX_VALUE + 1,-0.0D));
assertTrue("nextAfter(double,double)[331] ::", 1.7976931348623153E308 <= Math.nextAfter(Double.MAX_VALUE + 1,-0.0D) && 1.7976931348623157E308 >= Math.nextAfter(Double.MAX_VALUE + 1,-0.0D));
assertEquals("nextAfter(double,double)[332] ::", (double)1.7976931348623155E308, StrictMath.nextAfter(Double.MAX_VALUE + 1,-0.0001D));
assertTrue("nextAfter(double,double)[333] ::", 1.7976931348623153E308 <= Math.nextAfter(Double.MAX_VALUE + 1,-0.0001D) && 1.7976931348623157E308 >= Math.nextAfter(Double.MAX_VALUE + 1,-0.0001D));
assertEquals("nextAfter(double,double)[334] ::", (double)1.7976931348623155E308, StrictMath.nextAfter(Double.MAX_VALUE + 1,-1.0D));
assertTrue("nextAfter(double,double)[335] ::", 1.7976931348623153E308 <= Math.nextAfter(Double.MAX_VALUE + 1,-1.0D) && 1.7976931348623157E308 >= Math.nextAfter(Double.MAX_VALUE + 1,-1.0D));
assertEquals("nextAfter(double,double)[336] ::", (double)1.7976931348623155E308, StrictMath.nextAfter(Double.MAX_VALUE + 1,-10.0D));
assertTrue("nextAfter(double,double)[337] ::", 1.7976931348623153E308 <= Math.nextAfter(Double.MAX_VALUE + 1,-10.0D) && 1.7976931348623157E308 >= Math.nextAfter(Double.MAX_VALUE + 1,-10.0D));
assertEquals("nextAfter(double,double)[338] ::", (double)1.7976931348623155E308, StrictMath.nextAfter(Double.MAX_VALUE + 1,-3327.191D));
assertTrue("nextAfter(double,double)[339] ::", 1.7976931348623153E308 <= Math.nextAfter(Double.MAX_VALUE + 1,-3327.191D) && 1.7976931348623157E308 >= Math.nextAfter(Double.MAX_VALUE + 1,-3327.191D));
}

public void testNextAfter_float()
{
assertEquals("nextAfter(float,double)[0] ::", (float)-3.4028233E38, StrictMath.nextAfter(-Float.MAX_VALUE,+0.0D));
assertTrue("nextAfter(float,double)[1] ::", -3.4028234663852886E38 <= Math.nextAfter(-Float.MAX_VALUE,+0.0D) && -3.4028230607370965E38 >= Math.nextAfter(-Float.MAX_VALUE,+0.0D));
assertEquals("nextAfter(float,double)[2] ::", (float)-3.4028233E38, StrictMath.nextAfter(-Float.MAX_VALUE,+0.0001D));
assertTrue("nextAfter(float,double)[3] ::", -3.4028234663852886E38 <= Math.nextAfter(-Float.MAX_VALUE,+0.0001D) && -3.4028230607370965E38 >= Math.nextAfter(-Float.MAX_VALUE,+0.0001D));
assertEquals("nextAfter(float,double)[4] ::", (float)-3.4028233E38, StrictMath.nextAfter(-Float.MAX_VALUE,+1.0D));
assertTrue("nextAfter(float,double)[5] ::", -3.4028234663852886E38 <= Math.nextAfter(-Float.MAX_VALUE,+1.0D) && -3.4028230607370965E38 >= Math.nextAfter(-Float.MAX_VALUE,+1.0D));
assertEquals("nextAfter(float,double)[6] ::", (float)-3.4028233E38, StrictMath.nextAfter(-Float.MAX_VALUE,+10.0D));
assertTrue("nextAfter(float,double)[7] ::", -3.4028234663852886E38 <= Math.nextAfter(-Float.MAX_VALUE,+10.0D) && -3.4028230607370965E38 >= Math.nextAfter(-Float.MAX_VALUE,+10.0D));
assertEquals("nextAfter(float,double)[8] ::", (float)-3.4028233E38, StrictMath.nextAfter(-Float.MAX_VALUE,+3327.191D));
assertTrue("nextAfter(float,double)[9] ::", -3.4028234663852886E38 <= Math.nextAfter(-Float.MAX_VALUE,+3327.191D) && -3.4028230607370965E38 >= Math.nextAfter(-Float.MAX_VALUE,+3327.191D));
assertEquals("nextAfter(float,double)[10] ::", (float)-3.4028233E38, StrictMath.nextAfter(-Float.MAX_VALUE,-0.0D));
assertTrue("nextAfter(float,double)[11] ::", -3.4028234663852886E38 <= Math.nextAfter(-Float.MAX_VALUE,-0.0D) && -3.4028230607370965E38 >= Math.nextAfter(-Float.MAX_VALUE,-0.0D));
assertEquals("nextAfter(float,double)[12] ::", (float)-3.4028233E38, StrictMath.nextAfter(-Float.MAX_VALUE,-0.0001D));
assertTrue("nextAfter(float,double)[13] ::", -3.4028234663852886E38 <= Math.nextAfter(-Float.MAX_VALUE,-0.0001D) && -3.4028230607370965E38 >= Math.nextAfter(-Float.MAX_VALUE,-0.0001D));
assertEquals("nextAfter(float,double)[14] ::", (float)-3.4028233E38, StrictMath.nextAfter(-Float.MAX_VALUE,-1.0D));
assertTrue("nextAfter(float,double)[15] ::", -3.4028234663852886E38 <= Math.nextAfter(-Float.MAX_VALUE,-1.0D) && -3.4028230607370965E38 >= Math.nextAfter(-Float.MAX_VALUE,-1.0D));
assertEquals("nextAfter(float,double)[16] ::", (float)-3.4028233E38, StrictMath.nextAfter(-Float.MAX_VALUE,-10.0D));
assertTrue("nextAfter(float,double)[17] ::", -3.4028234663852886E38 <= Math.nextAfter(-Float.MAX_VALUE,-10.0D) && -3.4028230607370965E38 >= Math.nextAfter(-Float.MAX_VALUE,-10.0D));
assertEquals("nextAfter(float,double)[18] ::", (float)-3.4028233E38, StrictMath.nextAfter(-Float.MAX_VALUE,-3327.191D));
assertTrue("nextAfter(float,double)[19] ::", -3.4028234663852886E38 <= Math.nextAfter(-Float.MAX_VALUE,-3327.191D) && -3.4028230607370965E38 >= Math.nextAfter(-Float.MAX_VALUE,-3327.191D));
assertEquals("nextAfter(float,double)[20] ::", (float)-1.7014116E36, StrictMath.nextAfter((-Float.MAX_VALUE / 200),+0.0D));
assertTrue("nextAfter(float,double)[21] ::", -1.7014117965751743E36 <= Math.nextAfter((-Float.MAX_VALUE / 200),+0.0D) && -1.7014114796625243E36 >= Math.nextAfter((-Float.MAX_VALUE / 200),+0.0D));
assertEquals("nextAfter(float,double)[22] ::", (float)-1.7014116E36, StrictMath.nextAfter((-Float.MAX_VALUE / 200),+0.0001D));
assertTrue("nextAfter(float,double)[23] ::", -1.7014117965751743E36 <= Math.nextAfter((-Float.MAX_VALUE / 200),+0.0001D) && -1.7014114796625243E36 >= Math.nextAfter((-Float.MAX_VALUE / 200),+0.0001D));
assertEquals("nextAfter(float,double)[24] ::", (float)-1.7014116E36, StrictMath.nextAfter((-Float.MAX_VALUE / 200),+1.0D));
assertTrue("nextAfter(float,double)[25] ::", -1.7014117965751743E36 <= Math.nextAfter((-Float.MAX_VALUE / 200),+1.0D) && -1.7014114796625243E36 >= Math.nextAfter((-Float.MAX_VALUE / 200),+1.0D));
assertEquals("nextAfter(float,double)[26] ::", (float)-1.7014116E36, StrictMath.nextAfter((-Float.MAX_VALUE / 200),+10.0D));
assertTrue("nextAfter(float,double)[27] ::", -1.7014117965751743E36 <= Math.nextAfter((-Float.MAX_VALUE / 200),+10.0D) && -1.7014114796625243E36 >= Math.nextAfter((-Float.MAX_VALUE / 200),+10.0D));
assertEquals("nextAfter(float,double)[28] ::", (float)-1.7014116E36, StrictMath.nextAfter((-Float.MAX_VALUE / 200),+3327.191D));
assertTrue("nextAfter(float,double)[29] ::", -1.7014117965751743E36 <= Math.nextAfter((-Float.MAX_VALUE / 200),+3327.191D) && -1.7014114796625243E36 >= Math.nextAfter((-Float.MAX_VALUE / 200),+3327.191D));
assertEquals("nextAfter(float,double)[30] ::", (float)-1.7014116E36, StrictMath.nextAfter((-Float.MAX_VALUE / 200),-0.0D));
assertTrue("nextAfter(float,double)[31] ::", -1.7014117965751743E36 <= Math.nextAfter((-Float.MAX_VALUE / 200),-0.0D) && -1.7014114796625243E36 >= Math.nextAfter((-Float.MAX_VALUE / 200),-0.0D));
assertEquals("nextAfter(float,double)[32] ::", (float)-1.7014116E36, StrictMath.nextAfter((-Float.MAX_VALUE / 200),-0.0001D));
assertTrue("nextAfter(float,double)[33] ::", -1.7014117965751743E36 <= Math.nextAfter((-Float.MAX_VALUE / 200),-0.0001D) && -1.7014114796625243E36 >= Math.nextAfter((-Float.MAX_VALUE / 200),-0.0001D));
assertEquals("nextAfter(float,double)[34] ::", (float)-1.7014116E36, StrictMath.nextAfter((-Float.MAX_VALUE / 200),-1.0D));
assertTrue("nextAfter(float,double)[35] ::", -1.7014117965751743E36 <= Math.nextAfter((-Float.MAX_VALUE / 200),-1.0D) && -1.7014114796625243E36 >= Math.nextAfter((-Float.MAX_VALUE / 200),-1.0D));
assertEquals("nextAfter(float,double)[36] ::", (float)-1.7014116E36, StrictMath.nextAfter((-Float.MAX_VALUE / 200),-10.0D));
assertTrue("nextAfter(float,double)[37] ::", -1.7014117965751743E36 <= Math.nextAfter((-Float.MAX_VALUE / 200),-10.0D) && -1.7014114796625243E36 >= Math.nextAfter((-Float.MAX_VALUE / 200),-10.0D));
assertEquals("nextAfter(float,double)[38] ::", (float)-1.7014116E36, StrictMath.nextAfter((-Float.MAX_VALUE / 200),-3327.191D));
assertTrue("nextAfter(float,double)[39] ::", -1.7014117965751743E36 <= Math.nextAfter((-Float.MAX_VALUE / 200),-3327.191D) && -1.7014114796625243E36 >= Math.nextAfter((-Float.MAX_VALUE / 200),-3327.191D));
assertEquals("nextAfter(float,double)[40] ::", (float)-6.805646E35, StrictMath.nextAfter((-Float.MAX_VALUE / 500),+0.0D));
assertTrue("nextAfter(float,double)[41] ::", -6.805646869388047E35 <= Math.nextAfter((-Float.MAX_VALUE / 500),+0.0D) && -6.805645284824797E35 >= Math.nextAfter((-Float.MAX_VALUE / 500),+0.0D));
assertEquals("nextAfter(float,double)[42] ::", (float)-6.805646E35, StrictMath.nextAfter((-Float.MAX_VALUE / 500),+0.0001D));
assertTrue("nextAfter(float,double)[43] ::", -6.805646869388047E35 <= Math.nextAfter((-Float.MAX_VALUE / 500),+0.0001D) && -6.805645284824797E35 >= Math.nextAfter((-Float.MAX_VALUE / 500),+0.0001D));
assertEquals("nextAfter(float,double)[44] ::", (float)-6.805646E35, StrictMath.nextAfter((-Float.MAX_VALUE / 500),+1.0D));
assertTrue("nextAfter(float,double)[45] ::", -6.805646869388047E35 <= Math.nextAfter((-Float.MAX_VALUE / 500),+1.0D) && -6.805645284824797E35 >= Math.nextAfter((-Float.MAX_VALUE / 500),+1.0D));
assertEquals("nextAfter(float,double)[46] ::", (float)-6.805646E35, StrictMath.nextAfter((-Float.MAX_VALUE / 500),+10.0D));
assertTrue("nextAfter(float,double)[47] ::", -6.805646869388047E35 <= Math.nextAfter((-Float.MAX_VALUE / 500),+10.0D) && -6.805645284824797E35 >= Math.nextAfter((-Float.MAX_VALUE / 500),+10.0D));
assertEquals("nextAfter(float,double)[48] ::", (float)-6.805646E35, StrictMath.nextAfter((-Float.MAX_VALUE / 500),+3327.191D));
assertTrue("nextAfter(float,double)[49] ::", -6.805646869388047E35 <= Math.nextAfter((-Float.MAX_VALUE / 500),+3327.191D) && -6.805645284824797E35 >= Math.nextAfter((-Float.MAX_VALUE / 500),+3327.191D));
assertEquals("nextAfter(float,double)[50] ::", (float)-6.805646E35, StrictMath.nextAfter((-Float.MAX_VALUE / 500),-0.0D));
assertTrue("nextAfter(float,double)[51] ::", -6.805646869388047E35 <= Math.nextAfter((-Float.MAX_VALUE / 500),-0.0D) && -6.805645284824797E35 >= Math.nextAfter((-Float.MAX_VALUE / 500),-0.0D));
assertEquals("nextAfter(float,double)[52] ::", (float)-6.805646E35, StrictMath.nextAfter((-Float.MAX_VALUE / 500),-0.0001D));
assertTrue("nextAfter(float,double)[53] ::", -6.805646869388047E35 <= Math.nextAfter((-Float.MAX_VALUE / 500),-0.0001D) && -6.805645284824797E35 >= Math.nextAfter((-Float.MAX_VALUE / 500),-0.0001D));
assertEquals("nextAfter(float,double)[54] ::", (float)-6.805646E35, StrictMath.nextAfter((-Float.MAX_VALUE / 500),-1.0D));
assertTrue("nextAfter(float,double)[55] ::", -6.805646869388047E35 <= Math.nextAfter((-Float.MAX_VALUE / 500),-1.0D) && -6.805645284824797E35 >= Math.nextAfter((-Float.MAX_VALUE / 500),-1.0D));
assertEquals("nextAfter(float,double)[56] ::", (float)-6.805646E35, StrictMath.nextAfter((-Float.MAX_VALUE / 500),-10.0D));
assertTrue("nextAfter(float,double)[57] ::", -6.805646869388047E35 <= Math.nextAfter((-Float.MAX_VALUE / 500),-10.0D) && -6.805645284824797E35 >= Math.nextAfter((-Float.MAX_VALUE / 500),-10.0D));
assertEquals("nextAfter(float,double)[58] ::", (float)-6.805646E35, StrictMath.nextAfter((-Float.MAX_VALUE / 500),-3327.191D));
assertTrue("nextAfter(float,double)[59] ::", -6.805646869388047E35 <= Math.nextAfter((-Float.MAX_VALUE / 500),-3327.191D) && -6.805645284824797E35 >= Math.nextAfter((-Float.MAX_VALUE / 500),-3327.191D));
assertEquals("nextAfter(float,double)[60] ::", (float)-2.801E-42, StrictMath.nextAfter((-Float.MIN_VALUE * 2000),+0.0D));
assertTrue("nextAfter(float,double)[61] ::", -2.802596928649634E-42 <= Math.nextAfter((-Float.MIN_VALUE * 2000),+0.0D) && -2.7997943317209845E-42 >= Math.nextAfter((-Float.MIN_VALUE * 2000),+0.0D));
assertEquals("nextAfter(float,double)[62] ::", (float)-2.801E-42, StrictMath.nextAfter((-Float.MIN_VALUE * 2000),+0.0001D));
assertTrue("nextAfter(float,double)[63] ::", -2.802596928649634E-42 <= Math.nextAfter((-Float.MIN_VALUE * 2000),+0.0001D) && -2.7997943317209845E-42 >= Math.nextAfter((-Float.MIN_VALUE * 2000),+0.0001D));
assertEquals("nextAfter(float,double)[64] ::", (float)-2.801E-42, StrictMath.nextAfter((-Float.MIN_VALUE * 2000),+1.0D));
assertTrue("nextAfter(float,double)[65] ::", -2.802596928649634E-42 <= Math.nextAfter((-Float.MIN_VALUE * 2000),+1.0D) && -2.7997943317209845E-42 >= Math.nextAfter((-Float.MIN_VALUE * 2000),+1.0D));
assertEquals("nextAfter(float,double)[66] ::", (float)-2.801E-42, StrictMath.nextAfter((-Float.MIN_VALUE * 2000),+10.0D));
assertTrue("nextAfter(float,double)[67] ::", -2.802596928649634E-42 <= Math.nextAfter((-Float.MIN_VALUE * 2000),+10.0D) && -2.7997943317209845E-42 >= Math.nextAfter((-Float.MIN_VALUE * 2000),+10.0D));
assertEquals("nextAfter(float,double)[68] ::", (float)-2.801E-42, StrictMath.nextAfter((-Float.MIN_VALUE * 2000),+3327.191D));
assertTrue("nextAfter(float,double)[69] ::", -2.802596928649634E-42 <= Math.nextAfter((-Float.MIN_VALUE * 2000),+3327.191D) && -2.7997943317209845E-42 >= Math.nextAfter((-Float.MIN_VALUE * 2000),+3327.191D));
assertEquals("nextAfter(float,double)[70] ::", (float)-2.801E-42, StrictMath.nextAfter((-Float.MIN_VALUE * 2000),-0.0D));
assertTrue("nextAfter(float,double)[71] ::", -2.802596928649634E-42 <= Math.nextAfter((-Float.MIN_VALUE * 2000),-0.0D) && -2.7997943317209845E-42 >= Math.nextAfter((-Float.MIN_VALUE * 2000),-0.0D));
assertEquals("nextAfter(float,double)[72] ::", (float)-2.804E-42, StrictMath.nextAfter((-Float.MIN_VALUE * 2000),-0.0001D));
assertTrue("nextAfter(float,double)[73] ::", -2.8053995255782838E-42 <= Math.nextAfter((-Float.MIN_VALUE * 2000),-0.0001D) && -2.802596928649634E-42 >= Math.nextAfter((-Float.MIN_VALUE * 2000),-0.0001D));
assertEquals("nextAfter(float,double)[74] ::", (float)-2.804E-42, StrictMath.nextAfter((-Float.MIN_VALUE * 2000),-1.0D));
assertTrue("nextAfter(float,double)[75] ::", -2.8053995255782838E-42 <= Math.nextAfter((-Float.MIN_VALUE * 2000),-1.0D) && -2.802596928649634E-42 >= Math.nextAfter((-Float.MIN_VALUE * 2000),-1.0D));
assertEquals("nextAfter(float,double)[76] ::", (float)-2.804E-42, StrictMath.nextAfter((-Float.MIN_VALUE * 2000),-10.0D));
assertTrue("nextAfter(float,double)[77] ::", -2.8053995255782838E-42 <= Math.nextAfter((-Float.MIN_VALUE * 2000),-10.0D) && -2.802596928649634E-42 >= Math.nextAfter((-Float.MIN_VALUE * 2000),-10.0D));
assertEquals("nextAfter(float,double)[78] ::", (float)-2.804E-42, StrictMath.nextAfter((-Float.MIN_VALUE * 2000),-3327.191D));
assertTrue("nextAfter(float,double)[79] ::", -2.8053995255782838E-42 <= Math.nextAfter((-Float.MIN_VALUE * 2000),-3327.191D) && -2.802596928649634E-42 >= Math.nextAfter((-Float.MIN_VALUE * 2000),-3327.191D));
assertEquals("nextAfter(float,double)[80] ::", (float)-1.4E-42, StrictMath.nextAfter((-Float.MIN_VALUE * 1000),+0.0D));
assertTrue("nextAfter(float,double)[81] ::", -1.401298464324817E-42 <= Math.nextAfter((-Float.MIN_VALUE * 1000),+0.0D) && -1.3984958673961674E-42 >= Math.nextAfter((-Float.MIN_VALUE * 1000),+0.0D));
assertEquals("nextAfter(float,double)[82] ::", (float)-1.4E-42, StrictMath.nextAfter((-Float.MIN_VALUE * 1000),+0.0001D));
assertTrue("nextAfter(float,double)[83] ::", -1.401298464324817E-42 <= Math.nextAfter((-Float.MIN_VALUE * 1000),+0.0001D) && -1.3984958673961674E-42 >= Math.nextAfter((-Float.MIN_VALUE * 1000),+0.0001D));
assertEquals("nextAfter(float,double)[84] ::", (float)-1.4E-42, StrictMath.nextAfter((-Float.MIN_VALUE * 1000),+1.0D));
assertTrue("nextAfter(float,double)[85] ::", -1.401298464324817E-42 <= Math.nextAfter((-Float.MIN_VALUE * 1000),+1.0D) && -1.3984958673961674E-42 >= Math.nextAfter((-Float.MIN_VALUE * 1000),+1.0D));
assertEquals("nextAfter(float,double)[86] ::", (float)-1.4E-42, StrictMath.nextAfter((-Float.MIN_VALUE * 1000),+10.0D));
assertTrue("nextAfter(float,double)[87] ::", -1.401298464324817E-42 <= Math.nextAfter((-Float.MIN_VALUE * 1000),+10.0D) && -1.3984958673961674E-42 >= Math.nextAfter((-Float.MIN_VALUE * 1000),+10.0D));
assertEquals("nextAfter(float,double)[88] ::", (float)-1.4E-42, StrictMath.nextAfter((-Float.MIN_VALUE * 1000),+3327.191D));
assertTrue("nextAfter(float,double)[89] ::", -1.401298464324817E-42 <= Math.nextAfter((-Float.MIN_VALUE * 1000),+3327.191D) && -1.3984958673961674E-42 >= Math.nextAfter((-Float.MIN_VALUE * 1000),+3327.191D));
assertEquals("nextAfter(float,double)[90] ::", (float)-1.4E-42, StrictMath.nextAfter((-Float.MIN_VALUE * 1000),-0.0D));
assertTrue("nextAfter(float,double)[91] ::", -1.401298464324817E-42 <= Math.nextAfter((-Float.MIN_VALUE * 1000),-0.0D) && -1.3984958673961674E-42 >= Math.nextAfter((-Float.MIN_VALUE * 1000),-0.0D));
assertEquals("nextAfter(float,double)[92] ::", (float)-1.403E-42, StrictMath.nextAfter((-Float.MIN_VALUE * 1000),-0.0001D));
assertTrue("nextAfter(float,double)[93] ::", -1.4041010612534667E-42 <= Math.nextAfter((-Float.MIN_VALUE * 1000),-0.0001D) && -1.401298464324817E-42 >= Math.nextAfter((-Float.MIN_VALUE * 1000),-0.0001D));
assertEquals("nextAfter(float,double)[94] ::", (float)-1.403E-42, StrictMath.nextAfter((-Float.MIN_VALUE * 1000),-1.0D));
assertTrue("nextAfter(float,double)[95] ::", -1.4041010612534667E-42 <= Math.nextAfter((-Float.MIN_VALUE * 1000),-1.0D) && -1.401298464324817E-42 >= Math.nextAfter((-Float.MIN_VALUE * 1000),-1.0D));
assertEquals("nextAfter(float,double)[96] ::", (float)-1.403E-42, StrictMath.nextAfter((-Float.MIN_VALUE * 1000),-10.0D));
assertTrue("nextAfter(float,double)[97] ::", -1.4041010612534667E-42 <= Math.nextAfter((-Float.MIN_VALUE * 1000),-10.0D) && -1.401298464324817E-42 >= Math.nextAfter((-Float.MIN_VALUE * 1000),-10.0D));
assertEquals("nextAfter(float,double)[98] ::", (float)-1.403E-42, StrictMath.nextAfter((-Float.MIN_VALUE * 1000),-3327.191D));
assertTrue("nextAfter(float,double)[99] ::", -1.4041010612534667E-42 <= Math.nextAfter((-Float.MIN_VALUE * 1000),-3327.191D) && -1.401298464324817E-42 >= Math.nextAfter((-Float.MIN_VALUE * 1000),-3327.191D));
assertEquals("nextAfter(float,double)[100] ::", (float)-3.2948746E7, StrictMath.nextAfter(-32948748.958324F,+0.0D));
assertTrue("nextAfter(float,double)[101] ::", -3.2948748E7 <= Math.nextAfter(-32948748.958324F,+0.0D) && -3.2948744E7 >= Math.nextAfter(-32948748.958324F,+0.0D));
assertEquals("nextAfter(float,double)[102] ::", (float)-3.2948746E7, StrictMath.nextAfter(-32948748.958324F,+0.0001D));
assertTrue("nextAfter(float,double)[103] ::", -3.2948748E7 <= Math.nextAfter(-32948748.958324F,+0.0001D) && -3.2948744E7 >= Math.nextAfter(-32948748.958324F,+0.0001D));
assertEquals("nextAfter(float,double)[104] ::", (float)-3.2948746E7, StrictMath.nextAfter(-32948748.958324F,+1.0D));
assertTrue("nextAfter(float,double)[105] ::", -3.2948748E7 <= Math.nextAfter(-32948748.958324F,+1.0D) && -3.2948744E7 >= Math.nextAfter(-32948748.958324F,+1.0D));
assertEquals("nextAfter(float,double)[106] ::", (float)-3.2948746E7, StrictMath.nextAfter(-32948748.958324F,+10.0D));
assertTrue("nextAfter(float,double)[107] ::", -3.2948748E7 <= Math.nextAfter(-32948748.958324F,+10.0D) && -3.2948744E7 >= Math.nextAfter(-32948748.958324F,+10.0D));
assertEquals("nextAfter(float,double)[108] ::", (float)-3.2948746E7, StrictMath.nextAfter(-32948748.958324F,+3327.191D));
assertTrue("nextAfter(float,double)[109] ::", -3.2948748E7 <= Math.nextAfter(-32948748.958324F,+3327.191D) && -3.2948744E7 >= Math.nextAfter(-32948748.958324F,+3327.191D));
assertEquals("nextAfter(float,double)[110] ::", (float)-3.2948746E7, StrictMath.nextAfter(-32948748.958324F,-0.0D));
assertTrue("nextAfter(float,double)[111] ::", -3.2948748E7 <= Math.nextAfter(-32948748.958324F,-0.0D) && -3.2948744E7 >= Math.nextAfter(-32948748.958324F,-0.0D));
assertEquals("nextAfter(float,double)[112] ::", (float)-3.2948746E7, StrictMath.nextAfter(-32948748.958324F,-0.0001D));
assertTrue("nextAfter(float,double)[113] ::", -3.2948748E7 <= Math.nextAfter(-32948748.958324F,-0.0001D) && -3.2948744E7 >= Math.nextAfter(-32948748.958324F,-0.0001D));
assertEquals("nextAfter(float,double)[114] ::", (float)-3.2948746E7, StrictMath.nextAfter(-32948748.958324F,-1.0D));
assertTrue("nextAfter(float,double)[115] ::", -3.2948748E7 <= Math.nextAfter(-32948748.958324F,-1.0D) && -3.2948744E7 >= Math.nextAfter(-32948748.958324F,-1.0D));
assertEquals("nextAfter(float,double)[116] ::", (float)-3.2948746E7, StrictMath.nextAfter(-32948748.958324F,-10.0D));
assertTrue("nextAfter(float,double)[117] ::", -3.2948748E7 <= Math.nextAfter(-32948748.958324F,-10.0D) && -3.2948744E7 >= Math.nextAfter(-32948748.958324F,-10.0D));
assertEquals("nextAfter(float,double)[118] ::", (float)-3.2948746E7, StrictMath.nextAfter(-32948748.958324F,-3327.191D));
assertTrue("nextAfter(float,double)[119] ::", -3.2948748E7 <= Math.nextAfter(-32948748.958324F,-3327.191D) && -3.2948744E7 >= Math.nextAfter(-32948748.958324F,-3327.191D));
assertEquals("nextAfter(float,double)[120] ::", (float)-8.999999E-9, StrictMath.nextAfter(-0.000000009F,+0.0D));
assertTrue("nextAfter(float,double)[121] ::", -8.99999985648492E-9 <= Math.nextAfter(-0.000000009F,+0.0D) && -8.99999808012808E-9 >= Math.nextAfter(-0.000000009F,+0.0D));
assertEquals("nextAfter(float,double)[122] ::", (float)-8.999999E-9, StrictMath.nextAfter(-0.000000009F,+0.0001D));
assertTrue("nextAfter(float,double)[123] ::", -8.99999985648492E-9 <= Math.nextAfter(-0.000000009F,+0.0001D) && -8.99999808012808E-9 >= Math.nextAfter(-0.000000009F,+0.0001D));
assertEquals("nextAfter(float,double)[124] ::", (float)-8.999999E-9, StrictMath.nextAfter(-0.000000009F,+1.0D));
assertTrue("nextAfter(float,double)[125] ::", -8.99999985648492E-9 <= Math.nextAfter(-0.000000009F,+1.0D) && -8.99999808012808E-9 >= Math.nextAfter(-0.000000009F,+1.0D));
assertEquals("nextAfter(float,double)[126] ::", (float)-8.999999E-9, StrictMath.nextAfter(-0.000000009F,+10.0D));
assertTrue("nextAfter(float,double)[127] ::", -8.99999985648492E-9 <= Math.nextAfter(-0.000000009F,+10.0D) && -8.99999808012808E-9 >= Math.nextAfter(-0.000000009F,+10.0D));
assertEquals("nextAfter(float,double)[128] ::", (float)-8.999999E-9, StrictMath.nextAfter(-0.000000009F,+3327.191D));
assertTrue("nextAfter(float,double)[129] ::", -8.99999985648492E-9 <= Math.nextAfter(-0.000000009F,+3327.191D) && -8.99999808012808E-9 >= Math.nextAfter(-0.000000009F,+3327.191D));
assertEquals("nextAfter(float,double)[130] ::", (float)-8.999999E-9, StrictMath.nextAfter(-0.000000009F,-0.0D));
assertTrue("nextAfter(float,double)[131] ::", -8.99999985648492E-9 <= Math.nextAfter(-0.000000009F,-0.0D) && -8.99999808012808E-9 >= Math.nextAfter(-0.000000009F,-0.0D));
assertEquals("nextAfter(float,double)[132] ::", (float)-9.000001E-9, StrictMath.nextAfter(-0.000000009F,-0.0001D));
assertTrue("nextAfter(float,double)[133] ::", -9.000001632841759E-9 <= Math.nextAfter(-0.000000009F,-0.0001D) && -8.99999985648492E-9 >= Math.nextAfter(-0.000000009F,-0.0001D));
assertEquals("nextAfter(float,double)[134] ::", (float)-9.000001E-9, StrictMath.nextAfter(-0.000000009F,-1.0D));
assertTrue("nextAfter(float,double)[135] ::", -9.000001632841759E-9 <= Math.nextAfter(-0.000000009F,-1.0D) && -8.99999985648492E-9 >= Math.nextAfter(-0.000000009F,-1.0D));
assertEquals("nextAfter(float,double)[136] ::", (float)-9.000001E-9, StrictMath.nextAfter(-0.000000009F,-10.0D));
assertTrue("nextAfter(float,double)[137] ::", -9.000001632841759E-9 <= Math.nextAfter(-0.000000009F,-10.0D) && -8.99999985648492E-9 >= Math.nextAfter(-0.000000009F,-10.0D));
assertEquals("nextAfter(float,double)[138] ::", (float)-9.000001E-9, StrictMath.nextAfter(-0.000000009F,-3327.191D));
assertTrue("nextAfter(float,double)[139] ::", -9.000001632841759E-9 <= Math.nextAfter(-0.000000009F,-3327.191D) && -8.99999985648492E-9 >= Math.nextAfter(-0.000000009F,-3327.191D));
assertEquals("nextAfter(float,double)[140] ::", (float)-1.9999999E-7, StrictMath.nextAfter(-0.0000002F,+0.0D));
assertTrue("nextAfter(float,double)[141] ::", -2.0000000233721948E-7 <= Math.nextAfter(-0.0000002F,+0.0D) && -1.9999997391551005E-7 >= Math.nextAfter(-0.0000002F,+0.0D));
assertEquals("nextAfter(float,double)[142] ::", (float)-1.9999999E-7, StrictMath.nextAfter(-0.0000002F,+0.0001D));
assertTrue("nextAfter(float,double)[143] ::", -2.0000000233721948E-7 <= Math.nextAfter(-0.0000002F,+0.0001D) && -1.9999997391551005E-7 >= Math.nextAfter(-0.0000002F,+0.0001D));
assertEquals("nextAfter(float,double)[144] ::", (float)-1.9999999E-7, StrictMath.nextAfter(-0.0000002F,+1.0D));
assertTrue("nextAfter(float,double)[145] ::", -2.0000000233721948E-7 <= Math.nextAfter(-0.0000002F,+1.0D) && -1.9999997391551005E-7 >= Math.nextAfter(-0.0000002F,+1.0D));
assertEquals("nextAfter(float,double)[146] ::", (float)-1.9999999E-7, StrictMath.nextAfter(-0.0000002F,+10.0D));
assertTrue("nextAfter(float,double)[147] ::", -2.0000000233721948E-7 <= Math.nextAfter(-0.0000002F,+10.0D) && -1.9999997391551005E-7 >= Math.nextAfter(-0.0000002F,+10.0D));
assertEquals("nextAfter(float,double)[148] ::", (float)-1.9999999E-7, StrictMath.nextAfter(-0.0000002F,+3327.191D));
assertTrue("nextAfter(float,double)[149] ::", -2.0000000233721948E-7 <= Math.nextAfter(-0.0000002F,+3327.191D) && -1.9999997391551005E-7 >= Math.nextAfter(-0.0000002F,+3327.191D));
assertEquals("nextAfter(float,double)[150] ::", (float)-1.9999999E-7, StrictMath.nextAfter(-0.0000002F,-0.0D));
assertTrue("nextAfter(float,double)[151] ::", -2.0000000233721948E-7 <= Math.nextAfter(-0.0000002F,-0.0D) && -1.9999997391551005E-7 >= Math.nextAfter(-0.0000002F,-0.0D));
assertEquals("nextAfter(float,double)[152] ::", (float)-2.0000002E-7, StrictMath.nextAfter(-0.0000002F,-0.0001D));
assertTrue("nextAfter(float,double)[153] ::", -2.0000003075892892E-7 <= Math.nextAfter(-0.0000002F,-0.0001D) && -2.0000000233721948E-7 >= Math.nextAfter(-0.0000002F,-0.0001D));
assertEquals("nextAfter(float,double)[154] ::", (float)-2.0000002E-7, StrictMath.nextAfter(-0.0000002F,-1.0D));
assertTrue("nextAfter(float,double)[155] ::", -2.0000003075892892E-7 <= Math.nextAfter(-0.0000002F,-1.0D) && -2.0000000233721948E-7 >= Math.nextAfter(-0.0000002F,-1.0D));
assertEquals("nextAfter(float,double)[156] ::", (float)-2.0000002E-7, StrictMath.nextAfter(-0.0000002F,-10.0D));
assertTrue("nextAfter(float,double)[157] ::", -2.0000003075892892E-7 <= Math.nextAfter(-0.0000002F,-10.0D) && -2.0000000233721948E-7 >= Math.nextAfter(-0.0000002F,-10.0D));
assertEquals("nextAfter(float,double)[158] ::", (float)-2.0000002E-7, StrictMath.nextAfter(-0.0000002F,-3327.191D));
assertTrue("nextAfter(float,double)[159] ::", -2.0000003075892892E-7 <= Math.nextAfter(-0.0000002F,-3327.191D) && -2.0000000233721948E-7 >= Math.nextAfter(-0.0000002F,-3327.191D));
assertEquals("nextAfter(float,double)[160] ::", (float)0.0, StrictMath.nextAfter(0F,+0.0D));
assertTrue("nextAfter(float,double)[161] ::", -1.401298464324817E-45 <= Math.nextAfter(0F,+0.0D) && 1.401298464324817E-45 >= Math.nextAfter(0F,+0.0D));
assertEquals("nextAfter(float,double)[162] ::", (float)1.4E-45, StrictMath.nextAfter(0F,+0.0001D));
assertTrue("nextAfter(float,double)[163] ::", 0.0 <= Math.nextAfter(0F,+0.0001D) && 2.802596928649634E-45 >= Math.nextAfter(0F,+0.0001D));
assertEquals("nextAfter(float,double)[164] ::", (float)1.4E-45, StrictMath.nextAfter(0F,+1.0D));
assertTrue("nextAfter(float,double)[165] ::", 0.0 <= Math.nextAfter(0F,+1.0D) && 2.802596928649634E-45 >= Math.nextAfter(0F,+1.0D));
assertEquals("nextAfter(float,double)[166] ::", (float)1.4E-45, StrictMath.nextAfter(0F,+10.0D));
assertTrue("nextAfter(float,double)[167] ::", 0.0 <= Math.nextAfter(0F,+10.0D) && 2.802596928649634E-45 >= Math.nextAfter(0F,+10.0D));
assertEquals("nextAfter(float,double)[168] ::", (float)1.4E-45, StrictMath.nextAfter(0F,+3327.191D));
assertTrue("nextAfter(float,double)[169] ::", 0.0 <= Math.nextAfter(0F,+3327.191D) && 2.802596928649634E-45 >= Math.nextAfter(0F,+3327.191D));
assertEquals("nextAfter(float,double)[170] ::", (float)-0.0, StrictMath.nextAfter(0F,-0.0D));
assertTrue("nextAfter(float,double)[171] ::", -1.401298464324817E-45 <= Math.nextAfter(0F,-0.0D) && 1.401298464324817E-45 >= Math.nextAfter(0F,-0.0D));
assertEquals("nextAfter(float,double)[172] ::", (float)-1.4E-45, StrictMath.nextAfter(0F,-0.0001D));
assertTrue("nextAfter(float,double)[173] ::", -2.802596928649634E-45 <= Math.nextAfter(0F,-0.0001D) && 0.0 >= Math.nextAfter(0F,-0.0001D));
assertEquals("nextAfter(float,double)[174] ::", (float)-1.4E-45, StrictMath.nextAfter(0F,-1.0D));
assertTrue("nextAfter(float,double)[175] ::", -2.802596928649634E-45 <= Math.nextAfter(0F,-1.0D) && 0.0 >= Math.nextAfter(0F,-1.0D));
assertEquals("nextAfter(float,double)[176] ::", (float)-1.4E-45, StrictMath.nextAfter(0F,-10.0D));
assertTrue("nextAfter(float,double)[177] ::", -2.802596928649634E-45 <= Math.nextAfter(0F,-10.0D) && 0.0 >= Math.nextAfter(0F,-10.0D));
assertEquals("nextAfter(float,double)[178] ::", (float)-1.4E-45, StrictMath.nextAfter(0F,-3327.191D));
assertTrue("nextAfter(float,double)[179] ::", -2.802596928649634E-45 <= Math.nextAfter(0F,-3327.191D) && 0.0 >= Math.nextAfter(0F,-3327.191D));
assertEquals("nextAfter(float,double)[180] ::", (float)0.4562323, StrictMath.nextAfter(0.456232334F,+0.0D));
assertTrue("nextAfter(float,double)[181] ::", 0.4562322795391083 <= Math.nextAfter(0.456232334F,+0.0D) && 0.45623233914375305 >= Math.nextAfter(0.456232334F,+0.0D));
assertEquals("nextAfter(float,double)[182] ::", (float)0.4562323, StrictMath.nextAfter(0.456232334F,+0.0001D));
assertTrue("nextAfter(float,double)[183] ::", 0.4562322795391083 <= Math.nextAfter(0.456232334F,+0.0001D) && 0.45623233914375305 >= Math.nextAfter(0.456232334F,+0.0001D));
assertEquals("nextAfter(float,double)[184] ::", (float)0.45623237, StrictMath.nextAfter(0.456232334F,+1.0D));
assertTrue("nextAfter(float,double)[185] ::", 0.45623233914375305 <= Math.nextAfter(0.456232334F,+1.0D) && 0.4562323987483978 >= Math.nextAfter(0.456232334F,+1.0D));
assertEquals("nextAfter(float,double)[186] ::", (float)0.45623237, StrictMath.nextAfter(0.456232334F,+10.0D));
assertTrue("nextAfter(float,double)[187] ::", 0.45623233914375305 <= Math.nextAfter(0.456232334F,+10.0D) && 0.4562323987483978 >= Math.nextAfter(0.456232334F,+10.0D));
assertEquals("nextAfter(float,double)[188] ::", (float)0.45623237, StrictMath.nextAfter(0.456232334F,+3327.191D));
assertTrue("nextAfter(float,double)[189] ::", 0.45623233914375305 <= Math.nextAfter(0.456232334F,+3327.191D) && 0.4562323987483978 >= Math.nextAfter(0.456232334F,+3327.191D));
assertEquals("nextAfter(float,double)[190] ::", (float)0.4562323, StrictMath.nextAfter(0.456232334F,-0.0D));
assertTrue("nextAfter(float,double)[191] ::", 0.4562322795391083 <= Math.nextAfter(0.456232334F,-0.0D) && 0.45623233914375305 >= Math.nextAfter(0.456232334F,-0.0D));
assertEquals("nextAfter(float,double)[192] ::", (float)0.4562323, StrictMath.nextAfter(0.456232334F,-0.0001D));
assertTrue("nextAfter(float,double)[193] ::", 0.4562322795391083 <= Math.nextAfter(0.456232334F,-0.0001D) && 0.45623233914375305 >= Math.nextAfter(0.456232334F,-0.0001D));
assertEquals("nextAfter(float,double)[194] ::", (float)0.4562323, StrictMath.nextAfter(0.456232334F,-1.0D));
assertTrue("nextAfter(float,double)[195] ::", 0.4562322795391083 <= Math.nextAfter(0.456232334F,-1.0D) && 0.45623233914375305 >= Math.nextAfter(0.456232334F,-1.0D));
assertEquals("nextAfter(float,double)[196] ::", (float)0.4562323, StrictMath.nextAfter(0.456232334F,-10.0D));
assertTrue("nextAfter(float,double)[197] ::", 0.4562322795391083 <= Math.nextAfter(0.456232334F,-10.0D) && 0.45623233914375305 >= Math.nextAfter(0.456232334F,-10.0D));
assertEquals("nextAfter(float,double)[198] ::", (float)0.4562323, StrictMath.nextAfter(0.456232334F,-3327.191D));
assertTrue("nextAfter(float,double)[199] ::", 0.4562322795391083 <= Math.nextAfter(0.456232334F,-3327.191D) && 0.45623233914375305 >= Math.nextAfter(0.456232334F,-3327.191D));
assertEquals("nextAfter(float,double)[200] ::", (float)1224257.1, StrictMath.nextAfter(1224257.312321263F,+0.0D));
assertTrue("nextAfter(float,double)[201] ::", 1224257.0 <= Math.nextAfter(1224257.312321263F,+0.0D) && 1224257.25 >= Math.nextAfter(1224257.312321263F,+0.0D));
assertEquals("nextAfter(float,double)[202] ::", (float)1224257.1, StrictMath.nextAfter(1224257.312321263F,+0.0001D));
assertTrue("nextAfter(float,double)[203] ::", 1224257.0 <= Math.nextAfter(1224257.312321263F,+0.0001D) && 1224257.25 >= Math.nextAfter(1224257.312321263F,+0.0001D));
assertEquals("nextAfter(float,double)[204] ::", (float)1224257.1, StrictMath.nextAfter(1224257.312321263F,+1.0D));
assertTrue("nextAfter(float,double)[205] ::", 1224257.0 <= Math.nextAfter(1224257.312321263F,+1.0D) && 1224257.25 >= Math.nextAfter(1224257.312321263F,+1.0D));
assertEquals("nextAfter(float,double)[206] ::", (float)1224257.1, StrictMath.nextAfter(1224257.312321263F,+10.0D));
assertTrue("nextAfter(float,double)[207] ::", 1224257.0 <= Math.nextAfter(1224257.312321263F,+10.0D) && 1224257.25 >= Math.nextAfter(1224257.312321263F,+10.0D));
assertEquals("nextAfter(float,double)[208] ::", (float)1224257.1, StrictMath.nextAfter(1224257.312321263F,+3327.191D));
assertTrue("nextAfter(float,double)[209] ::", 1224257.0 <= Math.nextAfter(1224257.312321263F,+3327.191D) && 1224257.25 >= Math.nextAfter(1224257.312321263F,+3327.191D));
assertEquals("nextAfter(float,double)[210] ::", (float)1224257.1, StrictMath.nextAfter(1224257.312321263F,-0.0D));
assertTrue("nextAfter(float,double)[211] ::", 1224257.0 <= Math.nextAfter(1224257.312321263F,-0.0D) && 1224257.25 >= Math.nextAfter(1224257.312321263F,-0.0D));
assertEquals("nextAfter(float,double)[212] ::", (float)1224257.1, StrictMath.nextAfter(1224257.312321263F,-0.0001D));
assertTrue("nextAfter(float,double)[213] ::", 1224257.0 <= Math.nextAfter(1224257.312321263F,-0.0001D) && 1224257.25 >= Math.nextAfter(1224257.312321263F,-0.0001D));
assertEquals("nextAfter(float,double)[214] ::", (float)1224257.1, StrictMath.nextAfter(1224257.312321263F,-1.0D));
assertTrue("nextAfter(float,double)[215] ::", 1224257.0 <= Math.nextAfter(1224257.312321263F,-1.0D) && 1224257.25 >= Math.nextAfter(1224257.312321263F,-1.0D));
assertEquals("nextAfter(float,double)[216] ::", (float)1224257.1, StrictMath.nextAfter(1224257.312321263F,-10.0D));
assertTrue("nextAfter(float,double)[217] ::", 1224257.0 <= Math.nextAfter(1224257.312321263F,-10.0D) && 1224257.25 >= Math.nextAfter(1224257.312321263F,-10.0D));
assertEquals("nextAfter(float,double)[218] ::", (float)1224257.1, StrictMath.nextAfter(1224257.312321263F,-3327.191D));
assertTrue("nextAfter(float,double)[219] ::", 1224257.0 <= Math.nextAfter(1224257.312321263F,-3327.191D) && 1224257.25 >= Math.nextAfter(1224257.312321263F,-3327.191D));
assertEquals("nextAfter(float,double)[220] ::", (float)9.999831E9, StrictMath.nextAfter(9999832342.12365F,+0.0D));
assertTrue("nextAfter(float,double)[221] ::", 9.999830016E9 <= Math.nextAfter(9999832342.12365F,+0.0D) && 9.999832064E9 >= Math.nextAfter(9999832342.12365F,+0.0D));
assertEquals("nextAfter(float,double)[222] ::", (float)9.999831E9, StrictMath.nextAfter(9999832342.12365F,+0.0001D));
assertTrue("nextAfter(float,double)[223] ::", 9.999830016E9 <= Math.nextAfter(9999832342.12365F,+0.0001D) && 9.999832064E9 >= Math.nextAfter(9999832342.12365F,+0.0001D));
assertEquals("nextAfter(float,double)[224] ::", (float)9.999831E9, StrictMath.nextAfter(9999832342.12365F,+1.0D));
assertTrue("nextAfter(float,double)[225] ::", 9.999830016E9 <= Math.nextAfter(9999832342.12365F,+1.0D) && 9.999832064E9 >= Math.nextAfter(9999832342.12365F,+1.0D));
assertEquals("nextAfter(float,double)[226] ::", (float)9.999831E9, StrictMath.nextAfter(9999832342.12365F,+10.0D));
assertTrue("nextAfter(float,double)[227] ::", 9.999830016E9 <= Math.nextAfter(9999832342.12365F,+10.0D) && 9.999832064E9 >= Math.nextAfter(9999832342.12365F,+10.0D));
assertEquals("nextAfter(float,double)[228] ::", (float)9.999831E9, StrictMath.nextAfter(9999832342.12365F,+3327.191D));
assertTrue("nextAfter(float,double)[229] ::", 9.999830016E9 <= Math.nextAfter(9999832342.12365F,+3327.191D) && 9.999832064E9 >= Math.nextAfter(9999832342.12365F,+3327.191D));
assertEquals("nextAfter(float,double)[230] ::", (float)9.999831E9, StrictMath.nextAfter(9999832342.12365F,-0.0D));
assertTrue("nextAfter(float,double)[231] ::", 9.999830016E9 <= Math.nextAfter(9999832342.12365F,-0.0D) && 9.999832064E9 >= Math.nextAfter(9999832342.12365F,-0.0D));
assertEquals("nextAfter(float,double)[232] ::", (float)9.999831E9, StrictMath.nextAfter(9999832342.12365F,-0.0001D));
assertTrue("nextAfter(float,double)[233] ::", 9.999830016E9 <= Math.nextAfter(9999832342.12365F,-0.0001D) && 9.999832064E9 >= Math.nextAfter(9999832342.12365F,-0.0001D));
assertEquals("nextAfter(float,double)[234] ::", (float)9.999831E9, StrictMath.nextAfter(9999832342.12365F,-1.0D));
assertTrue("nextAfter(float,double)[235] ::", 9.999830016E9 <= Math.nextAfter(9999832342.12365F,-1.0D) && 9.999832064E9 >= Math.nextAfter(9999832342.12365F,-1.0D));
assertEquals("nextAfter(float,double)[236] ::", (float)9.999831E9, StrictMath.nextAfter(9999832342.12365F,-10.0D));
assertTrue("nextAfter(float,double)[237] ::", 9.999830016E9 <= Math.nextAfter(9999832342.12365F,-10.0D) && 9.999832064E9 >= Math.nextAfter(9999832342.12365F,-10.0D));
assertEquals("nextAfter(float,double)[238] ::", (float)9.999831E9, StrictMath.nextAfter(9999832342.12365F,-3327.191D));
assertTrue("nextAfter(float,double)[239] ::", 9.999830016E9 <= Math.nextAfter(9999832342.12365F,-3327.191D) && 9.999832064E9 >= Math.nextAfter(9999832342.12365F,-3327.191D));
assertEquals("nextAfter(float,double)[240] ::", (float)0.0, StrictMath.nextAfter(Float.MIN_VALUE,+0.0D));
assertTrue("nextAfter(float,double)[241] ::", -1.401298464324817E-45 <= Math.nextAfter(Float.MIN_VALUE,+0.0D) && 1.401298464324817E-45 >= Math.nextAfter(Float.MIN_VALUE,+0.0D));
assertEquals("nextAfter(float,double)[242] ::", (float)2.8E-45, StrictMath.nextAfter(Float.MIN_VALUE,+0.0001D));
assertTrue("nextAfter(float,double)[243] ::", 1.401298464324817E-45 <= Math.nextAfter(Float.MIN_VALUE,+0.0001D) && 4.203895392974451E-45 >= Math.nextAfter(Float.MIN_VALUE,+0.0001D));
assertEquals("nextAfter(float,double)[244] ::", (float)2.8E-45, StrictMath.nextAfter(Float.MIN_VALUE,+1.0D));
assertTrue("nextAfter(float,double)[245] ::", 1.401298464324817E-45 <= Math.nextAfter(Float.MIN_VALUE,+1.0D) && 4.203895392974451E-45 >= Math.nextAfter(Float.MIN_VALUE,+1.0D));
assertEquals("nextAfter(float,double)[246] ::", (float)2.8E-45, StrictMath.nextAfter(Float.MIN_VALUE,+10.0D));
assertTrue("nextAfter(float,double)[247] ::", 1.401298464324817E-45 <= Math.nextAfter(Float.MIN_VALUE,+10.0D) && 4.203895392974451E-45 >= Math.nextAfter(Float.MIN_VALUE,+10.0D));
assertEquals("nextAfter(float,double)[248] ::", (float)2.8E-45, StrictMath.nextAfter(Float.MIN_VALUE,+3327.191D));
assertTrue("nextAfter(float,double)[249] ::", 1.401298464324817E-45 <= Math.nextAfter(Float.MIN_VALUE,+3327.191D) && 4.203895392974451E-45 >= Math.nextAfter(Float.MIN_VALUE,+3327.191D));
assertEquals("nextAfter(float,double)[250] ::", (float)0.0, StrictMath.nextAfter(Float.MIN_VALUE,-0.0D));
assertTrue("nextAfter(float,double)[251] ::", -1.401298464324817E-45 <= Math.nextAfter(Float.MIN_VALUE,-0.0D) && 1.401298464324817E-45 >= Math.nextAfter(Float.MIN_VALUE,-0.0D));
assertEquals("nextAfter(float,double)[252] ::", (float)0.0, StrictMath.nextAfter(Float.MIN_VALUE,-0.0001D));
assertTrue("nextAfter(float,double)[253] ::", -1.401298464324817E-45 <= Math.nextAfter(Float.MIN_VALUE,-0.0001D) && 1.401298464324817E-45 >= Math.nextAfter(Float.MIN_VALUE,-0.0001D));
assertEquals("nextAfter(float,double)[254] ::", (float)0.0, StrictMath.nextAfter(Float.MIN_VALUE,-1.0D));
assertTrue("nextAfter(float,double)[255] ::", -1.401298464324817E-45 <= Math.nextAfter(Float.MIN_VALUE,-1.0D) && 1.401298464324817E-45 >= Math.nextAfter(Float.MIN_VALUE,-1.0D));
assertEquals("nextAfter(float,double)[256] ::", (float)0.0, StrictMath.nextAfter(Float.MIN_VALUE,-10.0D));
assertTrue("nextAfter(float,double)[257] ::", -1.401298464324817E-45 <= Math.nextAfter(Float.MIN_VALUE,-10.0D) && 1.401298464324817E-45 >= Math.nextAfter(Float.MIN_VALUE,-10.0D));
assertEquals("nextAfter(float,double)[258] ::", (float)0.0, StrictMath.nextAfter(Float.MIN_VALUE,-3327.191D));
assertTrue("nextAfter(float,double)[259] ::", -1.401298464324817E-45 <= Math.nextAfter(Float.MIN_VALUE,-3327.191D) && 1.401298464324817E-45 >= Math.nextAfter(Float.MIN_VALUE,-3327.191D));
assertEquals("nextAfter(float,double)[260] ::", (float)2.79E-43, StrictMath.nextAfter((Float.MIN_VALUE * 200),+0.0D));
assertTrue("nextAfter(float,double)[261] ::", 2.7745709593631378E-43 <= Math.nextAfter((Float.MIN_VALUE * 200),+0.0D) && 2.802596928649634E-43 >= Math.nextAfter((Float.MIN_VALUE * 200),+0.0D));
assertEquals("nextAfter(float,double)[262] ::", (float)2.82E-43, StrictMath.nextAfter((Float.MIN_VALUE * 200),+0.0001D));
assertTrue("nextAfter(float,double)[263] ::", 2.802596928649634E-43 <= Math.nextAfter((Float.MIN_VALUE * 200),+0.0001D) && 2.8306228979361305E-43 >= Math.nextAfter((Float.MIN_VALUE * 200),+0.0001D));
assertEquals("nextAfter(float,double)[264] ::", (float)2.82E-43, StrictMath.nextAfter((Float.MIN_VALUE * 200),+1.0D));
assertTrue("nextAfter(float,double)[265] ::", 2.802596928649634E-43 <= Math.nextAfter((Float.MIN_VALUE * 200),+1.0D) && 2.8306228979361305E-43 >= Math.nextAfter((Float.MIN_VALUE * 200),+1.0D));
assertEquals("nextAfter(float,double)[266] ::", (float)2.82E-43, StrictMath.nextAfter((Float.MIN_VALUE * 200),+10.0D));
assertTrue("nextAfter(float,double)[267] ::", 2.802596928649634E-43 <= Math.nextAfter((Float.MIN_VALUE * 200),+10.0D) && 2.8306228979361305E-43 >= Math.nextAfter((Float.MIN_VALUE * 200),+10.0D));
assertEquals("nextAfter(float,double)[268] ::", (float)2.82E-43, StrictMath.nextAfter((Float.MIN_VALUE * 200),+3327.191D));
assertTrue("nextAfter(float,double)[269] ::", 2.802596928649634E-43 <= Math.nextAfter((Float.MIN_VALUE * 200),+3327.191D) && 2.8306228979361305E-43 >= Math.nextAfter((Float.MIN_VALUE * 200),+3327.191D));
assertEquals("nextAfter(float,double)[270] ::", (float)2.79E-43, StrictMath.nextAfter((Float.MIN_VALUE * 200),-0.0D));
assertTrue("nextAfter(float,double)[271] ::", 2.7745709593631378E-43 <= Math.nextAfter((Float.MIN_VALUE * 200),-0.0D) && 2.802596928649634E-43 >= Math.nextAfter((Float.MIN_VALUE * 200),-0.0D));
assertEquals("nextAfter(float,double)[272] ::", (float)2.79E-43, StrictMath.nextAfter((Float.MIN_VALUE * 200),-0.0001D));
assertTrue("nextAfter(float,double)[273] ::", 2.7745709593631378E-43 <= Math.nextAfter((Float.MIN_VALUE * 200),-0.0001D) && 2.802596928649634E-43 >= Math.nextAfter((Float.MIN_VALUE * 200),-0.0001D));
assertEquals("nextAfter(float,double)[274] ::", (float)2.79E-43, StrictMath.nextAfter((Float.MIN_VALUE * 200),-1.0D));
assertTrue("nextAfter(float,double)[275] ::", 2.7745709593631378E-43 <= Math.nextAfter((Float.MIN_VALUE * 200),-1.0D) && 2.802596928649634E-43 >= Math.nextAfter((Float.MIN_VALUE * 200),-1.0D));
assertEquals("nextAfter(float,double)[276] ::", (float)2.79E-43, StrictMath.nextAfter((Float.MIN_VALUE * 200),-10.0D));
assertTrue("nextAfter(float,double)[277] ::", 2.7745709593631378E-43 <= Math.nextAfter((Float.MIN_VALUE * 200),-10.0D) && 2.802596928649634E-43 >= Math.nextAfter((Float.MIN_VALUE * 200),-10.0D));
assertEquals("nextAfter(float,double)[278] ::", (float)2.79E-43, StrictMath.nextAfter((Float.MIN_VALUE * 200),-3327.191D));
assertTrue("nextAfter(float,double)[279] ::", 2.7745709593631378E-43 <= Math.nextAfter((Float.MIN_VALUE * 200),-3327.191D) && 2.802596928649634E-43 >= Math.nextAfter((Float.MIN_VALUE * 200),-3327.191D));
assertEquals("nextAfter(float,double)[280] ::", (float)6.805646E35, StrictMath.nextAfter((Float.MAX_VALUE / 500),+0.0D));
assertTrue("nextAfter(float,double)[281] ::", 6.805645284824797E35 <= Math.nextAfter((Float.MAX_VALUE / 500),+0.0D) && 6.805646869388047E35 >= Math.nextAfter((Float.MAX_VALUE / 500),+0.0D));
assertEquals("nextAfter(float,double)[282] ::", (float)6.805646E35, StrictMath.nextAfter((Float.MAX_VALUE / 500),+0.0001D));
assertTrue("nextAfter(float,double)[283] ::", 6.805645284824797E35 <= Math.nextAfter((Float.MAX_VALUE / 500),+0.0001D) && 6.805646869388047E35 >= Math.nextAfter((Float.MAX_VALUE / 500),+0.0001D));
assertEquals("nextAfter(float,double)[284] ::", (float)6.805646E35, StrictMath.nextAfter((Float.MAX_VALUE / 500),+1.0D));
assertTrue("nextAfter(float,double)[285] ::", 6.805645284824797E35 <= Math.nextAfter((Float.MAX_VALUE / 500),+1.0D) && 6.805646869388047E35 >= Math.nextAfter((Float.MAX_VALUE / 500),+1.0D));
assertEquals("nextAfter(float,double)[286] ::", (float)6.805646E35, StrictMath.nextAfter((Float.MAX_VALUE / 500),+10.0D));
assertTrue("nextAfter(float,double)[287] ::", 6.805645284824797E35 <= Math.nextAfter((Float.MAX_VALUE / 500),+10.0D) && 6.805646869388047E35 >= Math.nextAfter((Float.MAX_VALUE / 500),+10.0D));
assertEquals("nextAfter(float,double)[288] ::", (float)6.805646E35, StrictMath.nextAfter((Float.MAX_VALUE / 500),+3327.191D));
assertTrue("nextAfter(float,double)[289] ::", 6.805645284824797E35 <= Math.nextAfter((Float.MAX_VALUE / 500),+3327.191D) && 6.805646869388047E35 >= Math.nextAfter((Float.MAX_VALUE / 500),+3327.191D));
assertEquals("nextAfter(float,double)[290] ::", (float)6.805646E35, StrictMath.nextAfter((Float.MAX_VALUE / 500),-0.0D));
assertTrue("nextAfter(float,double)[291] ::", 6.805645284824797E35 <= Math.nextAfter((Float.MAX_VALUE / 500),-0.0D) && 6.805646869388047E35 >= Math.nextAfter((Float.MAX_VALUE / 500),-0.0D));
assertEquals("nextAfter(float,double)[292] ::", (float)6.805646E35, StrictMath.nextAfter((Float.MAX_VALUE / 500),-0.0001D));
assertTrue("nextAfter(float,double)[293] ::", 6.805645284824797E35 <= Math.nextAfter((Float.MAX_VALUE / 500),-0.0001D) && 6.805646869388047E35 >= Math.nextAfter((Float.MAX_VALUE / 500),-0.0001D));
assertEquals("nextAfter(float,double)[294] ::", (float)6.805646E35, StrictMath.nextAfter((Float.MAX_VALUE / 500),-1.0D));
assertTrue("nextAfter(float,double)[295] ::", 6.805645284824797E35 <= Math.nextAfter((Float.MAX_VALUE / 500),-1.0D) && 6.805646869388047E35 >= Math.nextAfter((Float.MAX_VALUE / 500),-1.0D));
assertEquals("nextAfter(float,double)[296] ::", (float)6.805646E35, StrictMath.nextAfter((Float.MAX_VALUE / 500),-10.0D));
assertTrue("nextAfter(float,double)[297] ::", 6.805645284824797E35 <= Math.nextAfter((Float.MAX_VALUE / 500),-10.0D) && 6.805646869388047E35 >= Math.nextAfter((Float.MAX_VALUE / 500),-10.0D));
assertEquals("nextAfter(float,double)[298] ::", (float)6.805646E35, StrictMath.nextAfter((Float.MAX_VALUE / 500),-3327.191D));
assertTrue("nextAfter(float,double)[299] ::", 6.805645284824797E35 <= Math.nextAfter((Float.MAX_VALUE / 500),-3327.191D) && 6.805646869388047E35 >= Math.nextAfter((Float.MAX_VALUE / 500),-3327.191D));
assertEquals("nextAfter(float,double)[300] ::", (float)1.7014116E36, StrictMath.nextAfter((Float.MAX_VALUE / 200),+0.0D));
assertTrue("nextAfter(float,double)[301] ::", 1.7014114796625243E36 <= Math.nextAfter((Float.MAX_VALUE / 200),+0.0D) && 1.7014117965751743E36 >= Math.nextAfter((Float.MAX_VALUE / 200),+0.0D));
assertEquals("nextAfter(float,double)[302] ::", (float)1.7014116E36, StrictMath.nextAfter((Float.MAX_VALUE / 200),+0.0001D));
assertTrue("nextAfter(float,double)[303] ::", 1.7014114796625243E36 <= Math.nextAfter((Float.MAX_VALUE / 200),+0.0001D) && 1.7014117965751743E36 >= Math.nextAfter((Float.MAX_VALUE / 200),+0.0001D));
assertEquals("nextAfter(float,double)[304] ::", (float)1.7014116E36, StrictMath.nextAfter((Float.MAX_VALUE / 200),+1.0D));
assertTrue("nextAfter(float,double)[305] ::", 1.7014114796625243E36 <= Math.nextAfter((Float.MAX_VALUE / 200),+1.0D) && 1.7014117965751743E36 >= Math.nextAfter((Float.MAX_VALUE / 200),+1.0D));
assertEquals("nextAfter(float,double)[306] ::", (float)1.7014116E36, StrictMath.nextAfter((Float.MAX_VALUE / 200),+10.0D));
assertTrue("nextAfter(float,double)[307] ::", 1.7014114796625243E36 <= Math.nextAfter((Float.MAX_VALUE / 200),+10.0D) && 1.7014117965751743E36 >= Math.nextAfter((Float.MAX_VALUE / 200),+10.0D));
assertEquals("nextAfter(float,double)[308] ::", (float)1.7014116E36, StrictMath.nextAfter((Float.MAX_VALUE / 200),+3327.191D));
assertTrue("nextAfter(float,double)[309] ::", 1.7014114796625243E36 <= Math.nextAfter((Float.MAX_VALUE / 200),+3327.191D) && 1.7014117965751743E36 >= Math.nextAfter((Float.MAX_VALUE / 200),+3327.191D));
assertEquals("nextAfter(float,double)[310] ::", (float)1.7014116E36, StrictMath.nextAfter((Float.MAX_VALUE / 200),-0.0D));
assertTrue("nextAfter(float,double)[311] ::", 1.7014114796625243E36 <= Math.nextAfter((Float.MAX_VALUE / 200),-0.0D) && 1.7014117965751743E36 >= Math.nextAfter((Float.MAX_VALUE / 200),-0.0D));
assertEquals("nextAfter(float,double)[312] ::", (float)1.7014116E36, StrictMath.nextAfter((Float.MAX_VALUE / 200),-0.0001D));
assertTrue("nextAfter(float,double)[313] ::", 1.7014114796625243E36 <= Math.nextAfter((Float.MAX_VALUE / 200),-0.0001D) && 1.7014117965751743E36 >= Math.nextAfter((Float.MAX_VALUE / 200),-0.0001D));
assertEquals("nextAfter(float,double)[314] ::", (float)1.7014116E36, StrictMath.nextAfter((Float.MAX_VALUE / 200),-1.0D));
assertTrue("nextAfter(float,double)[315] ::", 1.7014114796625243E36 <= Math.nextAfter((Float.MAX_VALUE / 200),-1.0D) && 1.7014117965751743E36 >= Math.nextAfter((Float.MAX_VALUE / 200),-1.0D));
assertEquals("nextAfter(float,double)[316] ::", (float)1.7014116E36, StrictMath.nextAfter((Float.MAX_VALUE / 200),-10.0D));
assertTrue("nextAfter(float,double)[317] ::", 1.7014114796625243E36 <= Math.nextAfter((Float.MAX_VALUE / 200),-10.0D) && 1.7014117965751743E36 >= Math.nextAfter((Float.MAX_VALUE / 200),-10.0D));
assertEquals("nextAfter(float,double)[318] ::", (float)1.7014116E36, StrictMath.nextAfter((Float.MAX_VALUE / 200),-3327.191D));
assertTrue("nextAfter(float,double)[319] ::", 1.7014114796625243E36 <= Math.nextAfter((Float.MAX_VALUE / 200),-3327.191D) && 1.7014117965751743E36 >= Math.nextAfter((Float.MAX_VALUE / 200),-3327.191D));
assertEquals("nextAfter(float,double)[320] ::", (float)3.4028233E38, StrictMath.nextAfter(Float.MAX_VALUE,+0.0D));
assertTrue("nextAfter(float,double)[321] ::", 3.4028230607370965E38 <= Math.nextAfter(Float.MAX_VALUE,+0.0D) && 3.4028234663852886E38 >= Math.nextAfter(Float.MAX_VALUE,+0.0D));
assertEquals("nextAfter(float,double)[322] ::", (float)3.4028233E38, StrictMath.nextAfter(Float.MAX_VALUE,+0.0001D));
assertTrue("nextAfter(float,double)[323] ::", 3.4028230607370965E38 <= Math.nextAfter(Float.MAX_VALUE,+0.0001D) && 3.4028234663852886E38 >= Math.nextAfter(Float.MAX_VALUE,+0.0001D));
assertEquals("nextAfter(float,double)[324] ::", (float)3.4028233E38, StrictMath.nextAfter(Float.MAX_VALUE,+1.0D));
assertTrue("nextAfter(float,double)[325] ::", 3.4028230607370965E38 <= Math.nextAfter(Float.MAX_VALUE,+1.0D) && 3.4028234663852886E38 >= Math.nextAfter(Float.MAX_VALUE,+1.0D));
assertEquals("nextAfter(float,double)[326] ::", (float)3.4028233E38, StrictMath.nextAfter(Float.MAX_VALUE,+10.0D));
assertTrue("nextAfter(float,double)[327] ::", 3.4028230607370965E38 <= Math.nextAfter(Float.MAX_VALUE,+10.0D) && 3.4028234663852886E38 >= Math.nextAfter(Float.MAX_VALUE,+10.0D));
assertEquals("nextAfter(float,double)[328] ::", (float)3.4028233E38, StrictMath.nextAfter(Float.MAX_VALUE,+3327.191D));
assertTrue("nextAfter(float,double)[329] ::", 3.4028230607370965E38 <= Math.nextAfter(Float.MAX_VALUE,+3327.191D) && 3.4028234663852886E38 >= Math.nextAfter(Float.MAX_VALUE,+3327.191D));
assertEquals("nextAfter(float,double)[330] ::", (float)3.4028233E38, StrictMath.nextAfter(Float.MAX_VALUE,-0.0D));
assertTrue("nextAfter(float,double)[331] ::", 3.4028230607370965E38 <= Math.nextAfter(Float.MAX_VALUE,-0.0D) && 3.4028234663852886E38 >= Math.nextAfter(Float.MAX_VALUE,-0.0D));
assertEquals("nextAfter(float,double)[332] ::", (float)3.4028233E38, StrictMath.nextAfter(Float.MAX_VALUE,-0.0001D));
assertTrue("nextAfter(float,double)[333] ::", 3.4028230607370965E38 <= Math.nextAfter(Float.MAX_VALUE,-0.0001D) && 3.4028234663852886E38 >= Math.nextAfter(Float.MAX_VALUE,-0.0001D));
assertEquals("nextAfter(float,double)[334] ::", (float)3.4028233E38, StrictMath.nextAfter(Float.MAX_VALUE,-1.0D));
assertTrue("nextAfter(float,double)[335] ::", 3.4028230607370965E38 <= Math.nextAfter(Float.MAX_VALUE,-1.0D) && 3.4028234663852886E38 >= Math.nextAfter(Float.MAX_VALUE,-1.0D));
assertEquals("nextAfter(float,double)[336] ::", (float)3.4028233E38, StrictMath.nextAfter(Float.MAX_VALUE,-10.0D));
assertTrue("nextAfter(float,double)[337] ::", 3.4028230607370965E38 <= Math.nextAfter(Float.MAX_VALUE,-10.0D) && 3.4028234663852886E38 >= Math.nextAfter(Float.MAX_VALUE,-10.0D));
assertEquals("nextAfter(float,double)[338] ::", (float)3.4028233E38, StrictMath.nextAfter(Float.MAX_VALUE,-3327.191D));
assertTrue("nextAfter(float,double)[339] ::", 3.4028230607370965E38 <= Math.nextAfter(Float.MAX_VALUE,-3327.191D) && 3.4028234663852886E38 >= Math.nextAfter(Float.MAX_VALUE,-3327.191D));
assertEquals("nextAfter(float,double)[340] ::", (float)3.4028233E38, StrictMath.nextAfter((Float.MAX_VALUE + 1),+0.0D));
assertTrue("nextAfter(float,double)[341] ::", 3.4028230607370965E38 <= Math.nextAfter((Float.MAX_VALUE + 1),+0.0D) && 3.4028234663852886E38 >= Math.nextAfter((Float.MAX_VALUE + 1),+0.0D));
assertEquals("nextAfter(float,double)[342] ::", (float)3.4028233E38, StrictMath.nextAfter((Float.MAX_VALUE + 1),+0.0001D));
assertTrue("nextAfter(float,double)[343] ::", 3.4028230607370965E38 <= Math.nextAfter((Float.MAX_VALUE + 1),+0.0001D) && 3.4028234663852886E38 >= Math.nextAfter((Float.MAX_VALUE + 1),+0.0001D));
assertEquals("nextAfter(float,double)[344] ::", (float)3.4028233E38, StrictMath.nextAfter((Float.MAX_VALUE + 1),+1.0D));
assertTrue("nextAfter(float,double)[345] ::", 3.4028230607370965E38 <= Math.nextAfter((Float.MAX_VALUE + 1),+1.0D) && 3.4028234663852886E38 >= Math.nextAfter((Float.MAX_VALUE + 1),+1.0D));
assertEquals("nextAfter(float,double)[346] ::", (float)3.4028233E38, StrictMath.nextAfter((Float.MAX_VALUE + 1),+10.0D));
assertTrue("nextAfter(float,double)[347] ::", 3.4028230607370965E38 <= Math.nextAfter((Float.MAX_VALUE + 1),+10.0D) && 3.4028234663852886E38 >= Math.nextAfter((Float.MAX_VALUE + 1),+10.0D));
assertEquals("nextAfter(float,double)[348] ::", (float)3.4028233E38, StrictMath.nextAfter((Float.MAX_VALUE + 1),+3327.191D));
assertTrue("nextAfter(float,double)[349] ::", 3.4028230607370965E38 <= Math.nextAfter((Float.MAX_VALUE + 1),+3327.191D) && 3.4028234663852886E38 >= Math.nextAfter((Float.MAX_VALUE + 1),+3327.191D));
assertEquals("nextAfter(float,double)[350] ::", (float)3.4028233E38, StrictMath.nextAfter((Float.MAX_VALUE + 1),-0.0D));
assertTrue("nextAfter(float,double)[351] ::", 3.4028230607370965E38 <= Math.nextAfter((Float.MAX_VALUE + 1),-0.0D) && 3.4028234663852886E38 >= Math.nextAfter((Float.MAX_VALUE + 1),-0.0D));
assertEquals("nextAfter(float,double)[352] ::", (float)3.4028233E38, StrictMath.nextAfter((Float.MAX_VALUE + 1),-0.0001D));
assertTrue("nextAfter(float,double)[353] ::", 3.4028230607370965E38 <= Math.nextAfter((Float.MAX_VALUE + 1),-0.0001D) && 3.4028234663852886E38 >= Math.nextAfter((Float.MAX_VALUE + 1),-0.0001D));
assertEquals("nextAfter(float,double)[354] ::", (float)3.4028233E38, StrictMath.nextAfter((Float.MAX_VALUE + 1),-1.0D));
assertTrue("nextAfter(float,double)[355] ::", 3.4028230607370965E38 <= Math.nextAfter((Float.MAX_VALUE + 1),-1.0D) && 3.4028234663852886E38 >= Math.nextAfter((Float.MAX_VALUE + 1),-1.0D));
assertEquals("nextAfter(float,double)[356] ::", (float)3.4028233E38, StrictMath.nextAfter((Float.MAX_VALUE + 1),-10.0D));
assertTrue("nextAfter(float,double)[357] ::", 3.4028230607370965E38 <= Math.nextAfter((Float.MAX_VALUE + 1),-10.0D) && 3.4028234663852886E38 >= Math.nextAfter((Float.MAX_VALUE + 1),-10.0D));
assertEquals("nextAfter(float,double)[358] ::", (float)3.4028233E38, StrictMath.nextAfter((Float.MAX_VALUE + 1),-3327.191D));
assertTrue("nextAfter(float,double)[359] ::", 3.4028230607370965E38 <= Math.nextAfter((Float.MAX_VALUE + 1),-3327.191D) && 3.4028234663852886E38 >= Math.nextAfter((Float.MAX_VALUE + 1),-3327.191D));
}

public void testNextUp_double()
{
assertEquals("nextUp(double)[0] ::", (double)-1.7976931348623155E308, StrictMath.nextUp(-Double.MAX_VALUE));
assertTrue("nextUp(double)[1] ::", -1.7976931348623157E308 <= Math.nextUp(-Double.MAX_VALUE) && -1.7976931348623153E308 >= Math.nextUp(-Double.MAX_VALUE));
assertEquals("nextUp(double)[2] ::", (double)-8.988465674311577E305, StrictMath.nextUp((-Double.MAX_VALUE / 200)));
assertTrue("nextUp(double)[3] ::", -8.988465674311578E305 <= Math.nextUp((-Double.MAX_VALUE / 200)) && -8.988465674311575E305 >= Math.nextUp((-Double.MAX_VALUE / 200)));
assertEquals("nextUp(double)[4] ::", (double)-3.59538626972463E305, StrictMath.nextUp((-Double.MAX_VALUE / 500)));
assertTrue("nextUp(double)[5] ::", -3.595386269724631E305 <= Math.nextUp((-Double.MAX_VALUE / 500)) && -3.5953862697246296E305 >= Math.nextUp((-Double.MAX_VALUE / 500)));
assertEquals("nextUp(double)[6] ::", (double)-9.876E-321, StrictMath.nextUp((-Double.MIN_VALUE * 2000)));
assertTrue("nextUp(double)[7] ::", -9.88E-321 <= Math.nextUp((-Double.MIN_VALUE * 2000)) && -9.87E-321 >= Math.nextUp((-Double.MIN_VALUE * 2000)));
assertEquals("nextUp(double)[8] ::", (double)-4.936E-321, StrictMath.nextUp((-Double.MIN_VALUE * 1000)));
assertTrue("nextUp(double)[9] ::", -4.94E-321 <= Math.nextUp((-Double.MIN_VALUE * 1000)) && -4.93E-321 >= Math.nextUp((-Double.MIN_VALUE * 1000)));
assertEquals("nextUp(double)[10] ::", (double)-2.929112212129231E9, StrictMath.nextUp(-2929112212.129231481346));
assertTrue("nextUp(double)[11] ::", -2.9291122121292315E9 <= Math.nextUp(-2929112212.129231481346) && -2.9291122121292305E9 >= Math.nextUp(-2929112212.129231481346));
assertEquals("nextUp(double)[12] ::", (double)-2372.2282119999995, StrictMath.nextUp(-2372.228212D));
assertTrue("nextUp(double)[13] ::", -2372.228212 <= Math.nextUp(-2372.228212D) && -2372.228211999999 >= Math.nextUp(-2372.228212D));
assertEquals("nextUp(double)[14] ::", (double)-1.2231999999999998, StrictMath.nextUp(-1.2232D));
assertTrue("nextUp(double)[15] ::", -1.2232 <= Math.nextUp(-1.2232D) && -1.2231999999999996 >= Math.nextUp(-1.2232D));
assertEquals("nextUp(double)[16] ::", (double)4.9E-324, StrictMath.nextUp(0D));
assertTrue("nextUp(double)[17] ::", 0.0 <= Math.nextUp(0D) && 1.0E-323 >= Math.nextUp(0D));
assertEquals("nextUp(double)[18] ::", (double)2.4322300000000006, StrictMath.nextUp(2.43223D));
assertTrue("nextUp(double)[19] ::", 2.43223 <= Math.nextUp(2.43223D) && 2.432230000000001 >= Math.nextUp(2.43223D));
assertEquals("nextUp(double)[20] ::", (double)1.8232155332356602E7, StrictMath.nextUp(18232155.3323566D));
assertTrue("nextUp(double)[21] ::", 1.82321553323566E7 <= Math.nextUp(18232155.3323566D) && 1.8232155332356606E7 >= Math.nextUp(18232155.3323566D));
assertEquals("nextUp(double)[22] ::", (double)1.0E-323, StrictMath.nextUp(Double.MIN_VALUE));
assertTrue("nextUp(double)[23] ::", 4.9E-324 <= Math.nextUp(Double.MIN_VALUE) && 1.5E-323 >= Math.nextUp(Double.MIN_VALUE));
assertEquals("nextUp(double)[24] ::", (double)9.93E-322, StrictMath.nextUp((Double.MIN_VALUE * 200)));
assertTrue("nextUp(double)[25] ::", 9.9E-322 <= Math.nextUp((Double.MIN_VALUE * 200)) && 1.0E-321 >= Math.nextUp((Double.MIN_VALUE * 200)));
assertEquals("nextUp(double)[26] ::", (double)3.595386269724632E305, StrictMath.nextUp((Double.MAX_VALUE / 500)));
assertTrue("nextUp(double)[27] ::", 3.595386269724631E305 <= Math.nextUp((Double.MAX_VALUE / 500)) && 3.595386269724633E305 >= Math.nextUp((Double.MAX_VALUE / 500)));
assertEquals("nextUp(double)[28] ::", (double)8.98846567431158E305, StrictMath.nextUp((Double.MAX_VALUE / 200)));
assertTrue("nextUp(double)[29] ::", 8.988465674311578E305 <= Math.nextUp((Double.MAX_VALUE / 200)) && 8.988465674311581E305 >= Math.nextUp((Double.MAX_VALUE / 200)));
assertEquals("nextUp(double)[30] ::", (double)Infinity, StrictMath.nextUp(Double.MAX_VALUE));
assertEquals("nextUp(double)[31] ::", (double)Infinity, Math.nextUp(Double.MAX_VALUE));
assertEquals("nextUp(double)[32] ::", (double)Infinity, StrictMath.nextUp(Double.MAX_VALUE + 1));
assertEquals("nextUp(double)[33] ::", (double)Infinity, Math.nextUp(Double.MAX_VALUE + 1));
}

public void testNextUp_float()
{
assertEquals("nextUp(float)[0] ::", (float)-3.4028233E38, StrictMath.nextUp(-Float.MAX_VALUE));
assertTrue("nextUp(float)[1] ::", -3.4028234663852886E38 <= Math.nextUp(-Float.MAX_VALUE) && -3.4028230607370965E38 >= Math.nextUp(-Float.MAX_VALUE));
assertEquals("nextUp(float)[2] ::", (float)-1.7014116E36, StrictMath.nextUp((-Float.MAX_VALUE / 200)));
assertTrue("nextUp(float)[3] ::", -1.7014117965751743E36 <= Math.nextUp((-Float.MAX_VALUE / 200)) && -1.7014114796625243E36 >= Math.nextUp((-Float.MAX_VALUE / 200)));
assertEquals("nextUp(float)[4] ::", (float)-6.805646E35, StrictMath.nextUp((-Float.MAX_VALUE / 500)));
assertTrue("nextUp(float)[5] ::", -6.805646869388047E35 <= Math.nextUp((-Float.MAX_VALUE / 500)) && -6.805645284824797E35 >= Math.nextUp((-Float.MAX_VALUE / 500)));
assertEquals("nextUp(float)[6] ::", (float)-2.801E-42, StrictMath.nextUp((-Float.MIN_VALUE * 2000)));
assertTrue("nextUp(float)[7] ::", -2.802596928649634E-42 <= Math.nextUp((-Float.MIN_VALUE * 2000)) && -2.7997943317209845E-42 >= Math.nextUp((-Float.MIN_VALUE * 2000)));
assertEquals("nextUp(float)[8] ::", (float)-1.4E-42, StrictMath.nextUp((-Float.MIN_VALUE * 1000)));
assertTrue("nextUp(float)[9] ::", -1.401298464324817E-42 <= Math.nextUp((-Float.MIN_VALUE * 1000)) && -1.3984958673961674E-42 >= Math.nextUp((-Float.MIN_VALUE * 1000)));
assertEquals("nextUp(float)[10] ::", (float)-3.2948746E7, StrictMath.nextUp(-32948748.958324F));
assertTrue("nextUp(float)[11] ::", -3.2948748E7 <= Math.nextUp(-32948748.958324F) && -3.2948744E7 >= Math.nextUp(-32948748.958324F));
assertEquals("nextUp(float)[12] ::", (float)-8.999999E-9, StrictMath.nextUp(-0.000000009F));
assertTrue("nextUp(float)[13] ::", -8.99999985648492E-9 <= Math.nextUp(-0.000000009F) && -8.99999808012808E-9 >= Math.nextUp(-0.000000009F));
assertEquals("nextUp(float)[14] ::", (float)-1.9999999E-7, StrictMath.nextUp(-0.0000002F));
assertTrue("nextUp(float)[15] ::", -2.0000000233721948E-7 <= Math.nextUp(-0.0000002F) && -1.9999997391551005E-7 >= Math.nextUp(-0.0000002F));
assertEquals("nextUp(float)[16] ::", (float)1.4E-45, StrictMath.nextUp(0F));
assertTrue("nextUp(float)[17] ::", 0.0 <= Math.nextUp(0F) && 2.802596928649634E-45 >= Math.nextUp(0F));
assertEquals("nextUp(float)[18] ::", (float)0.45623237, StrictMath.nextUp(0.456232334F));
assertTrue("nextUp(float)[19] ::", 0.45623233914375305 <= Math.nextUp(0.456232334F) && 0.4562323987483978 >= Math.nextUp(0.456232334F));
assertEquals("nextUp(float)[20] ::", (float)1224257.4, StrictMath.nextUp(1224257.312321263F));
assertTrue("nextUp(float)[21] ::", 1224257.25 <= Math.nextUp(1224257.312321263F) && 1224257.5 >= Math.nextUp(1224257.312321263F));
assertEquals("nextUp(float)[22] ::", (float)9.9998331E9, StrictMath.nextUp(9999832342.12365F));
assertTrue("nextUp(float)[23] ::", 9.999832064E9 <= Math.nextUp(9999832342.12365F) && 9.999834112E9 >= Math.nextUp(9999832342.12365F));
assertEquals("nextUp(float)[24] ::", (float)2.8E-45, StrictMath.nextUp(Float.MIN_VALUE));
assertTrue("nextUp(float)[25] ::", 1.401298464324817E-45 <= Math.nextUp(Float.MIN_VALUE) && 4.203895392974451E-45 >= Math.nextUp(Float.MIN_VALUE));
assertEquals("nextUp(float)[26] ::", (float)2.82E-43, StrictMath.nextUp((Float.MIN_VALUE * 200)));
assertTrue("nextUp(float)[27] ::", 2.802596928649634E-43 <= Math.nextUp((Float.MIN_VALUE * 200)) && 2.8306228979361305E-43 >= Math.nextUp((Float.MIN_VALUE * 200)));
assertEquals("nextUp(float)[28] ::", (float)6.805648E35, StrictMath.nextUp((Float.MAX_VALUE / 500)));
assertTrue("nextUp(float)[29] ::", 6.805646869388047E35 <= Math.nextUp((Float.MAX_VALUE / 500)) && 6.805648453951297E35 >= Math.nextUp((Float.MAX_VALUE / 500)));
assertEquals("nextUp(float)[30] ::", (float)1.701412E36, StrictMath.nextUp((Float.MAX_VALUE / 200)));
assertTrue("nextUp(float)[31] ::", 1.7014117965751743E36 <= Math.nextUp((Float.MAX_VALUE / 200)) && 1.7014121134878244E36 >= Math.nextUp((Float.MAX_VALUE / 200)));
assertEquals("nextUp(float)[32] ::", (float)Infinity, StrictMath.nextUp(Float.MAX_VALUE));
assertEquals("nextUp(float)[33] ::", (float)Infinity, Math.nextUp(Float.MAX_VALUE));
assertEquals("nextUp(float)[34] ::", (float)Infinity, StrictMath.nextUp((Float.MAX_VALUE + 1)));
assertEquals("nextUp(float)[35] ::", (float)Infinity, Math.nextUp((Float.MAX_VALUE + 1)));
}

public void testScalb_double()
{
assertEquals("scaleb(double,int)[0] ::", -1.7976931348623157E308, StrictMath.scalb(-Double.MAX_VALUE,0));
assertTrue("scaleb(double,int)[1] ::", -Infinity <= Math.scalb(-Double.MAX_VALUE,0) && -1.7976931348623155E308 >= Math.scalb(-Double.MAX_VALUE,0));
assertEquals("scaleb(double,int)[2] ::", -Infinity, StrictMath.scalb(-Double.MAX_VALUE,1));
assertEquals("scaleb(double,int)[3] ::", -Infinity, Math.scalb(-Double.MAX_VALUE,1));
assertEquals("scaleb(double,int)[4] ::", -Infinity, StrictMath.scalb(-Double.MAX_VALUE,2));
assertEquals("scaleb(double,int)[5] ::", -Infinity, Math.scalb(-Double.MAX_VALUE,2));
assertEquals("scaleb(double,int)[6] ::", -Infinity, StrictMath.scalb(-Double.MAX_VALUE,5));
assertEquals("scaleb(double,int)[7] ::", -Infinity, Math.scalb(-Double.MAX_VALUE,5));
assertEquals("scaleb(double,int)[8] ::", -Infinity, StrictMath.scalb(-Double.MAX_VALUE,2012));
assertEquals("scaleb(double,int)[9] ::", -Infinity, Math.scalb(-Double.MAX_VALUE,2012));
assertEquals("scaleb(double,int)[10] ::", -0.0, StrictMath.scalb(-Double.MAX_VALUE,-21287));
assertTrue("scaleb(double,int)[11] ::", -4.9E-324 <= Math.scalb(-Double.MAX_VALUE,-21287) && 4.9E-324 >= Math.scalb(-Double.MAX_VALUE,-21287));
assertEquals("scaleb(double,int)[12] ::", -8.988465674311579E307, StrictMath.scalb(-Double.MAX_VALUE,-1));
assertTrue("scaleb(double,int)[13] ::", -8.98846567431158E307 <= Math.scalb(-Double.MAX_VALUE,-1) && -8.988465674311578E307 >= Math.scalb(-Double.MAX_VALUE,-1));
assertEquals("scaleb(double,int)[14] ::", -1.7976931348623157E308, StrictMath.scalb(-Double.MAX_VALUE,-0));
assertTrue("scaleb(double,int)[15] ::", -Infinity <= Math.scalb(-Double.MAX_VALUE,-0) && -1.7976931348623155E308 >= Math.scalb(-Double.MAX_VALUE,-0));
assertEquals("scaleb(double,int)[16] ::", -8.988465674311578E305, StrictMath.scalb((-Double.MAX_VALUE / 200),0));
assertTrue("scaleb(double,int)[17] ::", -8.98846567431158E305 <= Math.scalb((-Double.MAX_VALUE / 200),0) && -8.988465674311577E305 >= Math.scalb((-Double.MAX_VALUE / 200),0));
assertEquals("scaleb(double,int)[18] ::", -1.7976931348623156E306, StrictMath.scalb((-Double.MAX_VALUE / 200),1));
assertTrue("scaleb(double,int)[19] ::", -1.797693134862316E306 <= Math.scalb((-Double.MAX_VALUE / 200),1) && -1.7976931348623153E306 >= Math.scalb((-Double.MAX_VALUE / 200),1));
assertEquals("scaleb(double,int)[20] ::", -3.595386269724631E306, StrictMath.scalb((-Double.MAX_VALUE / 200),2));
assertTrue("scaleb(double,int)[21] ::", -3.595386269724632E306 <= Math.scalb((-Double.MAX_VALUE / 200),2) && -3.5953862697246306E306 >= Math.scalb((-Double.MAX_VALUE / 200),2));
assertEquals("scaleb(double,int)[22] ::", -2.876309015779705E307, StrictMath.scalb((-Double.MAX_VALUE / 200),5));
assertTrue("scaleb(double,int)[23] ::", -2.8763090157797055E307 <= Math.scalb((-Double.MAX_VALUE / 200),5) && -2.8763090157797045E307 >= Math.scalb((-Double.MAX_VALUE / 200),5));
assertEquals("scaleb(double,int)[24] ::", -Infinity, StrictMath.scalb((-Double.MAX_VALUE / 200),2012));
assertEquals("scaleb(double,int)[25] ::", -Infinity, Math.scalb((-Double.MAX_VALUE / 200),2012));
assertEquals("scaleb(double,int)[26] ::", -0.0, StrictMath.scalb((-Double.MAX_VALUE / 200),-21287));
assertTrue("scaleb(double,int)[27] ::", -4.9E-324 <= Math.scalb((-Double.MAX_VALUE / 200),-21287) && 4.9E-324 >= Math.scalb((-Double.MAX_VALUE / 200),-21287));
assertEquals("scaleb(double,int)[28] ::", -4.494232837155789E305, StrictMath.scalb((-Double.MAX_VALUE / 200),-1));
assertTrue("scaleb(double,int)[29] ::", -4.49423283715579E305 <= Math.scalb((-Double.MAX_VALUE / 200),-1) && -4.494232837155788E305 >= Math.scalb((-Double.MAX_VALUE / 200),-1));
assertEquals("scaleb(double,int)[30] ::", -8.988465674311578E305, StrictMath.scalb((-Double.MAX_VALUE / 200),-0));
assertTrue("scaleb(double,int)[31] ::", -8.98846567431158E305 <= Math.scalb((-Double.MAX_VALUE / 200),-0) && -8.988465674311577E305 >= Math.scalb((-Double.MAX_VALUE / 200),-0));
assertEquals("scaleb(double,int)[32] ::", -3.595386269724631E305, StrictMath.scalb((-Double.MAX_VALUE / 500),0));
assertTrue("scaleb(double,int)[33] ::", -3.595386269724632E305 <= Math.scalb((-Double.MAX_VALUE / 500),0) && -3.59538626972463E305 >= Math.scalb((-Double.MAX_VALUE / 500),0));
assertEquals("scaleb(double,int)[34] ::", -7.190772539449262E305, StrictMath.scalb((-Double.MAX_VALUE / 500),1));
assertTrue("scaleb(double,int)[35] ::", -7.190772539449264E305 <= Math.scalb((-Double.MAX_VALUE / 500),1) && -7.19077253944926E305 >= Math.scalb((-Double.MAX_VALUE / 500),1));
assertEquals("scaleb(double,int)[36] ::", -1.4381545078898524E306, StrictMath.scalb((-Double.MAX_VALUE / 500),2));
assertTrue("scaleb(double,int)[37] ::", -1.4381545078898528E306 <= Math.scalb((-Double.MAX_VALUE / 500),2) && -1.438154507889852E306 >= Math.scalb((-Double.MAX_VALUE / 500),2));
assertEquals("scaleb(double,int)[38] ::", -1.150523606311882E307, StrictMath.scalb((-Double.MAX_VALUE / 500),5));
assertTrue("scaleb(double,int)[39] ::", -1.1505236063118822E307 <= Math.scalb((-Double.MAX_VALUE / 500),5) && -1.1505236063118817E307 >= Math.scalb((-Double.MAX_VALUE / 500),5));
assertEquals("scaleb(double,int)[40] ::", -Infinity, StrictMath.scalb((-Double.MAX_VALUE / 500),2012));
assertEquals("scaleb(double,int)[41] ::", -Infinity, Math.scalb((-Double.MAX_VALUE / 500),2012));
assertEquals("scaleb(double,int)[42] ::", -0.0, StrictMath.scalb((-Double.MAX_VALUE / 500),-21287));
assertTrue("scaleb(double,int)[43] ::", -4.9E-324 <= Math.scalb((-Double.MAX_VALUE / 500),-21287) && 4.9E-324 >= Math.scalb((-Double.MAX_VALUE / 500),-21287));
assertEquals("scaleb(double,int)[44] ::", -1.7976931348623156E305, StrictMath.scalb((-Double.MAX_VALUE / 500),-1));
assertTrue("scaleb(double,int)[45] ::", -1.797693134862316E305 <= Math.scalb((-Double.MAX_VALUE / 500),-1) && -1.797693134862315E305 >= Math.scalb((-Double.MAX_VALUE / 500),-1));
assertEquals("scaleb(double,int)[46] ::", -3.595386269724631E305, StrictMath.scalb((-Double.MAX_VALUE / 500),-0));
assertTrue("scaleb(double,int)[47] ::", -3.595386269724632E305 <= Math.scalb((-Double.MAX_VALUE / 500),-0) && -3.59538626972463E305 >= Math.scalb((-Double.MAX_VALUE / 500),-0));
assertEquals("scaleb(double,int)[48] ::", -9.88E-321, StrictMath.scalb((-Double.MIN_VALUE * 2000),0));
assertTrue("scaleb(double,int)[49] ::", -9.886E-321 <= Math.scalb((-Double.MIN_VALUE * 2000),0) && -9.876E-321 >= Math.scalb((-Double.MIN_VALUE * 2000),0));
assertEquals("scaleb(double,int)[50] ::", -1.9763E-320, StrictMath.scalb((-Double.MIN_VALUE * 2000),1));
assertTrue("scaleb(double,int)[51] ::", -1.977E-320 <= Math.scalb((-Double.MIN_VALUE * 2000),1) && -1.976E-320 >= Math.scalb((-Double.MIN_VALUE * 2000),1));
assertEquals("scaleb(double,int)[52] ::", -3.9525E-320, StrictMath.scalb((-Double.MIN_VALUE * 2000),2));
assertTrue("scaleb(double,int)[53] ::", -3.953E-320 <= Math.scalb((-Double.MIN_VALUE * 2000),2) && -3.952E-320 >= Math.scalb((-Double.MIN_VALUE * 2000),2));
assertEquals("scaleb(double,int)[54] ::", -3.162E-319, StrictMath.scalb((-Double.MIN_VALUE * 2000),5));
assertTrue("scaleb(double,int)[55] ::", -3.16207E-319 <= Math.scalb((-Double.MIN_VALUE * 2000),5) && -3.16197E-319 >= Math.scalb((-Double.MIN_VALUE * 2000),5));
assertEquals("scaleb(double,int)[56] ::", -4.646927838993072E285, StrictMath.scalb((-Double.MIN_VALUE * 2000),2012));
assertTrue("scaleb(double,int)[57] ::", -4.6469278389930726E285 <= Math.scalb((-Double.MIN_VALUE * 2000),2012) && -4.6469278389930715E285 >= Math.scalb((-Double.MIN_VALUE * 2000),2012));
assertEquals("scaleb(double,int)[58] ::", -0.0, StrictMath.scalb((-Double.MIN_VALUE * 2000),-21287));
assertTrue("scaleb(double,int)[59] ::", -4.9E-324 <= Math.scalb((-Double.MIN_VALUE * 2000),-21287) && 4.9E-324 >= Math.scalb((-Double.MIN_VALUE * 2000),-21287));
assertEquals("scaleb(double,int)[60] ::", -4.94E-321, StrictMath.scalb((-Double.MIN_VALUE * 2000),-1));
assertTrue("scaleb(double,int)[61] ::", -4.946E-321 <= Math.scalb((-Double.MIN_VALUE * 2000),-1) && -4.936E-321 >= Math.scalb((-Double.MIN_VALUE * 2000),-1));
assertEquals("scaleb(double,int)[62] ::", -9.88E-321, StrictMath.scalb((-Double.MIN_VALUE * 2000),-0));
assertTrue("scaleb(double,int)[63] ::", -9.886E-321 <= Math.scalb((-Double.MIN_VALUE * 2000),-0) && -9.876E-321 >= Math.scalb((-Double.MIN_VALUE * 2000),-0));
assertEquals("scaleb(double,int)[64] ::", -4.94E-321, StrictMath.scalb((-Double.MIN_VALUE * 1000),0));
assertTrue("scaleb(double,int)[65] ::", -4.946E-321 <= Math.scalb((-Double.MIN_VALUE * 1000),0) && -4.936E-321 >= Math.scalb((-Double.MIN_VALUE * 1000),0));
assertEquals("scaleb(double,int)[66] ::", -9.88E-321, StrictMath.scalb((-Double.MIN_VALUE * 1000),1));
assertTrue("scaleb(double,int)[67] ::", -9.886E-321 <= Math.scalb((-Double.MIN_VALUE * 1000),1) && -9.876E-321 >= Math.scalb((-Double.MIN_VALUE * 1000),1));
assertEquals("scaleb(double,int)[68] ::", -1.9763E-320, StrictMath.scalb((-Double.MIN_VALUE * 1000),2));
assertTrue("scaleb(double,int)[69] ::", -1.977E-320 <= Math.scalb((-Double.MIN_VALUE * 1000),2) && -1.976E-320 >= Math.scalb((-Double.MIN_VALUE * 1000),2));
assertEquals("scaleb(double,int)[70] ::", -1.581E-319, StrictMath.scalb((-Double.MIN_VALUE * 1000),5));
assertTrue("scaleb(double,int)[71] ::", -1.58106E-319 <= Math.scalb((-Double.MIN_VALUE * 1000),5) && -1.58096E-319 >= Math.scalb((-Double.MIN_VALUE * 1000),5));
assertEquals("scaleb(double,int)[72] ::", -2.323463919496536E285, StrictMath.scalb((-Double.MIN_VALUE * 1000),2012));
assertTrue("scaleb(double,int)[73] ::", -2.3234639194965363E285 <= Math.scalb((-Double.MIN_VALUE * 1000),2012) && -2.3234639194965358E285 >= Math.scalb((-Double.MIN_VALUE * 1000),2012));
assertEquals("scaleb(double,int)[74] ::", -0.0, StrictMath.scalb((-Double.MIN_VALUE * 1000),-21287));
assertTrue("scaleb(double,int)[75] ::", -4.9E-324 <= Math.scalb((-Double.MIN_VALUE * 1000),-21287) && 4.9E-324 >= Math.scalb((-Double.MIN_VALUE * 1000),-21287));
assertEquals("scaleb(double,int)[76] ::", -2.47E-321, StrictMath.scalb((-Double.MIN_VALUE * 1000),-1));
assertTrue("scaleb(double,int)[77] ::", -2.475E-321 <= Math.scalb((-Double.MIN_VALUE * 1000),-1) && -2.465E-321 >= Math.scalb((-Double.MIN_VALUE * 1000),-1));
assertEquals("scaleb(double,int)[78] ::", -4.94E-321, StrictMath.scalb((-Double.MIN_VALUE * 1000),-0));
assertTrue("scaleb(double,int)[79] ::", -4.946E-321 <= Math.scalb((-Double.MIN_VALUE * 1000),-0) && -4.936E-321 >= Math.scalb((-Double.MIN_VALUE * 1000),-0));
assertEquals("scaleb(double,int)[80] ::", -2.9291122121292315E9, StrictMath.scalb(-2929112212.129231481346,0));
assertTrue("scaleb(double,int)[81] ::", -2.929112212129232E9 <= Math.scalb(-2929112212.129231481346,0) && -2.929112212129231E9 >= Math.scalb(-2929112212.129231481346,0));
assertEquals("scaleb(double,int)[82] ::", -5.858224424258463E9, StrictMath.scalb(-2929112212.129231481346,1));
assertTrue("scaleb(double,int)[83] ::", -5.858224424258464E9 <= Math.scalb(-2929112212.129231481346,1) && -5.858224424258462E9 >= Math.scalb(-2929112212.129231481346,1));
assertEquals("scaleb(double,int)[84] ::", -1.1716448848516926E10, StrictMath.scalb(-2929112212.129231481346,2));
assertTrue("scaleb(double,int)[85] ::", -1.1716448848516928E10 <= Math.scalb(-2929112212.129231481346,2) && -1.1716448848516924E10 >= Math.scalb(-2929112212.129231481346,2));
assertEquals("scaleb(double,int)[86] ::", -9.37315907881354E10, StrictMath.scalb(-2929112212.129231481346,5));
assertTrue("scaleb(double,int)[87] ::", -9.373159078813542E10 <= Math.scalb(-2929112212.129231481346,5) && -9.373159078813539E10 >= Math.scalb(-2929112212.129231481346,5));
assertEquals("scaleb(double,int)[88] ::", -Infinity, StrictMath.scalb(-2929112212.129231481346,2012));
assertEquals("scaleb(double,int)[89] ::", -Infinity, Math.scalb(-2929112212.129231481346,2012));
assertEquals("scaleb(double,int)[90] ::", -0.0, StrictMath.scalb(-2929112212.129231481346,-21287));
assertTrue("scaleb(double,int)[91] ::", -4.9E-324 <= Math.scalb(-2929112212.129231481346,-21287) && 4.9E-324 >= Math.scalb(-2929112212.129231481346,-21287));
assertEquals("scaleb(double,int)[92] ::", -1.4645561060646157E9, StrictMath.scalb(-2929112212.129231481346,-1));
assertTrue("scaleb(double,int)[93] ::", -1.464556106064616E9 <= Math.scalb(-2929112212.129231481346,-1) && -1.4645561060646155E9 >= Math.scalb(-2929112212.129231481346,-1));
assertEquals("scaleb(double,int)[94] ::", -2.9291122121292315E9, StrictMath.scalb(-2929112212.129231481346,-0));
assertTrue("scaleb(double,int)[95] ::", -2.929112212129232E9 <= Math.scalb(-2929112212.129231481346,-0) && -2.929112212129231E9 >= Math.scalb(-2929112212.129231481346,-0));
assertEquals("scaleb(double,int)[96] ::", -2372.228212, StrictMath.scalb(-2372.228212D,0));
assertTrue("scaleb(double,int)[97] ::", -2372.2282120000004 <= Math.scalb(-2372.228212D,0) && -2372.2282119999995 >= Math.scalb(-2372.228212D,0));
assertEquals("scaleb(double,int)[98] ::", -4744.456424, StrictMath.scalb(-2372.228212D,1));
assertTrue("scaleb(double,int)[99] ::", -4744.456424000001 <= Math.scalb(-2372.228212D,1) && -4744.456423999999 >= Math.scalb(-2372.228212D,1));
assertEquals("scaleb(double,int)[100] ::", -9488.912848, StrictMath.scalb(-2372.228212D,2));
assertTrue("scaleb(double,int)[101] ::", -9488.912848000002 <= Math.scalb(-2372.228212D,2) && -9488.912847999998 >= Math.scalb(-2372.228212D,2));
assertEquals("scaleb(double,int)[102] ::", -75911.302784, StrictMath.scalb(-2372.228212D,5));
assertTrue("scaleb(double,int)[103] ::", -75911.30278400001 <= Math.scalb(-2372.228212D,5) && -75911.30278399998 >= Math.scalb(-2372.228212D,5));
assertEquals("scaleb(double,int)[104] ::", -Infinity, StrictMath.scalb(-2372.228212D,2012));
assertEquals("scaleb(double,int)[105] ::", -Infinity, Math.scalb(-2372.228212D,2012));
assertEquals("scaleb(double,int)[106] ::", -0.0, StrictMath.scalb(-2372.228212D,-21287));
assertTrue("scaleb(double,int)[107] ::", -4.9E-324 <= Math.scalb(-2372.228212D,-21287) && 4.9E-324 >= Math.scalb(-2372.228212D,-21287));
assertEquals("scaleb(double,int)[108] ::", -1186.114106, StrictMath.scalb(-2372.228212D,-1));
assertTrue("scaleb(double,int)[109] ::", -1186.1141060000002 <= Math.scalb(-2372.228212D,-1) && -1186.1141059999998 >= Math.scalb(-2372.228212D,-1));
assertEquals("scaleb(double,int)[110] ::", -2372.228212, StrictMath.scalb(-2372.228212D,-0));
assertTrue("scaleb(double,int)[111] ::", -2372.2282120000004 <= Math.scalb(-2372.228212D,-0) && -2372.2282119999995 >= Math.scalb(-2372.228212D,-0));
assertEquals("scaleb(double,int)[112] ::", -1.2232, StrictMath.scalb(-1.2232D,0));
assertTrue("scaleb(double,int)[113] ::", -1.2232000000000003 <= Math.scalb(-1.2232D,0) && -1.2231999999999998 >= Math.scalb(-1.2232D,0));
assertEquals("scaleb(double,int)[114] ::", -2.4464, StrictMath.scalb(-1.2232D,1));
assertTrue("scaleb(double,int)[115] ::", -2.4464000000000006 <= Math.scalb(-1.2232D,1) && -2.4463999999999997 >= Math.scalb(-1.2232D,1));
assertEquals("scaleb(double,int)[116] ::", -4.8928, StrictMath.scalb(-1.2232D,2));
assertTrue("scaleb(double,int)[117] ::", -4.892800000000001 <= Math.scalb(-1.2232D,2) && -4.892799999999999 >= Math.scalb(-1.2232D,2));
assertEquals("scaleb(double,int)[118] ::", -39.1424, StrictMath.scalb(-1.2232D,5));
assertTrue("scaleb(double,int)[119] ::", -39.14240000000001 <= Math.scalb(-1.2232D,5) && -39.142399999999995 >= Math.scalb(-1.2232D,5));
assertEquals("scaleb(double,int)[120] ::", -Infinity, StrictMath.scalb(-1.2232D,2012));
assertEquals("scaleb(double,int)[121] ::", -Infinity, Math.scalb(-1.2232D,2012));
assertEquals("scaleb(double,int)[122] ::", -0.0, StrictMath.scalb(-1.2232D,-21287));
assertTrue("scaleb(double,int)[123] ::", -4.9E-324 <= Math.scalb(-1.2232D,-21287) && 4.9E-324 >= Math.scalb(-1.2232D,-21287));
assertEquals("scaleb(double,int)[124] ::", -0.6116, StrictMath.scalb(-1.2232D,-1));
assertTrue("scaleb(double,int)[125] ::", -0.6116000000000001 <= Math.scalb(-1.2232D,-1) && -0.6115999999999999 >= Math.scalb(-1.2232D,-1));
assertEquals("scaleb(double,int)[126] ::", -1.2232, StrictMath.scalb(-1.2232D,-0));
assertTrue("scaleb(double,int)[127] ::", -1.2232000000000003 <= Math.scalb(-1.2232D,-0) && -1.2231999999999998 >= Math.scalb(-1.2232D,-0));
assertEquals("scaleb(double,int)[128] ::", 0.0, StrictMath.scalb(0D,0));
assertTrue("scaleb(double,int)[129] ::", -4.9E-324 <= Math.scalb(0D,0) && 4.9E-324 >= Math.scalb(0D,0));
assertEquals("scaleb(double,int)[130] ::", 0.0, StrictMath.scalb(0D,1));
assertTrue("scaleb(double,int)[131] ::", -4.9E-324 <= Math.scalb(0D,1) && 4.9E-324 >= Math.scalb(0D,1));
assertEquals("scaleb(double,int)[132] ::", 0.0, StrictMath.scalb(0D,2));
assertTrue("scaleb(double,int)[133] ::", -4.9E-324 <= Math.scalb(0D,2) && 4.9E-324 >= Math.scalb(0D,2));
assertEquals("scaleb(double,int)[134] ::", 0.0, StrictMath.scalb(0D,5));
assertTrue("scaleb(double,int)[135] ::", -4.9E-324 <= Math.scalb(0D,5) && 4.9E-324 >= Math.scalb(0D,5));
assertEquals("scaleb(double,int)[136] ::", 0.0, StrictMath.scalb(0D,2012));
assertTrue("scaleb(double,int)[137] ::", -4.9E-324 <= Math.scalb(0D,2012) && 4.9E-324 >= Math.scalb(0D,2012));
assertEquals("scaleb(double,int)[138] ::", 0.0, StrictMath.scalb(0D,-21287));
assertTrue("scaleb(double,int)[139] ::", -4.9E-324 <= Math.scalb(0D,-21287) && 4.9E-324 >= Math.scalb(0D,-21287));
assertEquals("scaleb(double,int)[140] ::", 0.0, StrictMath.scalb(0D,-1));
assertTrue("scaleb(double,int)[141] ::", -4.9E-324 <= Math.scalb(0D,-1) && 4.9E-324 >= Math.scalb(0D,-1));
assertEquals("scaleb(double,int)[142] ::", 0.0, StrictMath.scalb(0D,-0));
assertTrue("scaleb(double,int)[143] ::", -4.9E-324 <= Math.scalb(0D,-0) && 4.9E-324 >= Math.scalb(0D,-0));
assertEquals("scaleb(double,int)[144] ::", 2.43223, StrictMath.scalb(2.43223D,0));
assertTrue("scaleb(double,int)[145] ::", 2.4322299999999997 <= Math.scalb(2.43223D,0) && 2.4322300000000006 >= Math.scalb(2.43223D,0));
assertEquals("scaleb(double,int)[146] ::", 4.86446, StrictMath.scalb(2.43223D,1));
assertTrue("scaleb(double,int)[147] ::", 4.864459999999999 <= Math.scalb(2.43223D,1) && 4.864460000000001 >= Math.scalb(2.43223D,1));
assertEquals("scaleb(double,int)[148] ::", 9.72892, StrictMath.scalb(2.43223D,2));
assertTrue("scaleb(double,int)[149] ::", 9.728919999999999 <= Math.scalb(2.43223D,2) && 9.728920000000002 >= Math.scalb(2.43223D,2));
assertEquals("scaleb(double,int)[150] ::", 77.83136, StrictMath.scalb(2.43223D,5));
assertTrue("scaleb(double,int)[151] ::", 77.83135999999999 <= Math.scalb(2.43223D,5) && 77.83136000000002 >= Math.scalb(2.43223D,5));
assertEquals("scaleb(double,int)[152] ::", Infinity, StrictMath.scalb(2.43223D,2012));
assertEquals("scaleb(double,int)[153] ::", Infinity, Math.scalb(2.43223D,2012));
assertEquals("scaleb(double,int)[154] ::", 0.0, StrictMath.scalb(2.43223D,-21287));
assertTrue("scaleb(double,int)[155] ::", -4.9E-324 <= Math.scalb(2.43223D,-21287) && 4.9E-324 >= Math.scalb(2.43223D,-21287));
assertEquals("scaleb(double,int)[156] ::", 1.216115, StrictMath.scalb(2.43223D,-1));
assertTrue("scaleb(double,int)[157] ::", 1.2161149999999998 <= Math.scalb(2.43223D,-1) && 1.2161150000000003 >= Math.scalb(2.43223D,-1));
assertEquals("scaleb(double,int)[158] ::", 2.43223, StrictMath.scalb(2.43223D,-0));
assertTrue("scaleb(double,int)[159] ::", 2.4322299999999997 <= Math.scalb(2.43223D,-0) && 2.4322300000000006 >= Math.scalb(2.43223D,-0));
assertEquals("scaleb(double,int)[160] ::", 1.82321553323566E7, StrictMath.scalb(18232155.3323566D,0));
assertTrue("scaleb(double,int)[161] ::", 1.8232155332356595E7 <= Math.scalb(18232155.3323566D,0) && 1.8232155332356602E7 >= Math.scalb(18232155.3323566D,0));
assertEquals("scaleb(double,int)[162] ::", 3.64643106647132E7, StrictMath.scalb(18232155.3323566D,1));
assertTrue("scaleb(double,int)[163] ::", 3.646431066471319E7 <= Math.scalb(18232155.3323566D,1) && 3.6464310664713204E7 >= Math.scalb(18232155.3323566D,1));
assertEquals("scaleb(double,int)[164] ::", 7.29286213294264E7, StrictMath.scalb(18232155.3323566D,2));
assertTrue("scaleb(double,int)[165] ::", 7.292862132942638E7 <= Math.scalb(18232155.3323566D,2) && 7.292862132942641E7 >= Math.scalb(18232155.3323566D,2));
assertEquals("scaleb(double,int)[166] ::", 5.834289706354111E8, StrictMath.scalb(18232155.3323566D,5));
assertTrue("scaleb(double,int)[167] ::", 5.83428970635411E8 <= Math.scalb(18232155.3323566D,5) && 5.834289706354113E8 >= Math.scalb(18232155.3323566D,5));
assertEquals("scaleb(double,int)[168] ::", Infinity, StrictMath.scalb(18232155.3323566D,2012));
assertEquals("scaleb(double,int)[169] ::", Infinity, Math.scalb(18232155.3323566D,2012));
assertEquals("scaleb(double,int)[170] ::", 0.0, StrictMath.scalb(18232155.3323566D,-21287));
assertTrue("scaleb(double,int)[171] ::", -4.9E-324 <= Math.scalb(18232155.3323566D,-21287) && 4.9E-324 >= Math.scalb(18232155.3323566D,-21287));
assertEquals("scaleb(double,int)[172] ::", 9116077.6661783, StrictMath.scalb(18232155.3323566D,-1));
assertTrue("scaleb(double,int)[173] ::", 9116077.666178297 <= Math.scalb(18232155.3323566D,-1) && 9116077.666178301 >= Math.scalb(18232155.3323566D,-1));
assertEquals("scaleb(double,int)[174] ::", 1.82321553323566E7, StrictMath.scalb(18232155.3323566D,-0));
assertTrue("scaleb(double,int)[175] ::", 1.8232155332356595E7 <= Math.scalb(18232155.3323566D,-0) && 1.8232155332356602E7 >= Math.scalb(18232155.3323566D,-0));
assertEquals("scaleb(double,int)[176] ::", 4.9E-324, StrictMath.scalb(Double.MIN_VALUE,0));
assertTrue("scaleb(double,int)[177] ::", 0.0 <= Math.scalb(Double.MIN_VALUE,0) && 1.0E-323 >= Math.scalb(Double.MIN_VALUE,0));
assertEquals("scaleb(double,int)[178] ::", 1.0E-323, StrictMath.scalb(Double.MIN_VALUE,1));
assertTrue("scaleb(double,int)[179] ::", 4.9E-324 <= Math.scalb(Double.MIN_VALUE,1) && 1.5E-323 >= Math.scalb(Double.MIN_VALUE,1));
assertEquals("scaleb(double,int)[180] ::", 2.0E-323, StrictMath.scalb(Double.MIN_VALUE,2));
assertTrue("scaleb(double,int)[181] ::", 1.5E-323 <= Math.scalb(Double.MIN_VALUE,2) && 2.5E-323 >= Math.scalb(Double.MIN_VALUE,2));
assertEquals("scaleb(double,int)[182] ::", 1.58E-322, StrictMath.scalb(Double.MIN_VALUE,5));
assertTrue("scaleb(double,int)[183] ::", 1.53E-322 <= Math.scalb(Double.MIN_VALUE,5) && 1.63E-322 >= Math.scalb(Double.MIN_VALUE,5));
assertEquals("scaleb(double,int)[184] ::", 2.323463919496536E282, StrictMath.scalb(Double.MIN_VALUE,2012));
assertTrue("scaleb(double,int)[185] ::", 2.3234639194965355E282 <= Math.scalb(Double.MIN_VALUE,2012) && 2.3234639194965366E282 >= Math.scalb(Double.MIN_VALUE,2012));
assertEquals("scaleb(double,int)[186] ::", 0.0, StrictMath.scalb(Double.MIN_VALUE,-21287));
assertTrue("scaleb(double,int)[187] ::", -4.9E-324 <= Math.scalb(Double.MIN_VALUE,-21287) && 4.9E-324 >= Math.scalb(Double.MIN_VALUE,-21287));
assertEquals("scaleb(double,int)[188] ::", 0.0, StrictMath.scalb(Double.MIN_VALUE,-1));
assertTrue("scaleb(double,int)[189] ::", -4.9E-324 <= Math.scalb(Double.MIN_VALUE,-1) && 4.9E-324 >= Math.scalb(Double.MIN_VALUE,-1));
assertEquals("scaleb(double,int)[190] ::", 4.9E-324, StrictMath.scalb(Double.MIN_VALUE,-0));
assertTrue("scaleb(double,int)[191] ::", 0.0 <= Math.scalb(Double.MIN_VALUE,-0) && 1.0E-323 >= Math.scalb(Double.MIN_VALUE,-0));
assertEquals("scaleb(double,int)[192] ::", 9.9E-322, StrictMath.scalb((Double.MIN_VALUE * 200),0));
assertTrue("scaleb(double,int)[193] ::", 9.83E-322 <= Math.scalb((Double.MIN_VALUE * 200),0) && 9.93E-322 >= Math.scalb((Double.MIN_VALUE * 200),0));
assertEquals("scaleb(double,int)[194] ::", 1.976E-321, StrictMath.scalb((Double.MIN_VALUE * 200),1));
assertTrue("scaleb(double,int)[195] ::", 1.97E-321 <= Math.scalb((Double.MIN_VALUE * 200),1) && 1.98E-321 >= Math.scalb((Double.MIN_VALUE * 200),1));
assertEquals("scaleb(double,int)[196] ::", 3.953E-321, StrictMath.scalb((Double.MIN_VALUE * 200),2));
assertTrue("scaleb(double,int)[197] ::", 3.95E-321 <= Math.scalb((Double.MIN_VALUE * 200),2) && 3.957E-321 >= Math.scalb((Double.MIN_VALUE * 200),2));
assertEquals("scaleb(double,int)[198] ::", 3.162E-320, StrictMath.scalb((Double.MIN_VALUE * 200),5));
assertTrue("scaleb(double,int)[199] ::", 3.1615E-320 <= Math.scalb((Double.MIN_VALUE * 200),5) && 3.1625E-320 >= Math.scalb((Double.MIN_VALUE * 200),5));
assertEquals("scaleb(double,int)[200] ::", 4.646927838993072E284, StrictMath.scalb((Double.MIN_VALUE * 200),2012));
assertTrue("scaleb(double,int)[201] ::", 4.6469278389930714E284 <= Math.scalb((Double.MIN_VALUE * 200),2012) && 4.646927838993073E284 >= Math.scalb((Double.MIN_VALUE * 200),2012));
assertEquals("scaleb(double,int)[202] ::", 0.0, StrictMath.scalb((Double.MIN_VALUE * 200),-21287));
assertTrue("scaleb(double,int)[203] ::", -4.9E-324 <= Math.scalb((Double.MIN_VALUE * 200),-21287) && 4.9E-324 >= Math.scalb((Double.MIN_VALUE * 200),-21287));
assertEquals("scaleb(double,int)[204] ::", 4.94E-322, StrictMath.scalb((Double.MIN_VALUE * 200),-1));
assertTrue("scaleb(double,int)[205] ::", 4.9E-322 <= Math.scalb((Double.MIN_VALUE * 200),-1) && 5.0E-322 >= Math.scalb((Double.MIN_VALUE * 200),-1));
assertEquals("scaleb(double,int)[206] ::", 9.9E-322, StrictMath.scalb((Double.MIN_VALUE * 200),-0));
assertTrue("scaleb(double,int)[207] ::", 9.83E-322 <= Math.scalb((Double.MIN_VALUE * 200),-0) && 9.93E-322 >= Math.scalb((Double.MIN_VALUE * 200),-0));
assertEquals("scaleb(double,int)[208] ::", 3.595386269724631E305, StrictMath.scalb((Double.MAX_VALUE / 500),0));
assertTrue("scaleb(double,int)[209] ::", 3.59538626972463E305 <= Math.scalb((Double.MAX_VALUE / 500),0) && 3.595386269724632E305 >= Math.scalb((Double.MAX_VALUE / 500),0));
assertEquals("scaleb(double,int)[210] ::", 7.190772539449262E305, StrictMath.scalb((Double.MAX_VALUE / 500),1));
assertTrue("scaleb(double,int)[211] ::", 7.19077253944926E305 <= Math.scalb((Double.MAX_VALUE / 500),1) && 7.190772539449264E305 >= Math.scalb((Double.MAX_VALUE / 500),1));
assertEquals("scaleb(double,int)[212] ::", 1.4381545078898524E306, StrictMath.scalb((Double.MAX_VALUE / 500),2));
assertTrue("scaleb(double,int)[213] ::", 1.438154507889852E306 <= Math.scalb((Double.MAX_VALUE / 500),2) && 1.4381545078898528E306 >= Math.scalb((Double.MAX_VALUE / 500),2));
assertEquals("scaleb(double,int)[214] ::", 1.150523606311882E307, StrictMath.scalb((Double.MAX_VALUE / 500),5));
assertTrue("scaleb(double,int)[215] ::", 1.1505236063118817E307 <= Math.scalb((Double.MAX_VALUE / 500),5) && 1.1505236063118822E307 >= Math.scalb((Double.MAX_VALUE / 500),5));
assertEquals("scaleb(double,int)[216] ::", Infinity, StrictMath.scalb((Double.MAX_VALUE / 500),2012));
assertEquals("scaleb(double,int)[217] ::", Infinity, Math.scalb((Double.MAX_VALUE / 500),2012));
assertEquals("scaleb(double,int)[218] ::", 0.0, StrictMath.scalb((Double.MAX_VALUE / 500),-21287));
assertTrue("scaleb(double,int)[219] ::", -4.9E-324 <= Math.scalb((Double.MAX_VALUE / 500),-21287) && 4.9E-324 >= Math.scalb((Double.MAX_VALUE / 500),-21287));
assertEquals("scaleb(double,int)[220] ::", 1.7976931348623156E305, StrictMath.scalb((Double.MAX_VALUE / 500),-1));
assertTrue("scaleb(double,int)[221] ::", 1.797693134862315E305 <= Math.scalb((Double.MAX_VALUE / 500),-1) && 1.797693134862316E305 >= Math.scalb((Double.MAX_VALUE / 500),-1));
assertEquals("scaleb(double,int)[222] ::", 3.595386269724631E305, StrictMath.scalb((Double.MAX_VALUE / 500),-0));
assertTrue("scaleb(double,int)[223] ::", 3.59538626972463E305 <= Math.scalb((Double.MAX_VALUE / 500),-0) && 3.595386269724632E305 >= Math.scalb((Double.MAX_VALUE / 500),-0));
assertEquals("scaleb(double,int)[224] ::", 8.988465674311578E305, StrictMath.scalb((Double.MAX_VALUE / 200),0));
assertTrue("scaleb(double,int)[225] ::", 8.988465674311577E305 <= Math.scalb((Double.MAX_VALUE / 200),0) && 8.98846567431158E305 >= Math.scalb((Double.MAX_VALUE / 200),0));
assertEquals("scaleb(double,int)[226] ::", 1.7976931348623156E306, StrictMath.scalb((Double.MAX_VALUE / 200),1));
assertTrue("scaleb(double,int)[227] ::", 1.7976931348623153E306 <= Math.scalb((Double.MAX_VALUE / 200),1) && 1.797693134862316E306 >= Math.scalb((Double.MAX_VALUE / 200),1));
assertEquals("scaleb(double,int)[228] ::", 3.595386269724631E306, StrictMath.scalb((Double.MAX_VALUE / 200),2));
assertTrue("scaleb(double,int)[229] ::", 3.5953862697246306E306 <= Math.scalb((Double.MAX_VALUE / 200),2) && 3.595386269724632E306 >= Math.scalb((Double.MAX_VALUE / 200),2));
assertEquals("scaleb(double,int)[230] ::", 2.876309015779705E307, StrictMath.scalb((Double.MAX_VALUE / 200),5));
assertTrue("scaleb(double,int)[231] ::", 2.8763090157797045E307 <= Math.scalb((Double.MAX_VALUE / 200),5) && 2.8763090157797055E307 >= Math.scalb((Double.MAX_VALUE / 200),5));
assertEquals("scaleb(double,int)[232] ::", Infinity, StrictMath.scalb((Double.MAX_VALUE / 200),2012));
assertEquals("scaleb(double,int)[233] ::", Infinity, Math.scalb((Double.MAX_VALUE / 200),2012));
assertEquals("scaleb(double,int)[234] ::", 0.0, StrictMath.scalb((Double.MAX_VALUE / 200),-21287));
assertTrue("scaleb(double,int)[235] ::", -4.9E-324 <= Math.scalb((Double.MAX_VALUE / 200),-21287) && 4.9E-324 >= Math.scalb((Double.MAX_VALUE / 200),-21287));
assertEquals("scaleb(double,int)[236] ::", 4.494232837155789E305, StrictMath.scalb((Double.MAX_VALUE / 200),-1));
assertTrue("scaleb(double,int)[237] ::", 4.494232837155788E305 <= Math.scalb((Double.MAX_VALUE / 200),-1) && 4.49423283715579E305 >= Math.scalb((Double.MAX_VALUE / 200),-1));
assertEquals("scaleb(double,int)[238] ::", 8.988465674311578E305, StrictMath.scalb((Double.MAX_VALUE / 200),-0));
assertTrue("scaleb(double,int)[239] ::", 8.988465674311577E305 <= Math.scalb((Double.MAX_VALUE / 200),-0) && 8.98846567431158E305 >= Math.scalb((Double.MAX_VALUE / 200),-0));
assertEquals("scaleb(double,int)[240] ::", 1.7976931348623157E308, StrictMath.scalb(Double.MAX_VALUE,0));
assertTrue("scaleb(double,int)[241] ::", 1.7976931348623155E308 <= Math.scalb(Double.MAX_VALUE,0) && Infinity >= Math.scalb(Double.MAX_VALUE,0));
assertEquals("scaleb(double,int)[242] ::", Infinity, StrictMath.scalb(Double.MAX_VALUE,1));
assertEquals("scaleb(double,int)[243] ::", Infinity, Math.scalb(Double.MAX_VALUE,1));
assertEquals("scaleb(double,int)[244] ::", Infinity, StrictMath.scalb(Double.MAX_VALUE,2));
assertEquals("scaleb(double,int)[245] ::", Infinity, Math.scalb(Double.MAX_VALUE,2));
assertEquals("scaleb(double,int)[246] ::", Infinity, StrictMath.scalb(Double.MAX_VALUE,5));
assertEquals("scaleb(double,int)[247] ::", Infinity, Math.scalb(Double.MAX_VALUE,5));
assertEquals("scaleb(double,int)[248] ::", Infinity, StrictMath.scalb(Double.MAX_VALUE,2012));
assertEquals("scaleb(double,int)[249] ::", Infinity, Math.scalb(Double.MAX_VALUE,2012));
assertEquals("scaleb(double,int)[250] ::", 0.0, StrictMath.scalb(Double.MAX_VALUE,-21287));
assertTrue("scaleb(double,int)[251] ::", -4.9E-324 <= Math.scalb(Double.MAX_VALUE,-21287) && 4.9E-324 >= Math.scalb(Double.MAX_VALUE,-21287));
assertEquals("scaleb(double,int)[252] ::", 8.988465674311579E307, StrictMath.scalb(Double.MAX_VALUE,-1));
assertTrue("scaleb(double,int)[253] ::", 8.988465674311578E307 <= Math.scalb(Double.MAX_VALUE,-1) && 8.98846567431158E307 >= Math.scalb(Double.MAX_VALUE,-1));
assertEquals("scaleb(double,int)[254] ::", 1.7976931348623157E308, StrictMath.scalb(Double.MAX_VALUE,-0));
assertTrue("scaleb(double,int)[255] ::", 1.7976931348623155E308 <= Math.scalb(Double.MAX_VALUE,-0) && Infinity >= Math.scalb(Double.MAX_VALUE,-0));
assertEquals("scaleb(double,int)[256] ::", 1.7976931348623157E308, StrictMath.scalb(Double.MAX_VALUE + 1,0));
assertTrue("scaleb(double,int)[257] ::", 1.7976931348623155E308 <= Math.scalb(Double.MAX_VALUE + 1,0) && Infinity >= Math.scalb(Double.MAX_VALUE + 1,0));
assertEquals("scaleb(double,int)[258] ::", Infinity, StrictMath.scalb(Double.MAX_VALUE + 1,1));
assertEquals("scaleb(double,int)[259] ::", Infinity, Math.scalb(Double.MAX_VALUE + 1,1));
assertEquals("scaleb(double,int)[260] ::", Infinity, StrictMath.scalb(Double.MAX_VALUE + 1,2));
assertEquals("scaleb(double,int)[261] ::", Infinity, Math.scalb(Double.MAX_VALUE + 1,2));
assertEquals("scaleb(double,int)[262] ::", Infinity, StrictMath.scalb(Double.MAX_VALUE + 1,5));
assertEquals("scaleb(double,int)[263] ::", Infinity, Math.scalb(Double.MAX_VALUE + 1,5));
assertEquals("scaleb(double,int)[264] ::", Infinity, StrictMath.scalb(Double.MAX_VALUE + 1,2012));
assertEquals("scaleb(double,int)[265] ::", Infinity, Math.scalb(Double.MAX_VALUE + 1,2012));
assertEquals("scaleb(double,int)[266] ::", 0.0, StrictMath.scalb(Double.MAX_VALUE + 1,-21287));
assertTrue("scaleb(double,int)[267] ::", -4.9E-324 <= Math.scalb(Double.MAX_VALUE + 1,-21287) && 4.9E-324 >= Math.scalb(Double.MAX_VALUE + 1,-21287));
assertEquals("scaleb(double,int)[268] ::", 8.988465674311579E307, StrictMath.scalb(Double.MAX_VALUE + 1,-1));
assertTrue("scaleb(double,int)[269] ::", 8.988465674311578E307 <= Math.scalb(Double.MAX_VALUE + 1,-1) && 8.98846567431158E307 >= Math.scalb(Double.MAX_VALUE + 1,-1));
assertEquals("scaleb(double,int)[270] ::", 1.7976931348623157E308, StrictMath.scalb(Double.MAX_VALUE + 1,-0));
assertTrue("scaleb(double,int)[271] ::", 1.7976931348623155E308 <= Math.scalb(Double.MAX_VALUE + 1,-0) && Infinity >= Math.scalb(Double.MAX_VALUE + 1,-0));
}

public void testScalb_float()
{
assertEquals("scaleb(float,int)[0] ::", (float)-3.4028235E38, StrictMath.scalb(-Float.MAX_VALUE,0));
assertTrue("scaleb(float,int)[1] ::", (float)-Infinity <= Math.scalb(-Float.MAX_VALUE,0) && -3.4028233E38 >= Math.scalb(-Float.MAX_VALUE,0));
assertEquals("scaleb(float,int)[2] ::", (float)-Infinity, StrictMath.scalb(-Float.MAX_VALUE,1));
assertEquals("scaleb(float,int)[3] ::", (float)-Infinity, Math.scalb(-Float.MAX_VALUE,1));
assertEquals("scaleb(float,int)[4] ::", (float)-Infinity, StrictMath.scalb(-Float.MAX_VALUE,2));
assertEquals("scaleb(float,int)[5] ::", (float)-Infinity, Math.scalb(-Float.MAX_VALUE,2));
assertEquals("scaleb(float,int)[6] ::", (float)-Infinity, StrictMath.scalb(-Float.MAX_VALUE,5));
assertEquals("scaleb(float,int)[7] ::", (float)-Infinity, Math.scalb(-Float.MAX_VALUE,5));
assertEquals("scaleb(float,int)[8] ::", (float)-Infinity, StrictMath.scalb(-Float.MAX_VALUE,2012));
assertEquals("scaleb(float,int)[9] ::", (float)-Infinity, Math.scalb(-Float.MAX_VALUE,2012));
assertEquals("scaleb(float,int)[10] ::", (float)-0.0, StrictMath.scalb(-Float.MAX_VALUE,-21287));
assertTrue("scaleb(float,int)[11] ::", (float)-1.4E-45 <= Math.scalb(-Float.MAX_VALUE,-21287) && 1.4E-45 >= Math.scalb(-Float.MAX_VALUE,-21287));
assertEquals("scaleb(float,int)[12] ::", (float)-1.7014117E38, StrictMath.scalb(-Float.MAX_VALUE,-1));
assertTrue("scaleb(float,int)[13] ::", (float)-1.7014118E38 <= Math.scalb(-Float.MAX_VALUE,-1) && -1.7014116E38 >= Math.scalb(-Float.MAX_VALUE,-1));
assertEquals("scaleb(float,int)[14] ::", (float)-3.4028235E38, StrictMath.scalb(-Float.MAX_VALUE,-0));
assertTrue("scaleb(float,int)[15] ::", (float)-Infinity <= Math.scalb(-Float.MAX_VALUE,-0) && -3.4028233E38 >= Math.scalb(-Float.MAX_VALUE,-0));
assertEquals("scaleb(float,int)[16] ::", (float)-1.7014118E36, StrictMath.scalb((-Float.MAX_VALUE / 200),0));
assertTrue("scaleb(float,int)[17] ::", (float)-1.701412E36 <= Math.scalb((-Float.MAX_VALUE / 200),0) && -1.7014116E36 >= Math.scalb((-Float.MAX_VALUE / 200),0));
assertEquals("scaleb(float,int)[18] ::", (float)-3.4028236E36, StrictMath.scalb((-Float.MAX_VALUE / 200),1));
assertTrue("scaleb(float,int)[19] ::", (float)-3.402824E36 <= Math.scalb((-Float.MAX_VALUE / 200),1) && -3.4028233E36 >= Math.scalb((-Float.MAX_VALUE / 200),1));
assertEquals("scaleb(float,int)[20] ::", (float)-6.805647E36, StrictMath.scalb((-Float.MAX_VALUE / 200),2));
assertTrue("scaleb(float,int)[21] ::", (float)-6.805648E36 <= Math.scalb((-Float.MAX_VALUE / 200),2) && -6.8056466E36 >= Math.scalb((-Float.MAX_VALUE / 200),2));
assertEquals("scaleb(float,int)[22] ::", (float)-5.444518E37, StrictMath.scalb((-Float.MAX_VALUE / 200),5));
assertTrue("scaleb(float,int)[23] ::", (float)-5.4445183E37 <= Math.scalb((-Float.MAX_VALUE / 200),5) && -5.444517E37 >= Math.scalb((-Float.MAX_VALUE / 200),5));
assertEquals("scaleb(float,int)[24] ::", (float)-Infinity, StrictMath.scalb((-Float.MAX_VALUE / 200),2012));
assertEquals("scaleb(float,int)[25] ::", (float)-Infinity, Math.scalb((-Float.MAX_VALUE / 200),2012));
assertEquals("scaleb(float,int)[26] ::", (float)-0.0, StrictMath.scalb((-Float.MAX_VALUE / 200),-21287));
assertTrue("scaleb(float,int)[27] ::", (float)-1.4E-45 <= Math.scalb((-Float.MAX_VALUE / 200),-21287) && 1.4E-45 >= Math.scalb((-Float.MAX_VALUE / 200),-21287));
assertEquals("scaleb(float,int)[28] ::", (float)-8.507059E35, StrictMath.scalb((-Float.MAX_VALUE / 200),-1));
assertTrue("scaleb(float,int)[29] ::", (float)-8.50706E35 <= Math.scalb((-Float.MAX_VALUE / 200),-1) && -8.507058E35 >= Math.scalb((-Float.MAX_VALUE / 200),-1));
assertEquals("scaleb(float,int)[30] ::", (float)-1.7014118E36, StrictMath.scalb((-Float.MAX_VALUE / 200),-0));
assertTrue("scaleb(float,int)[31] ::", (float)-1.701412E36 <= Math.scalb((-Float.MAX_VALUE / 200),-0) && -1.7014116E36 >= Math.scalb((-Float.MAX_VALUE / 200),-0));
assertEquals("scaleb(float,int)[32] ::", (float)-6.805647E35, StrictMath.scalb((-Float.MAX_VALUE / 500),0));
assertTrue("scaleb(float,int)[33] ::", (float)-6.805648E35 <= Math.scalb((-Float.MAX_VALUE / 500),0) && -6.805646E35 >= Math.scalb((-Float.MAX_VALUE / 500),0));
assertEquals("scaleb(float,int)[34] ::", (float)-1.3611294E36, StrictMath.scalb((-Float.MAX_VALUE / 500),1));
assertTrue("scaleb(float,int)[35] ::", (float)-1.3611295E36 <= Math.scalb((-Float.MAX_VALUE / 500),1) && -1.3611292E36 >= Math.scalb((-Float.MAX_VALUE / 500),1));
assertEquals("scaleb(float,int)[36] ::", (float)-2.7222587E36, StrictMath.scalb((-Float.MAX_VALUE / 500),2));
assertTrue("scaleb(float,int)[37] ::", (float)-2.722259E36 <= Math.scalb((-Float.MAX_VALUE / 500),2) && -2.7222584E36 >= Math.scalb((-Float.MAX_VALUE / 500),2));
assertEquals("scaleb(float,int)[38] ::", (float)-2.177807E37, StrictMath.scalb((-Float.MAX_VALUE / 500),5));
assertTrue("scaleb(float,int)[39] ::", (float)-2.1778073E37 <= Math.scalb((-Float.MAX_VALUE / 500),5) && -2.1778067E37 >= Math.scalb((-Float.MAX_VALUE / 500),5));
assertEquals("scaleb(float,int)[40] ::", (float)-Infinity, StrictMath.scalb((-Float.MAX_VALUE / 500),2012));
assertEquals("scaleb(float,int)[41] ::", (float)-Infinity, Math.scalb((-Float.MAX_VALUE / 500),2012));
assertEquals("scaleb(float,int)[42] ::", (float)-0.0, StrictMath.scalb((-Float.MAX_VALUE / 500),-21287));
assertTrue("scaleb(float,int)[43] ::", (float)-1.4E-45 <= Math.scalb((-Float.MAX_VALUE / 500),-21287) && 1.4E-45 >= Math.scalb((-Float.MAX_VALUE / 500),-21287));
assertEquals("scaleb(float,int)[44] ::", (float)-3.4028234E35, StrictMath.scalb((-Float.MAX_VALUE / 500),-1));
assertTrue("scaleb(float,int)[45] ::", (float)-3.402824E35 <= Math.scalb((-Float.MAX_VALUE / 500),-1) && -3.402823E35 >= Math.scalb((-Float.MAX_VALUE / 500),-1));
assertEquals("scaleb(float,int)[46] ::", (float)-6.805647E35, StrictMath.scalb((-Float.MAX_VALUE / 500),-0));
assertTrue("scaleb(float,int)[47] ::", (float)-6.805648E35 <= Math.scalb((-Float.MAX_VALUE / 500),-0) && -6.805646E35 >= Math.scalb((-Float.MAX_VALUE / 500),-0));
assertEquals("scaleb(float,int)[48] ::", (float)-2.803E-42, StrictMath.scalb((-Float.MIN_VALUE * 2000),0));
assertTrue("scaleb(float,int)[49] ::", (float)-2.804E-42 <= Math.scalb((-Float.MIN_VALUE * 2000),0) && -2.801E-42 >= Math.scalb((-Float.MIN_VALUE * 2000),0));
assertEquals("scaleb(float,int)[50] ::", (float)-5.605E-42, StrictMath.scalb((-Float.MIN_VALUE * 2000),1));
assertTrue("scaleb(float,int)[51] ::", (float)-5.607E-42 <= Math.scalb((-Float.MIN_VALUE * 2000),1) && -5.604E-42 >= Math.scalb((-Float.MIN_VALUE * 2000),1));
assertEquals("scaleb(float,int)[52] ::", (float)-1.121E-41, StrictMath.scalb((-Float.MIN_VALUE * 2000),2));
assertTrue("scaleb(float,int)[53] ::", (float)-1.1212E-41 <= Math.scalb((-Float.MIN_VALUE * 2000),2) && -1.1209E-41 >= Math.scalb((-Float.MIN_VALUE * 2000),2));
assertEquals("scaleb(float,int)[54] ::", (float)-8.9683E-41, StrictMath.scalb((-Float.MIN_VALUE * 2000),5));
assertTrue("scaleb(float,int)[55] ::", (float)-8.9685E-41 <= Math.scalb((-Float.MIN_VALUE * 2000),5) && -8.9682E-41 >= Math.scalb((-Float.MIN_VALUE * 2000),5));
assertEquals("scaleb(float,int)[56] ::", (float)-Infinity, StrictMath.scalb((-Float.MIN_VALUE * 2000),2012));
assertEquals("scaleb(float,int)[57] ::", (float)-Infinity, Math.scalb((-Float.MIN_VALUE * 2000),2012));
assertEquals("scaleb(float,int)[58] ::", (float)-0.0, StrictMath.scalb((-Float.MIN_VALUE * 2000),-21287));
assertTrue("scaleb(float,int)[59] ::", (float)-1.4E-45 <= Math.scalb((-Float.MIN_VALUE * 2000),-21287) && 1.4E-45 >= Math.scalb((-Float.MIN_VALUE * 2000),-21287));
assertEquals("scaleb(float,int)[60] ::", (float)-1.401E-42, StrictMath.scalb((-Float.MIN_VALUE * 2000),-1));
assertTrue("scaleb(float,int)[61] ::", (float)-1.403E-42 <= Math.scalb((-Float.MIN_VALUE * 2000),-1) && -1.4E-42 >= Math.scalb((-Float.MIN_VALUE * 2000),-1));
assertEquals("scaleb(float,int)[62] ::", (float)-2.803E-42, StrictMath.scalb((-Float.MIN_VALUE * 2000),-0));
assertTrue("scaleb(float,int)[63] ::", (float)-2.804E-42 <= Math.scalb((-Float.MIN_VALUE * 2000),-0) && -2.801E-42 >= Math.scalb((-Float.MIN_VALUE * 2000),-0));
assertEquals("scaleb(float,int)[64] ::", (float)-1.401E-42, StrictMath.scalb((-Float.MIN_VALUE * 1000),0));
assertTrue("scaleb(float,int)[65] ::", (float)-1.403E-42 <= Math.scalb((-Float.MIN_VALUE * 1000),0) && -1.4E-42 >= Math.scalb((-Float.MIN_VALUE * 1000),0));
assertEquals("scaleb(float,int)[66] ::", (float)-2.803E-42, StrictMath.scalb((-Float.MIN_VALUE * 1000),1));
assertTrue("scaleb(float,int)[67] ::", (float)-2.804E-42 <= Math.scalb((-Float.MIN_VALUE * 1000),1) && -2.801E-42 >= Math.scalb((-Float.MIN_VALUE * 1000),1));
assertEquals("scaleb(float,int)[68] ::", (float)-5.605E-42, StrictMath.scalb((-Float.MIN_VALUE * 1000),2));
assertTrue("scaleb(float,int)[69] ::", (float)-5.607E-42 <= Math.scalb((-Float.MIN_VALUE * 1000),2) && -5.604E-42 >= Math.scalb((-Float.MIN_VALUE * 1000),2));
assertEquals("scaleb(float,int)[70] ::", (float)-4.4842E-41, StrictMath.scalb((-Float.MIN_VALUE * 1000),5));
assertTrue("scaleb(float,int)[71] ::", (float)-4.4843E-41 <= Math.scalb((-Float.MIN_VALUE * 1000),5) && -4.484E-41 >= Math.scalb((-Float.MIN_VALUE * 1000),5));
assertEquals("scaleb(float,int)[72] ::", (float)-Infinity, StrictMath.scalb((-Float.MIN_VALUE * 1000),2012));
assertEquals("scaleb(float,int)[73] ::", (float)-Infinity, Math.scalb((-Float.MIN_VALUE * 1000),2012));
assertEquals("scaleb(float,int)[74] ::", (float)-0.0, StrictMath.scalb((-Float.MIN_VALUE * 1000),-21287));
assertTrue("scaleb(float,int)[75] ::", (float)-1.4E-45 <= Math.scalb((-Float.MIN_VALUE * 1000),-21287) && 1.4E-45 >= Math.scalb((-Float.MIN_VALUE * 1000),-21287));
assertEquals("scaleb(float,int)[76] ::", (float)-7.0E-43, StrictMath.scalb((-Float.MIN_VALUE * 1000),-1));
assertTrue("scaleb(float,int)[77] ::", (float)-7.02E-43 <= Math.scalb((-Float.MIN_VALUE * 1000),-1) && -6.99E-43 >= Math.scalb((-Float.MIN_VALUE * 1000),-1));
assertEquals("scaleb(float,int)[78] ::", (float)-1.401E-42, StrictMath.scalb((-Float.MIN_VALUE * 1000),-0));
assertTrue("scaleb(float,int)[79] ::", (float)-1.403E-42 <= Math.scalb((-Float.MIN_VALUE * 1000),-0) && -1.4E-42 >= Math.scalb((-Float.MIN_VALUE * 1000),-0));
assertEquals("scaleb(float,int)[80] ::", (float)-3.2948748E7, StrictMath.scalb(-32948748.958324F,0));
assertTrue("scaleb(float,int)[81] ::", (float)-3.294875E7 <= Math.scalb(-32948748.958324F,0) && -3.2948746E7 >= Math.scalb(-32948748.958324F,0));
assertEquals("scaleb(float,int)[82] ::", (float)-6.5897496E7, StrictMath.scalb(-32948748.958324F,1));
assertTrue("scaleb(float,int)[83] ::", (float)-6.58975E7 <= Math.scalb(-32948748.958324F,1) && -6.5897492E7 >= Math.scalb(-32948748.958324F,1));
assertEquals("scaleb(float,int)[84] ::", (float)-1.31794992E8, StrictMath.scalb(-32948748.958324F,2));
assertTrue("scaleb(float,int)[85] ::", (float)-1.31795E8 <= Math.scalb(-32948748.958324F,2) && -1.31794984E8 >= Math.scalb(-32948748.958324F,2));
assertEquals("scaleb(float,int)[86] ::", (float)-1.05435994E9, StrictMath.scalb(-32948748.958324F,5));
assertTrue("scaleb(float,int)[87] ::", (float)-1.05436E9 <= Math.scalb(-32948748.958324F,5) && -1.05435987E9 >= Math.scalb(-32948748.958324F,5));
assertEquals("scaleb(float,int)[88] ::", (float)-Infinity, StrictMath.scalb(-32948748.958324F,2012));
assertEquals("scaleb(float,int)[89] ::", (float)-Infinity, Math.scalb(-32948748.958324F,2012));
assertEquals("scaleb(float,int)[90] ::", (float)-0.0, StrictMath.scalb(-32948748.958324F,-21287));
assertTrue("scaleb(float,int)[91] ::", (float)-1.4E-45 <= Math.scalb(-32948748.958324F,-21287) && 1.4E-45 >= Math.scalb(-32948748.958324F,-21287));
assertEquals("scaleb(float,int)[92] ::", (float)-1.6474374E7, StrictMath.scalb(-32948748.958324F,-1));
assertTrue("scaleb(float,int)[93] ::", (float)-1.6474375E7 <= Math.scalb(-32948748.958324F,-1) && -1.6474373E7 >= Math.scalb(-32948748.958324F,-1));
assertEquals("scaleb(float,int)[94] ::", (float)-3.2948748E7, StrictMath.scalb(-32948748.958324F,-0));
assertTrue("scaleb(float,int)[95] ::", (float)-3.294875E7 <= Math.scalb(-32948748.958324F,-0) && -3.2948746E7 >= Math.scalb(-32948748.958324F,-0));
assertEquals("scaleb(float,int)[96] ::", (float)-9.0E-9, StrictMath.scalb(-0.000000009F,0));
assertTrue("scaleb(float,int)[97] ::", (float)-9.000001E-9 <= Math.scalb(-0.000000009F,0) && -8.999999E-9 >= Math.scalb(-0.000000009F,0));
assertEquals("scaleb(float,int)[98] ::", (float)-1.8E-8, StrictMath.scalb(-0.000000009F,1));
assertTrue("scaleb(float,int)[99] ::", (float)-1.8000001E-8 <= Math.scalb(-0.000000009F,1) && -1.7999998E-8 >= Math.scalb(-0.000000009F,1));
assertEquals("scaleb(float,int)[100] ::", (float)-3.6E-8, StrictMath.scalb(-0.000000009F,2));
assertTrue("scaleb(float,int)[101] ::", (float)-3.6000003E-8 <= Math.scalb(-0.000000009F,2) && -3.5999996E-8 >= Math.scalb(-0.000000009F,2));
assertEquals("scaleb(float,int)[102] ::", (float)-2.88E-7, StrictMath.scalb(-0.000000009F,5));
assertTrue("scaleb(float,int)[103] ::", (float)-2.8800002E-7 <= Math.scalb(-0.000000009F,5) && -2.8799997E-7 >= Math.scalb(-0.000000009F,5));
assertEquals("scaleb(float,int)[104] ::", (float)-Infinity, StrictMath.scalb(-0.000000009F,2012));
assertEquals("scaleb(float,int)[105] ::", (float)-Infinity, Math.scalb(-0.000000009F,2012));
assertEquals("scaleb(float,int)[106] ::", (float)-0.0, StrictMath.scalb(-0.000000009F,-21287));
assertTrue("scaleb(float,int)[107] ::", (float)-1.4E-45 <= Math.scalb(-0.000000009F,-21287) && 1.4E-45 >= Math.scalb(-0.000000009F,-21287));
assertEquals("scaleb(float,int)[108] ::", (float)-4.5E-9, StrictMath.scalb(-0.000000009F,-1));
assertTrue("scaleb(float,int)[109] ::", (float)-4.5000004E-9 <= Math.scalb(-0.000000009F,-1) && -4.4999995E-9 >= Math.scalb(-0.000000009F,-1));
assertEquals("scaleb(float,int)[110] ::", (float)-9.0E-9, StrictMath.scalb(-0.000000009F,-0));
assertTrue("scaleb(float,int)[111] ::", (float)-9.000001E-9 <= Math.scalb(-0.000000009F,-0) && -8.999999E-9 >= Math.scalb(-0.000000009F,-0));
assertEquals("scaleb(float,int)[112] ::", (float)-2.0E-7, StrictMath.scalb(-0.0000002F,0));
assertTrue("scaleb(float,int)[113] ::", (float)-2.0000002E-7 <= Math.scalb(-0.0000002F,0) && -1.9999999E-7 >= Math.scalb(-0.0000002F,0));
assertEquals("scaleb(float,int)[114] ::", (float)-4.0E-7, StrictMath.scalb(-0.0000002F,1));
assertTrue("scaleb(float,int)[115] ::", (float)-4.0000003E-7 <= Math.scalb(-0.0000002F,1) && -3.9999998E-7 >= Math.scalb(-0.0000002F,1));
assertEquals("scaleb(float,int)[116] ::", (float)-8.0E-7, StrictMath.scalb(-0.0000002F,2));
assertTrue("scaleb(float,int)[117] ::", (float)-8.0000007E-7 <= Math.scalb(-0.0000002F,2) && -7.9999995E-7 >= Math.scalb(-0.0000002F,2));
assertEquals("scaleb(float,int)[118] ::", (float)-6.4E-6, StrictMath.scalb(-0.0000002F,5));
assertTrue("scaleb(float,int)[119] ::", (float)-6.4000005E-6 <= Math.scalb(-0.0000002F,5) && -6.3999996E-6 >= Math.scalb(-0.0000002F,5));
assertEquals("scaleb(float,int)[120] ::", (float)-Infinity, StrictMath.scalb(-0.0000002F,2012));
assertEquals("scaleb(float,int)[121] ::", (float)-Infinity, Math.scalb(-0.0000002F,2012));
assertEquals("scaleb(float,int)[122] ::", (float)-0.0, StrictMath.scalb(-0.0000002F,-21287));
assertTrue("scaleb(float,int)[123] ::", (float)-1.4E-45 <= Math.scalb(-0.0000002F,-21287) && 1.4E-45 >= Math.scalb(-0.0000002F,-21287));
assertEquals("scaleb(float,int)[124] ::", (float)-1.0E-7, StrictMath.scalb(-0.0000002F,-1));
assertTrue("scaleb(float,int)[125] ::", (float)-1.0000001E-7 <= Math.scalb(-0.0000002F,-1) && -9.9999994E-8 >= Math.scalb(-0.0000002F,-1));
assertEquals("scaleb(float,int)[126] ::", (float)-2.0E-7, StrictMath.scalb(-0.0000002F,-0));
assertTrue("scaleb(float,int)[127] ::", (float)-2.0000002E-7 <= Math.scalb(-0.0000002F,-0) && -1.9999999E-7 >= Math.scalb(-0.0000002F,-0));
assertEquals("scaleb(float,int)[128] ::", (float)0.0, StrictMath.scalb(0F,0));
assertTrue("scaleb(float,int)[129] ::", (float)-1.4E-45 <= Math.scalb(0F,0) && 1.4E-45 >= Math.scalb(0F,0));
assertEquals("scaleb(float,int)[130] ::", (float)0.0, StrictMath.scalb(0F,1));
assertTrue("scaleb(float,int)[131] ::", (float)-1.4E-45 <= Math.scalb(0F,1) && 1.4E-45 >= Math.scalb(0F,1));
assertEquals("scaleb(float,int)[132] ::", (float)0.0, StrictMath.scalb(0F,2));
assertTrue("scaleb(float,int)[133] ::", (float)-1.4E-45 <= Math.scalb(0F,2) && 1.4E-45 >= Math.scalb(0F,2));
assertEquals("scaleb(float,int)[134] ::", (float)0.0, StrictMath.scalb(0F,5));
assertTrue("scaleb(float,int)[135] ::", (float)-1.4E-45 <= Math.scalb(0F,5) && 1.4E-45 >= Math.scalb(0F,5));
assertEquals("scaleb(float,int)[136] ::", (float)0.0, StrictMath.scalb(0F,2012));
assertTrue("scaleb(float,int)[137] ::", (float)-1.4E-45 <= Math.scalb(0F,2012) && 1.4E-45 >= Math.scalb(0F,2012));
assertEquals("scaleb(float,int)[138] ::", (float)0.0, StrictMath.scalb(0F,-21287));
assertTrue("scaleb(float,int)[139] ::", (float)-1.4E-45 <= Math.scalb(0F,-21287) && 1.4E-45 >= Math.scalb(0F,-21287));
assertEquals("scaleb(float,int)[140] ::", (float)0.0, StrictMath.scalb(0F,-1));
assertTrue("scaleb(float,int)[141] ::", (float)-1.4E-45 <= Math.scalb(0F,-1) && 1.4E-45 >= Math.scalb(0F,-1));
assertEquals("scaleb(float,int)[142] ::", (float)0.0, StrictMath.scalb(0F,-0));
assertTrue("scaleb(float,int)[143] ::", (float)-1.4E-45 <= Math.scalb(0F,-0) && 1.4E-45 >= Math.scalb(0F,-0));
assertEquals("scaleb(float,int)[144] ::", (float)0.45623234, StrictMath.scalb(0.456232334F,0));
assertTrue("scaleb(float,int)[145] ::", (float)0.4562323 <= Math.scalb(0.456232334F,0) && 0.45623237 >= Math.scalb(0.456232334F,0));
assertEquals("scaleb(float,int)[146] ::", (float)0.9124647, StrictMath.scalb(0.456232334F,1));
assertTrue("scaleb(float,int)[147] ::", (float)0.9124646 <= Math.scalb(0.456232334F,1) && 0.91246474 >= Math.scalb(0.456232334F,1));
assertEquals("scaleb(float,int)[148] ::", (float)1.8249294, StrictMath.scalb(0.456232334F,2));
assertTrue("scaleb(float,int)[149] ::", (float)1.8249292 <= Math.scalb(0.456232334F,2) && 1.8249295 >= Math.scalb(0.456232334F,2));
assertEquals("scaleb(float,int)[150] ::", (float)14.599435, StrictMath.scalb(0.456232334F,5));
assertTrue("scaleb(float,int)[151] ::", (float)14.599434 <= Math.scalb(0.456232334F,5) && 14.599436 >= Math.scalb(0.456232334F,5));
assertEquals("scaleb(float,int)[152] ::", (float)Infinity, StrictMath.scalb(0.456232334F,2012));
assertEquals("scaleb(float,int)[153] ::", (float)Infinity, Math.scalb(0.456232334F,2012));
assertEquals("scaleb(float,int)[154] ::", (float)0.0, StrictMath.scalb(0.456232334F,-21287));
assertTrue("scaleb(float,int)[155] ::", (float)-1.4E-45 <= Math.scalb(0.456232334F,-21287) && 1.4E-45 >= Math.scalb(0.456232334F,-21287));
assertEquals("scaleb(float,int)[156] ::", (float)0.22811617, StrictMath.scalb(0.456232334F,-1));
assertTrue("scaleb(float,int)[157] ::", (float)0.22811615 <= Math.scalb(0.456232334F,-1) && 0.22811618 >= Math.scalb(0.456232334F,-1));
assertEquals("scaleb(float,int)[158] ::", (float)0.45623234, StrictMath.scalb(0.456232334F,-0));
assertTrue("scaleb(float,int)[159] ::", (float)0.4562323 <= Math.scalb(0.456232334F,-0) && 0.45623237 >= Math.scalb(0.456232334F,-0));
assertEquals("scaleb(float,int)[160] ::", (float)1224257.2, StrictMath.scalb(1224257.312321263F,0));
assertTrue("scaleb(float,int)[161] ::", (float)1224257.1 <= Math.scalb(1224257.312321263F,0) && 1224257.4 >= Math.scalb(1224257.312321263F,0));
assertEquals("scaleb(float,int)[162] ::", (float)2448514.5, StrictMath.scalb(1224257.312321263F,1));
assertTrue("scaleb(float,int)[163] ::", (float)2448514.2 <= Math.scalb(1224257.312321263F,1) && 2448514.8 >= Math.scalb(1224257.312321263F,1));
assertEquals("scaleb(float,int)[164] ::", (float)4897029.0, StrictMath.scalb(1224257.312321263F,2));
assertTrue("scaleb(float,int)[165] ::", (float)4897028.5 <= Math.scalb(1224257.312321263F,2) && 4897029.5 >= Math.scalb(1224257.312321263F,2));
assertEquals("scaleb(float,int)[166] ::", (float)3.9176232E7, StrictMath.scalb(1224257.312321263F,5));
assertTrue("scaleb(float,int)[167] ::", (float)3.9176228E7 <= Math.scalb(1224257.312321263F,5) && 3.9176236E7 >= Math.scalb(1224257.312321263F,5));
assertEquals("scaleb(float,int)[168] ::", (float)Infinity, StrictMath.scalb(1224257.312321263F,2012));
assertEquals("scaleb(float,int)[169] ::", (float)Infinity, Math.scalb(1224257.312321263F,2012));
assertEquals("scaleb(float,int)[170] ::", (float)0.0, StrictMath.scalb(1224257.312321263F,-21287));
assertTrue("scaleb(float,int)[171] ::", (float)-1.4E-45 <= Math.scalb(1224257.312321263F,-21287) && 1.4E-45 >= Math.scalb(1224257.312321263F,-21287));
assertEquals("scaleb(float,int)[172] ::", (float)612128.6, StrictMath.scalb(1224257.312321263F,-1));
assertTrue("scaleb(float,int)[173] ::", (float)612128.56 <= Math.scalb(1224257.312321263F,-1) && 612128.7 >= Math.scalb(1224257.312321263F,-1));
assertEquals("scaleb(float,int)[174] ::", (float)1224257.2, StrictMath.scalb(1224257.312321263F,-0));
assertTrue("scaleb(float,int)[175] ::", (float)1224257.1 <= Math.scalb(1224257.312321263F,-0) && 1224257.4 >= Math.scalb(1224257.312321263F,-0));
assertEquals("scaleb(float,int)[176] ::", (float)9.9998321E9, StrictMath.scalb(9999832342.12365F,0));
assertTrue("scaleb(float,int)[177] ::", (float)9.999831E9 <= Math.scalb(9999832342.12365F,0) && 9.9998331E9 >= Math.scalb(9999832342.12365F,0));
assertEquals("scaleb(float,int)[178] ::", (float)1.99996641E10, StrictMath.scalb(9999832342.12365F,1));
assertTrue("scaleb(float,int)[179] ::", (float)1.99996621E10 <= Math.scalb(9999832342.12365F,1) && 1.99996662E10 >= Math.scalb(9999832342.12365F,1));
assertEquals("scaleb(float,int)[180] ::", (float)3.9999328E10, StrictMath.scalb(9999832342.12365F,2));
assertTrue("scaleb(float,int)[181] ::", (float)3.9999324E10 <= Math.scalb(9999832342.12365F,2) && 3.9999332E10 >= Math.scalb(9999832342.12365F,2));
assertEquals("scaleb(float,int)[182] ::", (float)3.19994626E11, StrictMath.scalb(9999832342.12365F,5));
assertTrue("scaleb(float,int)[183] ::", (float)3.19994593E11 <= Math.scalb(9999832342.12365F,5) && 3.19994659E11 >= Math.scalb(9999832342.12365F,5));
assertEquals("scaleb(float,int)[184] ::", (float)Infinity, StrictMath.scalb(9999832342.12365F,2012));
assertEquals("scaleb(float,int)[185] ::", (float)Infinity, Math.scalb(9999832342.12365F,2012));
assertEquals("scaleb(float,int)[186] ::", (float)0.0, StrictMath.scalb(9999832342.12365F,-21287));
assertTrue("scaleb(float,int)[187] ::", (float)-1.4E-45 <= Math.scalb(9999832342.12365F,-21287) && 1.4E-45 >= Math.scalb(9999832342.12365F,-21287));
assertEquals("scaleb(float,int)[188] ::", (float)4.999916E9, StrictMath.scalb(9999832342.12365F,-1));
assertTrue("scaleb(float,int)[189] ::", (float)4.9999155E9 <= Math.scalb(9999832342.12365F,-1) && 4.9999165E9 >= Math.scalb(9999832342.12365F,-1));
assertEquals("scaleb(float,int)[190] ::", (float)9.9998321E9, StrictMath.scalb(9999832342.12365F,-0));
assertTrue("scaleb(float,int)[191] ::", (float)9.999831E9 <= Math.scalb(9999832342.12365F,-0) && 9.9998331E9 >= Math.scalb(9999832342.12365F,-0));
assertEquals("scaleb(float,int)[192] ::", (float)1.4E-45, StrictMath.scalb(Float.MIN_VALUE,0));
assertTrue("scaleb(float,int)[193] ::", (float)0.0 <= Math.scalb(Float.MIN_VALUE,0) && 2.8E-45 >= Math.scalb(Float.MIN_VALUE,0));
assertEquals("scaleb(float,int)[194] ::", (float)2.8E-45, StrictMath.scalb(Float.MIN_VALUE,1));
assertTrue("scaleb(float,int)[195] ::", (float)1.4E-45 <= Math.scalb(Float.MIN_VALUE,1) && 4.2E-45 >= Math.scalb(Float.MIN_VALUE,1));
assertEquals("scaleb(float,int)[196] ::", (float)5.6E-45, StrictMath.scalb(Float.MIN_VALUE,2));
assertTrue("scaleb(float,int)[197] ::", (float)4.2E-45 <= Math.scalb(Float.MIN_VALUE,2) && 7.0E-45 >= Math.scalb(Float.MIN_VALUE,2));
assertEquals("scaleb(float,int)[198] ::", (float)4.5E-44, StrictMath.scalb(Float.MIN_VALUE,5));
assertTrue("scaleb(float,int)[199] ::", (float)4.3E-44 <= Math.scalb(Float.MIN_VALUE,5) && 4.6E-44 >= Math.scalb(Float.MIN_VALUE,5));
assertEquals("scaleb(float,int)[200] ::", (float)Infinity, StrictMath.scalb(Float.MIN_VALUE,2012));
assertEquals("scaleb(float,int)[201] ::", (float)Infinity, Math.scalb(Float.MIN_VALUE,2012));
assertEquals("scaleb(float,int)[202] ::", (float)0.0, StrictMath.scalb(Float.MIN_VALUE,-21287));
assertTrue("scaleb(float,int)[203] ::", (float)-1.4E-45 <= Math.scalb(Float.MIN_VALUE,-21287) && 1.4E-45 >= Math.scalb(Float.MIN_VALUE,-21287));
assertEquals("scaleb(float,int)[204] ::", (float)0.0, StrictMath.scalb(Float.MIN_VALUE,-1));
assertTrue("scaleb(float,int)[205] ::", (float)-1.4E-45 <= Math.scalb(Float.MIN_VALUE,-1) && 1.4E-45 >= Math.scalb(Float.MIN_VALUE,-1));
assertEquals("scaleb(float,int)[206] ::", (float)1.4E-45, StrictMath.scalb(Float.MIN_VALUE,-0));
assertTrue("scaleb(float,int)[207] ::", (float)0.0 <= Math.scalb(Float.MIN_VALUE,-0) && 2.8E-45 >= Math.scalb(Float.MIN_VALUE,-0));
assertEquals("scaleb(float,int)[208] ::", (float)2.8E-43, StrictMath.scalb((Float.MIN_VALUE * 200),0));
assertTrue("scaleb(float,int)[209] ::", (float)2.79E-43 <= Math.scalb((Float.MIN_VALUE * 200),0) && 2.82E-43 >= Math.scalb((Float.MIN_VALUE * 200),0));
assertEquals("scaleb(float,int)[210] ::", (float)5.6E-43, StrictMath.scalb((Float.MIN_VALUE * 200),1));
assertTrue("scaleb(float,int)[211] ::", (float)5.59E-43 <= Math.scalb((Float.MIN_VALUE * 200),1) && 5.62E-43 >= Math.scalb((Float.MIN_VALUE * 200),1));
assertEquals("scaleb(float,int)[212] ::", (float)1.121E-42, StrictMath.scalb((Float.MIN_VALUE * 200),2));
assertTrue("scaleb(float,int)[213] ::", (float)1.12E-42 <= Math.scalb((Float.MIN_VALUE * 200),2) && 1.122E-42 >= Math.scalb((Float.MIN_VALUE * 200),2));
assertEquals("scaleb(float,int)[214] ::", (float)8.968E-42, StrictMath.scalb((Float.MIN_VALUE * 200),5));
assertTrue("scaleb(float,int)[215] ::", (float)8.967E-42 <= Math.scalb((Float.MIN_VALUE * 200),5) && 8.97E-42 >= Math.scalb((Float.MIN_VALUE * 200),5));
assertEquals("scaleb(float,int)[216] ::", (float)Infinity, StrictMath.scalb((Float.MIN_VALUE * 200),2012));
assertEquals("scaleb(float,int)[217] ::", (float)Infinity, Math.scalb((Float.MIN_VALUE * 200),2012));
assertEquals("scaleb(float,int)[218] ::", (float)0.0, StrictMath.scalb((Float.MIN_VALUE * 200),-21287));
assertTrue("scaleb(float,int)[219] ::", (float)-1.4E-45 <= Math.scalb((Float.MIN_VALUE * 200),-21287) && 1.4E-45 >= Math.scalb((Float.MIN_VALUE * 200),-21287));
assertEquals("scaleb(float,int)[220] ::", (float)1.4E-43, StrictMath.scalb((Float.MIN_VALUE * 200),-1));
assertTrue("scaleb(float,int)[221] ::", (float)1.39E-43 <= Math.scalb((Float.MIN_VALUE * 200),-1) && 1.42E-43 >= Math.scalb((Float.MIN_VALUE * 200),-1));
assertEquals("scaleb(float,int)[222] ::", (float)2.8E-43, StrictMath.scalb((Float.MIN_VALUE * 200),-0));
assertTrue("scaleb(float,int)[223] ::", (float)2.79E-43 <= Math.scalb((Float.MIN_VALUE * 200),-0) && 2.82E-43 >= Math.scalb((Float.MIN_VALUE * 200),-0));
assertEquals("scaleb(float,int)[224] ::", (float)6.805647E35, StrictMath.scalb((Float.MAX_VALUE / 500),0));
assertTrue("scaleb(float,int)[225] ::", (float)6.805646E35 <= Math.scalb((Float.MAX_VALUE / 500),0) && 6.805648E35 >= Math.scalb((Float.MAX_VALUE / 500),0));
assertEquals("scaleb(float,int)[226] ::", (float)1.3611294E36, StrictMath.scalb((Float.MAX_VALUE / 500),1));
assertTrue("scaleb(float,int)[227] ::", (float)1.3611292E36 <= Math.scalb((Float.MAX_VALUE / 500),1) && 1.3611295E36 >= Math.scalb((Float.MAX_VALUE / 500),1));
assertEquals("scaleb(float,int)[228] ::", (float)2.7222587E36, StrictMath.scalb((Float.MAX_VALUE / 500),2));
assertTrue("scaleb(float,int)[229] ::", (float)2.7222584E36 <= Math.scalb((Float.MAX_VALUE / 500),2) && 2.722259E36 >= Math.scalb((Float.MAX_VALUE / 500),2));
assertEquals("scaleb(float,int)[230] ::", (float)2.177807E37, StrictMath.scalb((Float.MAX_VALUE / 500),5));
assertTrue("scaleb(float,int)[231] ::", (float)2.1778067E37 <= Math.scalb((Float.MAX_VALUE / 500),5) && 2.1778073E37 >= Math.scalb((Float.MAX_VALUE / 500),5));
assertEquals("scaleb(float,int)[232] ::", (float)Infinity, StrictMath.scalb((Float.MAX_VALUE / 500),2012));
assertEquals("scaleb(float,int)[233] ::", (float)Infinity, Math.scalb((Float.MAX_VALUE / 500),2012));
assertEquals("scaleb(float,int)[234] ::", (float)0.0, StrictMath.scalb((Float.MAX_VALUE / 500),-21287));
assertTrue("scaleb(float,int)[235] ::", (float)-1.4E-45 <= Math.scalb((Float.MAX_VALUE / 500),-21287) && 1.4E-45 >= Math.scalb((Float.MAX_VALUE / 500),-21287));
assertEquals("scaleb(float,int)[236] ::", (float)3.4028234E35, StrictMath.scalb((Float.MAX_VALUE / 500),-1));
assertTrue("scaleb(float,int)[237] ::", (float)3.402823E35 <= Math.scalb((Float.MAX_VALUE / 500),-1) && 3.402824E35 >= Math.scalb((Float.MAX_VALUE / 500),-1));
assertEquals("scaleb(float,int)[238] ::", (float)6.805647E35, StrictMath.scalb((Float.MAX_VALUE / 500),-0));
assertTrue("scaleb(float,int)[239] ::", (float)6.805646E35 <= Math.scalb((Float.MAX_VALUE / 500),-0) && 6.805648E35 >= Math.scalb((Float.MAX_VALUE / 500),-0));
assertEquals("scaleb(float,int)[240] ::", (float)1.7014118E36, StrictMath.scalb((Float.MAX_VALUE / 200),0));
assertTrue("scaleb(float,int)[241] ::", (float)1.7014116E36 <= Math.scalb((Float.MAX_VALUE / 200),0) && 1.701412E36 >= Math.scalb((Float.MAX_VALUE / 200),0));
assertEquals("scaleb(float,int)[242] ::", (float)3.4028236E36, StrictMath.scalb((Float.MAX_VALUE / 200),1));
assertTrue("scaleb(float,int)[243] ::", (float)3.4028233E36 <= Math.scalb((Float.MAX_VALUE / 200),1) && 3.402824E36 >= Math.scalb((Float.MAX_VALUE / 200),1));
assertEquals("scaleb(float,int)[244] ::", (float)6.805647E36, StrictMath.scalb((Float.MAX_VALUE / 200),2));
assertTrue("scaleb(float,int)[245] ::", (float)6.8056466E36 <= Math.scalb((Float.MAX_VALUE / 200),2) && 6.805648E36 >= Math.scalb((Float.MAX_VALUE / 200),2));
assertEquals("scaleb(float,int)[246] ::", (float)5.444518E37, StrictMath.scalb((Float.MAX_VALUE / 200),5));
assertTrue("scaleb(float,int)[247] ::", (float)5.444517E37 <= Math.scalb((Float.MAX_VALUE / 200),5) && 5.4445183E37 >= Math.scalb((Float.MAX_VALUE / 200),5));
assertEquals("scaleb(float,int)[248] ::", (float)Infinity, StrictMath.scalb((Float.MAX_VALUE / 200),2012));
assertEquals("scaleb(float,int)[249] ::", (float)Infinity, Math.scalb((Float.MAX_VALUE / 200),2012));
assertEquals("scaleb(float,int)[250] ::", (float)0.0, StrictMath.scalb((Float.MAX_VALUE / 200),-21287));
assertTrue("scaleb(float,int)[251] ::", (float)-1.4E-45 <= Math.scalb((Float.MAX_VALUE / 200),-21287) && 1.4E-45 >= Math.scalb((Float.MAX_VALUE / 200),-21287));
assertEquals("scaleb(float,int)[252] ::", (float)8.507059E35, StrictMath.scalb((Float.MAX_VALUE / 200),-1));
assertTrue("scaleb(float,int)[253] ::", (float)8.507058E35 <= Math.scalb((Float.MAX_VALUE / 200),-1) && 8.50706E35 >= Math.scalb((Float.MAX_VALUE / 200),-1));
assertEquals("scaleb(float,int)[254] ::", (float)1.7014118E36, StrictMath.scalb((Float.MAX_VALUE / 200),-0));
assertTrue("scaleb(float,int)[255] ::", (float)1.7014116E36 <= Math.scalb((Float.MAX_VALUE / 200),-0) && 1.701412E36 >= Math.scalb((Float.MAX_VALUE / 200),-0));
assertEquals("scaleb(float,int)[256] ::", (float)3.4028235E38, StrictMath.scalb(Float.MAX_VALUE,0));
assertTrue("scaleb(float,int)[257] ::", (float)3.4028233E38 <= Math.scalb(Float.MAX_VALUE,0) && Infinity >= Math.scalb(Float.MAX_VALUE,0));
assertEquals("scaleb(float,int)[258] ::", (float)Infinity, StrictMath.scalb(Float.MAX_VALUE,1));
assertEquals("scaleb(float,int)[259] ::", (float)Infinity, Math.scalb(Float.MAX_VALUE,1));
assertEquals("scaleb(float,int)[260] ::", (float)Infinity, StrictMath.scalb(Float.MAX_VALUE,2));
assertEquals("scaleb(float,int)[261] ::", (float)Infinity, Math.scalb(Float.MAX_VALUE,2));
assertEquals("scaleb(float,int)[262] ::", (float)Infinity, StrictMath.scalb(Float.MAX_VALUE,5));
assertEquals("scaleb(float,int)[263] ::", (float)Infinity, Math.scalb(Float.MAX_VALUE,5));
assertEquals("scaleb(float,int)[264] ::", (float)Infinity, StrictMath.scalb(Float.MAX_VALUE,2012));
assertEquals("scaleb(float,int)[265] ::", (float)Infinity, Math.scalb(Float.MAX_VALUE,2012));
assertEquals("scaleb(float,int)[266] ::", (float)0.0, StrictMath.scalb(Float.MAX_VALUE,-21287));
assertTrue("scaleb(float,int)[267] ::", (float)-1.4E-45 <= Math.scalb(Float.MAX_VALUE,-21287) && 1.4E-45 >= Math.scalb(Float.MAX_VALUE,-21287));
assertEquals("scaleb(float,int)[268] ::", (float)1.7014117E38, StrictMath.scalb(Float.MAX_VALUE,-1));
assertTrue("scaleb(float,int)[269] ::", (float)1.7014116E38 <= Math.scalb(Float.MAX_VALUE,-1) && 1.7014118E38 >= Math.scalb(Float.MAX_VALUE,-1));
assertEquals("scaleb(float,int)[270] ::", (float)3.4028235E38, StrictMath.scalb(Float.MAX_VALUE,-0));
assertTrue("scaleb(float,int)[271] ::", (float)3.4028233E38 <= Math.scalb(Float.MAX_VALUE,-0) && Infinity >= Math.scalb(Float.MAX_VALUE,-0));
assertEquals("scaleb(float,int)[272] ::", (float)3.4028235E38, StrictMath.scalb((Float.MAX_VALUE + 1),0));
assertTrue("scaleb(float,int)[273] ::", (float)3.4028233E38 <= Math.scalb((Float.MAX_VALUE + 1),0) && Infinity >= Math.scalb((Float.MAX_VALUE + 1),0));
assertEquals("scaleb(float,int)[274] ::", (float)Infinity, StrictMath.scalb((Float.MAX_VALUE + 1),1));
assertEquals("scaleb(float,int)[275] ::", (float)Infinity, Math.scalb((Float.MAX_VALUE + 1),1));
assertEquals("scaleb(float,int)[276] ::", (float)Infinity, StrictMath.scalb((Float.MAX_VALUE + 1),2));
assertEquals("scaleb(float,int)[277] ::", (float)Infinity, Math.scalb((Float.MAX_VALUE + 1),2));
assertEquals("scaleb(float,int)[278] ::", (float)Infinity, StrictMath.scalb((Float.MAX_VALUE + 1),5));
assertEquals("scaleb(float,int)[279] ::", (float)Infinity, Math.scalb((Float.MAX_VALUE + 1),5));
assertEquals("scaleb(float,int)[280] ::", (float)Infinity, StrictMath.scalb((Float.MAX_VALUE + 1),2012));
assertEquals("scaleb(float,int)[281] ::", (float)Infinity, Math.scalb((Float.MAX_VALUE + 1),2012));
assertEquals("scaleb(float,int)[282] ::", (float)0.0, StrictMath.scalb((Float.MAX_VALUE + 1),-21287));
assertTrue("scaleb(float,int)[283] ::", (float)-1.4E-45 <= Math.scalb((Float.MAX_VALUE + 1),-21287) && 1.4E-45 >= Math.scalb((Float.MAX_VALUE + 1),-21287));
assertEquals("scaleb(float,int)[284] ::", (float)1.7014117E38, StrictMath.scalb((Float.MAX_VALUE + 1),-1));
assertTrue("scaleb(float,int)[285] ::", (float)1.7014116E38 <= Math.scalb((Float.MAX_VALUE + 1),-1) && 1.7014118E38 >= Math.scalb((Float.MAX_VALUE + 1),-1));
assertEquals("scaleb(float,int)[286] ::", (float)3.4028235E38, StrictMath.scalb((Float.MAX_VALUE + 1),-0));
assertTrue("scaleb(float,int)[287] ::", (float)3.4028233E38 <= Math.scalb((Float.MAX_VALUE + 1),-0) && Infinity >= Math.scalb((Float.MAX_VALUE + 1),-0));
}

public void testPow()
{
assertEquals("pow(double)[0] ::", 1.0, StrictMath.pow(2.43223D, 0.0D));
assertTrue("pow(double)[1] ::", 0.9999999999999998 <= Math.pow(2.43223D,0.0D) && 1.0000000000000002 >= Math.pow(2.43223D,0.0D));
assertEquals("pow(double)[2] ::", 2.43223, StrictMath.pow(2.43223D, 1.0D));
assertTrue("pow(double)[3] ::", 2.4322299999999997 <= Math.pow(2.43223D,1.0D) && 2.4322300000000006 >= Math.pow(2.43223D,1.0D));
assertEquals("pow(double)[4] ::", 1.192932595380642E130, StrictMath.pow(2.43223D, 336.982D));
assertTrue("pow(double)[5] ::", 1.1929325953806417E130 <= Math.pow(2.43223D,336.982D) && 1.1929325953806422E130 >= Math.pow(2.43223D,336.982D));
assertEquals("pow(double)[6] ::", 0.4111453275389252, StrictMath.pow(2.43223D, -1.0D));
assertTrue("pow(double)[7] ::", 0.41114532753892513 <= Math.pow(2.43223D,-1.0D) && 0.41114532753892524 >= Math.pow(2.43223D,-1.0D));
assertEquals("pow(double)[8] ::", 0.9999111230965859, StrictMath.pow(2.43223D, -0.0001D));
assertTrue("pow(double)[9] ::", 0.9999111230965858 <= Math.pow(2.43223D,-0.0001D) && 0.999911123096586 >= Math.pow(2.43223D,-0.0001D));
assertEquals("pow(double)[10] ::", 8.382703296667981E-131, StrictMath.pow(2.43223D, -336.982D));
assertTrue("pow(double)[11] ::", 8.38270329666798E-131 <= Math.pow(2.43223D,-336.982D) && 8.382703296667982E-131 >= Math.pow(2.43223D,-336.982D));
assertEquals("pow(double)[12] ::", 8.686644887130356, StrictMath.pow(2.43223D,2.43223));
assertTrue("pow(double)[13] ::", 8.686644887130354 <= Math.pow(2.43223D,2.43223D) && 8.686644887130358 >= Math.pow(2.43223D,2.43223D));
assertEquals("pow(double)[14] ::", 1.0, StrictMath.pow(18232155.3323566D, 0.0D));
assertTrue("pow(double)[15] ::", 0.9999999999999998 <= Math.pow(18232155.3323566D,0.0D) && 1.0000000000000002 >= Math.pow(18232155.3323566D,0.0D));
assertEquals("pow(double)[16] ::", 1.82321553323566E7, StrictMath.pow(18232155.3323566D, 1.0D));
assertTrue("pow(double)[17] ::", 1.8232155332356595E7 <= Math.pow(18232155.3323566D,1.0D) && 1.8232155332356602E7 >= Math.pow(18232155.3323566D,1.0D));
assertEquals("pow(double)[18] ::", Infinity, StrictMath.pow(18232155.3323566D, 336.982D));
assertEquals("pow(double)[19] ::", Infinity, Math.pow(18232155.3323566D, 336.982D));
assertEquals("pow(double)[20] ::", 5.4848150521474574E-8, StrictMath.pow(18232155.3323566D, -1.0D));
assertTrue("pow(double)[21] ::", 5.484815052147457E-8 <= Math.pow(18232155.3323566D,-1.0D) && 5.484815052147458E-8 >= Math.pow(18232155.3323566D,-1.0D));
assertEquals("pow(double)[22] ::", 0.9983295270587165, StrictMath.pow(18232155.3323566D, -0.0001D));
assertTrue("pow(double)[23] ::", 0.9983295270587164 <= Math.pow(18232155.3323566D,-0.0001D) && 0.9983295270587166 >= Math.pow(18232155.3323566D,-0.0001D));
assertEquals("pow(double)[24] ::", 0.0, StrictMath.pow(18232155.3323566D, -336.982D));
assertTrue("pow(double)[25] ::", -4.9E-324 <= Math.pow(18232155.3323566D,-336.982D) && 4.9E-324 >= Math.pow(18232155.3323566D,-336.982D));
assertEquals("pow(double)[26] ::", Infinity, StrictMath.pow(18232155.3323566D,1.82321553323566E7));
assertEquals("pow(double)[27] ::", Infinity, Math.pow(18232155.3323566D,1.82321553323566E7));
assertEquals("pow(double)[28] ::", 1.0, StrictMath.pow(Double.MIN_VALUE, 0.0D));
assertTrue("pow(double)[29] ::", 0.9999999999999998 <= Math.pow(Double.MIN_VALUE,0.0D) && 1.0000000000000002 >= Math.pow(Double.MIN_VALUE,0.0D));
assertEquals("pow(double)[30] ::", 4.9E-324, StrictMath.pow(Double.MIN_VALUE, 1.0D));
assertTrue("pow(double)[31] ::", 0.0 <= Math.pow(Double.MIN_VALUE,1.0D) && 1.0E-323 >= Math.pow(Double.MIN_VALUE,1.0D));
assertEquals("pow(double)[32] ::", 0.0, StrictMath.pow(Double.MIN_VALUE, 336.982D));
assertTrue("pow(double)[33] ::", -4.9E-324 <= Math.pow(Double.MIN_VALUE,336.982D) && 4.9E-324 >= Math.pow(Double.MIN_VALUE,336.982D));
assertEquals("pow(double)[34] ::", Infinity, StrictMath.pow(Double.MIN_VALUE, -1.0D));
assertEquals("pow(double)[35] ::", Infinity, Math.pow(Double.MIN_VALUE, -1.0D));
assertEquals("pow(double)[36] ::", 1.0772850216202463, StrictMath.pow(Double.MIN_VALUE, -0.0001D));
assertTrue("pow(double)[37] ::", 1.077285021620246 <= Math.pow(Double.MIN_VALUE,-0.0001D) && 1.0772850216202465 >= Math.pow(Double.MIN_VALUE,-0.0001D));
assertEquals("pow(double)[38] ::", Infinity, StrictMath.pow(Double.MIN_VALUE, -336.982D));
assertEquals("pow(double)[39] ::", Infinity, Math.pow(Double.MIN_VALUE, -336.982D));
assertEquals("pow(double)[40] ::", 1.0, StrictMath.pow(Double.MIN_VALUE,4.9E-324));
assertTrue("pow(double)[41] ::", 0.9999999999999998 <= Math.pow(Double.MIN_VALUE,Double.MIN_VALUE) && 1.0000000000000002 >= Math.pow(Double.MIN_VALUE,Double.MIN_VALUE));
assertEquals("pow(double)[42] ::", 1.0, StrictMath.pow((Double.MIN_VALUE * 200), 0.0D));
assertTrue("pow(double)[43] ::", 0.9999999999999998 <= Math.pow((Double.MIN_VALUE * 200),0.0D) && 1.0000000000000002 >= Math.pow((Double.MIN_VALUE * 200),0.0D));
assertEquals("pow(double)[44] ::", 9.9E-322, StrictMath.pow((Double.MIN_VALUE * 200), 1.0D));
assertTrue("pow(double)[45] ::", 9.83E-322 <= Math.pow((Double.MIN_VALUE * 200),1.0D) && 9.93E-322 >= Math.pow((Double.MIN_VALUE * 200),1.0D));
assertEquals("pow(double)[46] ::", 0.0, StrictMath.pow((Double.MIN_VALUE * 200), 336.982D));
assertTrue("pow(double)[47] ::", -4.9E-324 <= Math.pow((Double.MIN_VALUE * 200),336.982D) && 4.9E-324 >= Math.pow((Double.MIN_VALUE * 200),336.982D));
assertEquals("pow(double)[48] ::", Infinity, StrictMath.pow((Double.MIN_VALUE * 200), -1.0D));
assertEquals("pow(double)[49] ::", Infinity, Math.pow((Double.MIN_VALUE * 200), -1.0D));
assertEquals("pow(double)[50] ::", 1.0767143930082923, StrictMath.pow((Double.MIN_VALUE * 200), -0.0001D));
assertTrue("pow(double)[51] ::", 1.076714393008292 <= Math.pow((Double.MIN_VALUE * 200),-0.0001D) && 1.0767143930082925 >= Math.pow((Double.MIN_VALUE * 200),-0.0001D));
assertEquals("pow(double)[52] ::", Infinity, StrictMath.pow((Double.MIN_VALUE * 200), -336.982D));
assertEquals("pow(double)[53] ::", Infinity, Math.pow((Double.MIN_VALUE * 200), -336.982D));
assertEquals("pow(double)[54] ::", 1.0, StrictMath.pow((Double.MIN_VALUE * 200),9.9E-322));
assertTrue("pow(double)[55] ::", 0.9999999999999998 <= Math.pow((Double.MIN_VALUE * 200),(Double.MIN_VALUE * 200)) && 1.0000000000000002 >= Math.pow((Double.MIN_VALUE * 200),(Double.MIN_VALUE * 200)));
assertEquals("pow(double)[56] ::", 1.0, StrictMath.pow((Double.MAX_VALUE / 500), 0.0D));
assertTrue("pow(double)[57] ::", 0.9999999999999998 <= Math.pow((Double.MAX_VALUE / 500),0.0D) && 1.0000000000000002 >= Math.pow((Double.MAX_VALUE / 500),0.0D));
assertEquals("pow(double)[58] ::", 3.595386269724631E305, StrictMath.pow((Double.MAX_VALUE / 500), 1.0D));
assertTrue("pow(double)[59] ::", 3.59538626972463E305 <= Math.pow((Double.MAX_VALUE / 500),1.0D) && 3.595386269724632E305 >= Math.pow((Double.MAX_VALUE / 500),1.0D));
assertEquals("pow(double)[60] ::", Infinity, StrictMath.pow((Double.MAX_VALUE / 500), 336.982D));
assertEquals("pow(double)[61] ::", Infinity, Math.pow((Double.MAX_VALUE / 500), 336.982D));
assertEquals("pow(double)[62] ::", 2.7813423231340024E-306, StrictMath.pow((Double.MAX_VALUE / 500), -1.0D));
assertTrue("pow(double)[63] ::", 2.781342323134002E-306 <= Math.pow((Double.MAX_VALUE / 500),-1.0D) && 2.7813423231340027E-306 >= Math.pow((Double.MAX_VALUE / 500),-1.0D));
assertEquals("pow(double)[64] ::", 0.9320611913661917, StrictMath.pow((Double.MAX_VALUE / 500), -0.0001D));
assertTrue("pow(double)[65] ::", 0.9320611913661916 <= Math.pow((Double.MAX_VALUE / 500),-0.0001D) && 0.9320611913661918 >= Math.pow((Double.MAX_VALUE / 500),-0.0001D));
assertEquals("pow(double)[66] ::", 0.0, StrictMath.pow((Double.MAX_VALUE / 500), -336.982D));
assertTrue("pow(double)[67] ::", -4.9E-324 <= Math.pow((Double.MAX_VALUE / 500),-336.982D) && 4.9E-324 >= Math.pow((Double.MAX_VALUE / 500),-336.982D));
assertEquals("pow(double)[68] ::", Infinity, StrictMath.pow((Double.MAX_VALUE / 500),3.595386269724631E305));
assertEquals("pow(double)[69] ::", Infinity, Math.pow((Double.MAX_VALUE / 500),3.595386269724631E305));
assertEquals("pow(double)[70] ::", 1.0, StrictMath.pow((Double.MAX_VALUE / 200), 0.0D));
assertTrue("pow(double)[71] ::", 0.9999999999999998 <= Math.pow((Double.MAX_VALUE / 200),0.0D) && 1.0000000000000002 >= Math.pow((Double.MAX_VALUE / 200),0.0D));
assertEquals("pow(double)[72] ::", 8.988465674311578E305, StrictMath.pow((Double.MAX_VALUE / 200), 1.0D));
assertTrue("pow(double)[73] ::", 8.988465674311577E305 <= Math.pow((Double.MAX_VALUE / 200),1.0D) && 8.98846567431158E305 >= Math.pow((Double.MAX_VALUE / 200),1.0D));
assertEquals("pow(double)[74] ::", Infinity, StrictMath.pow((Double.MAX_VALUE / 200), 336.982D));
assertEquals("pow(double)[75] ::", Infinity, Math.pow((Double.MAX_VALUE / 200), 336.982D));
assertEquals("pow(double)[76] ::", 1.1125369292536008E-306, StrictMath.pow((Double.MAX_VALUE / 200), -1.0D));
assertTrue("pow(double)[77] ::", 1.1125369292536007E-306 <= Math.pow((Double.MAX_VALUE / 200),-1.0D) && 1.112536929253601E-306 >= Math.pow((Double.MAX_VALUE / 200),-1.0D));
assertEquals("pow(double)[78] ::", 0.9319757913756936, StrictMath.pow((Double.MAX_VALUE / 200), -0.0001D));
assertTrue("pow(double)[79] ::", 0.9319757913756935 <= Math.pow((Double.MAX_VALUE / 200),-0.0001D) && 0.9319757913756938 >= Math.pow((Double.MAX_VALUE / 200),-0.0001D));
assertEquals("pow(double)[80] ::", 0.0, StrictMath.pow((Double.MAX_VALUE / 200), -336.982D));
assertTrue("pow(double)[81] ::", -4.9E-324 <= Math.pow((Double.MAX_VALUE / 200),-336.982D) && 4.9E-324 >= Math.pow((Double.MAX_VALUE / 200),-336.982D));
assertEquals("pow(double)[82] ::", Infinity, StrictMath.pow((Double.MAX_VALUE / 200),8.988465674311578E305));
assertEquals("pow(double)[83] ::", Infinity, Math.pow((Double.MAX_VALUE / 200),8.988465674311578E305));
assertEquals("pow(double)[84] ::", 1.0, StrictMath.pow(Double.MAX_VALUE, 0.0D));
assertTrue("pow(double)[85] ::", 0.9999999999999998 <= Math.pow(Double.MAX_VALUE,0.0D) && 1.0000000000000002 >= Math.pow(Double.MAX_VALUE,0.0D));
assertEquals("pow(double)[86] ::", 1.7976931348623157E308, StrictMath.pow(Double.MAX_VALUE, 1.0D));
assertTrue("pow(double)[87] ::", 1.7976931348623155E308 <= Math.pow(Double.MAX_VALUE,1.0D) && Infinity >= Math.pow(Double.MAX_VALUE,1.0D));
assertEquals("pow(double)[88] ::", Infinity, StrictMath.pow(Double.MAX_VALUE, 336.982D));
assertEquals("pow(double)[89] ::", Infinity, Math.pow(Double.MAX_VALUE, 336.982D));
assertEquals("pow(double)[90] ::", 5.562684646268003E-309, StrictMath.pow(Double.MAX_VALUE, -1.0D));
assertTrue("pow(double)[91] ::", 5.562684646268E-309 <= Math.pow(Double.MAX_VALUE,-1.0D) && 5.56268464626801E-309 >= Math.pow(Double.MAX_VALUE,-1.0D));
assertEquals("pow(double)[92] ::", 0.9314821318134288, StrictMath.pow(Double.MAX_VALUE, -0.0001D));
assertTrue("pow(double)[93] ::", 0.9314821318134286 <= Math.pow(Double.MAX_VALUE,-0.0001D) && 0.9314821318134289 >= Math.pow(Double.MAX_VALUE,-0.0001D));
assertEquals("pow(double)[94] ::", 0.0, StrictMath.pow(Double.MAX_VALUE, -336.982D));
assertTrue("pow(double)[95] ::", -4.9E-324 <= Math.pow(Double.MAX_VALUE,-336.982D) && 4.9E-324 >= Math.pow(Double.MAX_VALUE,-336.982D));
assertEquals("pow(double)[96] ::", Infinity, StrictMath.pow(Double.MAX_VALUE,1.7976931348623157E308));
assertEquals("pow(double)[97] ::", Infinity, Math.pow(Double.MAX_VALUE,1.7976931348623157E308));
assertEquals("pow(double)[98] ::", 1.0, StrictMath.pow(Double.MAX_VALUE + 1, 0.0D));
assertTrue("pow(double)[99] ::", 0.9999999999999998 <= Math.pow(Double.MAX_VALUE + 1,0.0D) && 1.0000000000000002 >= Math.pow(Double.MAX_VALUE + 1,0.0D));
assertEquals("pow(double)[100] ::", 1.7976931348623157E308, StrictMath.pow(Double.MAX_VALUE + 1, 1.0D));
assertTrue("pow(double)[101] ::", 1.7976931348623155E308 <= Math.pow(Double.MAX_VALUE + 1,1.0D) && Infinity >= Math.pow(Double.MAX_VALUE + 1,1.0D));
assertEquals("pow(double)[102] ::", Infinity, StrictMath.pow(Double.MAX_VALUE + 1, 336.982D));
assertEquals("pow(double)[103] ::", Infinity, Math.pow(Double.MAX_VALUE + 1, 336.982D));
assertEquals("pow(double)[104] ::", 5.562684646268003E-309, StrictMath.pow(Double.MAX_VALUE + 1, -1.0D));
assertTrue("pow(double)[105] ::", 5.562684646268E-309 <= Math.pow(Double.MAX_VALUE + 1,-1.0D) && 5.56268464626801E-309 >= Math.pow(Double.MAX_VALUE + 1,-1.0D));
assertEquals("pow(double)[106] ::", 0.9314821318134288, StrictMath.pow(Double.MAX_VALUE + 1, -0.0001D));
assertTrue("pow(double)[107] ::", 0.9314821318134286 <= Math.pow(Double.MAX_VALUE + 1,-0.0001D) && 0.9314821318134289 >= Math.pow(Double.MAX_VALUE + 1,-0.0001D));
assertEquals("pow(double)[108] ::", 0.0, StrictMath.pow(Double.MAX_VALUE + 1, -336.982D));
assertTrue("pow(double)[109] ::", -4.9E-324 <= Math.pow(Double.MAX_VALUE + 1,-336.982D) && 4.9E-324 >= Math.pow(Double.MAX_VALUE + 1,-336.982D));
assertEquals("pow(double)[110] ::", Infinity, StrictMath.pow(Double.MAX_VALUE + 1,1.7976931348623157E308));
assertEquals("pow(double)[111] ::", Infinity, Math.pow(Double.MAX_VALUE + 1,1.7976931348623157E308));
}

public void testRint()
{
assertEquals("rint(double)[0] ::", -1.7976931348623157E308, StrictMath.rint(-Double.MAX_VALUE));
assertTrue("rint(double)[1] ::", -Infinity <= Math.rint(-Double.MAX_VALUE) && -1.7976931348623155E308 >= Math.rint(-Double.MAX_VALUE));
assertEquals("rint(double)[2] ::", -8.988465674311578E305, StrictMath.rint((-Double.MAX_VALUE / 200)));
assertTrue("rint(double)[3] ::", -8.98846567431158E305 <= Math.rint((-Double.MAX_VALUE / 200)) && -8.988465674311577E305 >= Math.rint((-Double.MAX_VALUE / 200)));
assertEquals("rint(double)[4] ::", -3.595386269724631E305, StrictMath.rint((-Double.MAX_VALUE / 500)));
assertTrue("rint(double)[5] ::", -3.595386269724632E305 <= Math.rint((-Double.MAX_VALUE / 500)) && -3.59538626972463E305 >= Math.rint((-Double.MAX_VALUE / 500)));
assertEquals("rint(double)[6] ::", -0.0, StrictMath.rint((-Double.MIN_VALUE * 2000)));
assertTrue("rint(double)[7] ::", -4.9E-324 <= Math.rint((-Double.MIN_VALUE * 2000)) && 4.9E-324 >= Math.rint((-Double.MIN_VALUE * 2000)));
assertEquals("rint(double)[8] ::", -0.0, StrictMath.rint((-Double.MIN_VALUE * 1000)));
assertTrue("rint(double)[9] ::", -4.9E-324 <= Math.rint((-Double.MIN_VALUE * 1000)) && 4.9E-324 >= Math.rint((-Double.MIN_VALUE * 1000)));
assertEquals("rint(double)[10] ::", -2.929112212E9, StrictMath.rint(-2929112212.129231481346));
assertTrue("rint(double)[11] ::", -2.9291122120000005E9 <= Math.rint(-2929112212.129231481346) && -2.9291122119999995E9 >= Math.rint(-2929112212.129231481346));
assertEquals("rint(double)[12] ::", -2372.0, StrictMath.rint(-2372.228212D));
assertTrue("rint(double)[13] ::", -2372.0000000000005 <= Math.rint(-2372.228212D) && -2371.9999999999995 >= Math.rint(-2372.228212D));
assertEquals("rint(double)[14] ::", -1.0, StrictMath.rint(-1.2232D));
assertTrue("rint(double)[15] ::", -1.0000000000000002 <= Math.rint(-1.2232D) && -0.9999999999999998 >= Math.rint(-1.2232D));
assertEquals("rint(double)[16] ::", 0.0, StrictMath.rint(0D));
assertTrue("rint(double)[17] ::", -4.9E-324 <= Math.rint(0D) && 4.9E-324 >= Math.rint(0D));
assertEquals("rint(double)[18] ::", 2.0, StrictMath.rint(2.43223D));
assertTrue("rint(double)[19] ::", 1.9999999999999996 <= Math.rint(2.43223D) && 2.0000000000000004 >= Math.rint(2.43223D));
assertEquals("rint(double)[20] ::", 1.8232155E7, StrictMath.rint(18232155.3323566D));
assertTrue("rint(double)[21] ::", 1.8232154999999996E7 <= Math.rint(18232155.3323566D) && 1.8232155000000004E7 >= Math.rint(18232155.3323566D));
assertEquals("rint(double)[22] ::", 0.0, StrictMath.rint(Double.MIN_VALUE));
assertTrue("rint(double)[23] ::", -4.9E-324 <= Math.rint(Double.MIN_VALUE) && 4.9E-324 >= Math.rint(Double.MIN_VALUE));
assertEquals("rint(double)[24] ::", 0.0, StrictMath.rint((Double.MIN_VALUE * 200)));
assertTrue("rint(double)[25] ::", -4.9E-324 <= Math.rint((Double.MIN_VALUE * 200)) && 4.9E-324 >= Math.rint((Double.MIN_VALUE * 200)));
assertEquals("rint(double)[26] ::", 3.595386269724631E305, StrictMath.rint((Double.MAX_VALUE / 500)));
assertTrue("rint(double)[27] ::", 3.59538626972463E305 <= Math.rint((Double.MAX_VALUE / 500)) && 3.595386269724632E305 >= Math.rint((Double.MAX_VALUE / 500)));
assertEquals("rint(double)[28] ::", 8.988465674311578E305, StrictMath.rint((Double.MAX_VALUE / 200)));
assertTrue("rint(double)[29] ::", 8.988465674311577E305 <= Math.rint((Double.MAX_VALUE / 200)) && 8.98846567431158E305 >= Math.rint((Double.MAX_VALUE / 200)));
assertEquals("rint(double)[30] ::", 1.7976931348623157E308, StrictMath.rint(Double.MAX_VALUE));
assertTrue("rint(double)[31] ::", 1.7976931348623155E308 <= Math.rint(Double.MAX_VALUE) && Infinity >= Math.rint(Double.MAX_VALUE));
assertEquals("rint(double)[32] ::", 1.7976931348623157E308, StrictMath.rint(Double.MAX_VALUE + 1));
assertTrue("rint(double)[33] ::", 1.7976931348623155E308 <= Math.rint(Double.MAX_VALUE + 1) && Infinity >= Math.rint(Double.MAX_VALUE + 1));
}

public void testRound_double()
{
assertEquals("round(double)[0] ::", -9223372036854775808L, StrictMath.round(-Double.MAX_VALUE));
assertEquals("round(double)[1] ::", -9223372036854775808L, Math.round(-Double.MAX_VALUE));
assertEquals("round(double)[2] ::", -9223372036854775808L, StrictMath.round((-Double.MAX_VALUE / 200)));
assertEquals("round(double)[3] ::", -9223372036854775808L, Math.round((-Double.MAX_VALUE / 200)));
assertEquals("round(double)[4] ::", -9223372036854775808L, StrictMath.round((-Double.MAX_VALUE / 500)));
assertEquals("round(double)[5] ::", -9223372036854775808L, Math.round((-Double.MAX_VALUE / 500)));
assertEquals("round(double)[6] ::", 0L, StrictMath.round((-Double.MIN_VALUE * 2000)));
assertEquals("round(double)[7] ::", 0L, Math.round((-Double.MIN_VALUE * 2000)));
assertEquals("round(double)[8] ::", 0L, StrictMath.round((-Double.MIN_VALUE * 1000)));
assertEquals("round(double)[9] ::", 0L, Math.round((-Double.MIN_VALUE * 1000)));
assertEquals("round(double)[10] ::", -2929112212L, StrictMath.round(-2929112212.129231481346));
assertEquals("round(double)[11] ::", -2929112212L, Math.round(-2929112212.129231481346));
assertEquals("round(double)[12] ::", -2372L, StrictMath.round(-2372.228212D));
assertEquals("round(double)[13] ::", -2372L, Math.round(-2372.228212D));
assertEquals("round(double)[14] ::", -1L, StrictMath.round(-1.2232D));
assertEquals("round(double)[15] ::", -1L, Math.round(-1.2232D));
assertEquals("round(double)[16] ::", 0L, StrictMath.round(0D));
assertEquals("round(double)[17] ::", 0L, Math.round(0D));
assertEquals("round(double)[18] ::", 2L, StrictMath.round(2.43223D));
assertEquals("round(double)[19] ::", 2L, Math.round(2.43223D));
assertEquals("round(double)[20] ::", 18232155L, StrictMath.round(18232155.3323566D));
assertEquals("round(double)[21] ::", 18232155L, Math.round(18232155.3323566D));
assertEquals("round(double)[22] ::", 0L, StrictMath.round(Double.MIN_VALUE));
assertEquals("round(double)[23] ::", 0L, Math.round(Double.MIN_VALUE));
assertEquals("round(double)[24] ::", 0L, StrictMath.round((Double.MIN_VALUE * 200)));
assertEquals("round(double)[25] ::", 0L, Math.round((Double.MIN_VALUE * 200)));
assertEquals("round(double)[26] ::", 9223372036854775807L, StrictMath.round((Double.MAX_VALUE / 500)));
assertEquals("round(double)[27] ::", 9223372036854775807L, Math.round((Double.MAX_VALUE / 500)));
assertEquals("round(double)[28] ::", 9223372036854775807L, StrictMath.round((Double.MAX_VALUE / 200)));
assertEquals("round(double)[29] ::", 9223372036854775807L, Math.round((Double.MAX_VALUE / 200)));
assertEquals("round(double)[30] ::", 9223372036854775807L, StrictMath.round(Double.MAX_VALUE));
assertEquals("round(double)[31] ::", 9223372036854775807L, Math.round(Double.MAX_VALUE));
assertEquals("round(double)[32] ::", 9223372036854775807L, StrictMath.round(Double.MAX_VALUE + 1));
assertEquals("round(double)[33] ::", 9223372036854775807L, Math.round(Double.MAX_VALUE + 1));
}

public void testRound_float()
{
assertEquals("round(float)[0] ::", -2147483648L, StrictMath.round(-Float.MAX_VALUE));
assertEquals("round(float)[1] ::", -2147483648L, Math.round(-Float.MAX_VALUE));
assertEquals("round(float)[2] ::", -2147483648L, StrictMath.round((-Float.MAX_VALUE / 200)));
assertEquals("round(float)[3] ::", -2147483648L, Math.round((-Float.MAX_VALUE / 200)));
assertEquals("round(float)[4] ::", -2147483648L, StrictMath.round((-Float.MAX_VALUE / 500)));
assertEquals("round(float)[5] ::", -2147483648L, Math.round((-Float.MAX_VALUE / 500)));
assertEquals("round(float)[6] ::", 0L, StrictMath.round((-Float.MIN_VALUE * 2000)));
assertEquals("round(float)[7] ::", 0L, Math.round((-Float.MIN_VALUE * 2000)));
assertEquals("round(float)[8] ::", 0L, StrictMath.round((-Float.MIN_VALUE * 1000)));
assertEquals("round(float)[9] ::", 0L, Math.round((-Float.MIN_VALUE * 1000)));
assertEquals("round(float)[10] ::", -32948748L, StrictMath.round(-32948748.958324F));
assertEquals("round(float)[11] ::", -32948748L, Math.round(-32948748.958324F));
assertEquals("round(float)[12] ::", 0L, StrictMath.round(-0.000000009F));
assertEquals("round(float)[13] ::", 0L, Math.round(-0.000000009F));
assertEquals("round(float)[14] ::", 0L, StrictMath.round(-0.0000002F));
assertEquals("round(float)[15] ::", 0L, Math.round(-0.0000002F));
assertEquals("round(float)[16] ::", 0L, StrictMath.round(0F));
assertEquals("round(float)[17] ::", 0L, Math.round(0F));
assertEquals("round(float)[18] ::", 0L, StrictMath.round(0.456232334F));
assertEquals("round(float)[19] ::", 0L, Math.round(0.456232334F));
assertEquals("round(float)[20] ::", 1224257L, StrictMath.round(1224257.312321263F));
assertEquals("round(float)[21] ::", 1224257L, Math.round(1224257.312321263F));
assertEquals("round(float)[22] ::", 2147483647L, StrictMath.round(9999832342.12365F));
assertEquals("round(float)[23] ::", 2147483647L, Math.round(9999832342.12365F));
assertEquals("round(float)[24] ::", 0L, StrictMath.round(Float.MIN_VALUE));
assertEquals("round(float)[25] ::", 0L, Math.round(Float.MIN_VALUE));
assertEquals("round(float)[26] ::", 0L, StrictMath.round((Float.MIN_VALUE * 200)));
assertEquals("round(float)[27] ::", 0L, Math.round((Float.MIN_VALUE * 200)));
assertEquals("round(float)[28] ::", 2147483647L, StrictMath.round((Float.MAX_VALUE / 500)));
assertEquals("round(float)[29] ::", 2147483647L, Math.round((Float.MAX_VALUE / 500)));
assertEquals("round(float)[30] ::", 2147483647L, StrictMath.round((Float.MAX_VALUE / 200)));
assertEquals("round(float)[31] ::", 2147483647L, Math.round((Float.MAX_VALUE / 200)));
assertEquals("round(float)[32] ::", 2147483647L, StrictMath.round(Float.MAX_VALUE));
assertEquals("round(float)[33] ::", 2147483647L, Math.round(Float.MAX_VALUE));
assertEquals("round(float)[34] ::", 2147483647L, StrictMath.round((Float.MAX_VALUE + 1)));
assertEquals("round(float)[35] ::", 2147483647L, Math.round((Float.MAX_VALUE + 1)));
}

public void testSignum_double()
{
assertEquals("signum(double)[0] ::", (double)-1.0, StrictMath.signum(-Double.MAX_VALUE));
assertTrue("signum(double)[1] ::", -1.0000000000000002 <= Math.signum(-Double.MAX_VALUE) && -0.9999999999999998 >= Math.signum(-Double.MAX_VALUE));
assertEquals("signum(double)[2] ::", (double)-1.0, StrictMath.signum((-Double.MAX_VALUE / 200)));
assertTrue("signum(double)[3] ::", -1.0000000000000002 <= Math.signum((-Double.MAX_VALUE / 200)) && -0.9999999999999998 >= Math.signum((-Double.MAX_VALUE / 200)));
assertEquals("signum(double)[4] ::", (double)-1.0, StrictMath.signum((-Double.MAX_VALUE / 500)));
assertTrue("signum(double)[5] ::", -1.0000000000000002 <= Math.signum((-Double.MAX_VALUE / 500)) && -0.9999999999999998 >= Math.signum((-Double.MAX_VALUE / 500)));
assertEquals("signum(double)[6] ::", (double)-1.0, StrictMath.signum((-Double.MIN_VALUE * 2000)));
assertTrue("signum(double)[7] ::", -1.0000000000000002 <= Math.signum((-Double.MIN_VALUE * 2000)) && -0.9999999999999998 >= Math.signum((-Double.MIN_VALUE * 2000)));
assertEquals("signum(double)[8] ::", (double)-1.0, StrictMath.signum((-Double.MIN_VALUE * 1000)));
assertTrue("signum(double)[9] ::", -1.0000000000000002 <= Math.signum((-Double.MIN_VALUE * 1000)) && -0.9999999999999998 >= Math.signum((-Double.MIN_VALUE * 1000)));
assertEquals("signum(double)[10] ::", (double)-1.0, StrictMath.signum(-2929112212.129231481346));
assertTrue("signum(double)[11] ::", -1.0000000000000002 <= Math.signum(-2929112212.129231481346) && -0.9999999999999998 >= Math.signum(-2929112212.129231481346));
assertEquals("signum(double)[12] ::", (double)-1.0, StrictMath.signum(-2372.228212D));
assertTrue("signum(double)[13] ::", -1.0000000000000002 <= Math.signum(-2372.228212D) && -0.9999999999999998 >= Math.signum(-2372.228212D));
assertEquals("signum(double)[14] ::", (double)-1.0, StrictMath.signum(-1.2232D));
assertTrue("signum(double)[15] ::", -1.0000000000000002 <= Math.signum(-1.2232D) && -0.9999999999999998 >= Math.signum(-1.2232D));
assertEquals("signum(double)[16] ::", (double)0.0, StrictMath.signum(0D));
assertTrue("signum(double)[17] ::", -4.9E-324 <= Math.signum(0D) && 4.9E-324 >= Math.signum(0D));
assertEquals("signum(double)[18] ::", (double)1.0, StrictMath.signum(2.43223D));
assertTrue("signum(double)[19] ::", 0.9999999999999998 <= Math.signum(2.43223D) && 1.0000000000000002 >= Math.signum(2.43223D));
assertEquals("signum(double)[20] ::", (double)1.0, StrictMath.signum(18232155.3323566D));
assertTrue("signum(double)[21] ::", 0.9999999999999998 <= Math.signum(18232155.3323566D) && 1.0000000000000002 >= Math.signum(18232155.3323566D));
assertEquals("signum(double)[22] ::", (double)1.0, StrictMath.signum(Double.MIN_VALUE));
assertTrue("signum(double)[23] ::", 0.9999999999999998 <= Math.signum(Double.MIN_VALUE) && 1.0000000000000002 >= Math.signum(Double.MIN_VALUE));
assertEquals("signum(double)[24] ::", (double)1.0, StrictMath.signum((Double.MIN_VALUE * 200)));
assertTrue("signum(double)[25] ::", 0.9999999999999998 <= Math.signum((Double.MIN_VALUE * 200)) && 1.0000000000000002 >= Math.signum((Double.MIN_VALUE * 200)));
assertEquals("signum(double)[26] ::", (double)1.0, StrictMath.signum((Double.MAX_VALUE / 500)));
assertTrue("signum(double)[27] ::", 0.9999999999999998 <= Math.signum((Double.MAX_VALUE / 500)) && 1.0000000000000002 >= Math.signum((Double.MAX_VALUE / 500)));
assertEquals("signum(double)[28] ::", (double)1.0, StrictMath.signum((Double.MAX_VALUE / 200)));
assertTrue("signum(double)[29] ::", 0.9999999999999998 <= Math.signum((Double.MAX_VALUE / 200)) && 1.0000000000000002 >= Math.signum((Double.MAX_VALUE / 200)));
assertEquals("signum(double)[30] ::", (double)1.0, StrictMath.signum(Double.MAX_VALUE));
assertTrue("signum(double)[31] ::", 0.9999999999999998 <= Math.signum(Double.MAX_VALUE) && 1.0000000000000002 >= Math.signum(Double.MAX_VALUE));
assertEquals("signum(double)[32] ::", (double)1.0, StrictMath.signum(Double.MAX_VALUE + 1));
assertTrue("signum(double)[33] ::", 0.9999999999999998 <= Math.signum(Double.MAX_VALUE + 1) && 1.0000000000000002 >= Math.signum(Double.MAX_VALUE + 1));
}

public void testSignum_float()
{
assertEquals("signum(float)[0] ::", (float)-1.0, StrictMath.signum(-Float.MAX_VALUE));
assertTrue("signum(float)[1] ::", (float)-1.0000001192092896 <= Math.signum(-Float.MAX_VALUE) && (float) -0.9999998807907104 >= Math.signum(-Float.MAX_VALUE));
assertEquals("signum(float)[2] ::", (float)-1.0, StrictMath.signum((-Float.MAX_VALUE / 200)));
assertTrue("signum(float)[3] ::", (float)-1.0000001192092896 <= Math.signum((-Float.MAX_VALUE / 200)) && (float) -0.9999998807907104 >= Math.signum((-Float.MAX_VALUE / 200)));
assertEquals("signum(float)[4] ::", (float)-1.0, StrictMath.signum((-Float.MAX_VALUE / 500)));
assertTrue("signum(float)[5] ::", (float)-1.0000001192092896 <= Math.signum((-Float.MAX_VALUE / 500)) && (float) -0.9999998807907104 >= Math.signum((-Float.MAX_VALUE / 500)));
assertEquals("signum(float)[6] ::", (float)-1.0, StrictMath.signum((-Float.MIN_VALUE * 2000)));
assertTrue("signum(float)[7] ::", (float)-1.0000001192092896 <= Math.signum((-Float.MIN_VALUE * 2000)) && (float) -0.9999998807907104 >= Math.signum((-Float.MIN_VALUE * 2000)));
assertEquals("signum(float)[8] ::", (float)-1.0, StrictMath.signum((-Float.MIN_VALUE * 1000)));
assertTrue("signum(float)[9] ::", (float)-1.0000001192092896 <= Math.signum((-Float.MIN_VALUE * 1000)) && (float) -0.9999998807907104 >= Math.signum((-Float.MIN_VALUE * 1000)));
assertEquals("signum(float)[10] ::", (float)-1.0, StrictMath.signum(-32948748.958324F));
assertTrue("signum(float)[11] ::", (float)-1.0000001192092896 <= Math.signum(-32948748.958324F) && (float) -0.9999998807907104 >= Math.signum(-32948748.958324F));
assertEquals("signum(float)[12] ::", (float)-1.0, StrictMath.signum(-0.000000009F));
assertTrue("signum(float)[13] ::", (float)-1.0000001192092896 <= Math.signum(-0.000000009F) && (float) -0.9999998807907104 >= Math.signum(-0.000000009F));
assertEquals("signum(float)[14] ::", (float)-1.0, StrictMath.signum(-0.0000002F));
assertTrue("signum(float)[15] ::", (float)-1.0000001192092896 <= Math.signum(-0.0000002F) && (float) -0.9999998807907104 >= Math.signum(-0.0000002F));
assertEquals("signum(float)[16] ::", (float)0.0, StrictMath.signum(0F));
assertTrue("signum(float)[17] ::", (float)-1.401298464324817E-45 <= Math.signum(0F) && (float) 1.401298464324817E-45 >= Math.signum(0F));
assertEquals("signum(float)[18] ::", (float)1.0, StrictMath.signum(0.456232334F));
assertTrue("signum(float)[19] ::", (float)0.9999998807907104 <= Math.signum(0.456232334F) && (float) 1.0000001192092896 >= Math.signum(0.456232334F));
assertEquals("signum(float)[20] ::", (float)1.0, StrictMath.signum(1224257.312321263F));
assertTrue("signum(float)[21] ::", (float)0.9999998807907104 <= Math.signum(1224257.312321263F) && (float) 1.0000001192092896 >= Math.signum(1224257.312321263F));
assertEquals("signum(float)[22] ::", (float)1.0, StrictMath.signum(9999832342.12365F));
assertTrue("signum(float)[23] ::", (float)0.9999998807907104 <= Math.signum(9999832342.12365F) && (float) 1.0000001192092896 >= Math.signum(9999832342.12365F));
assertEquals("signum(float)[24] ::", (float)1.0, StrictMath.signum(Float.MIN_VALUE));
assertTrue("signum(float)[25] ::", (float)0.9999998807907104 <= Math.signum(Float.MIN_VALUE) && (float) 1.0000001192092896 >= Math.signum(Float.MIN_VALUE));
assertEquals("signum(float)[26] ::", (float)1.0, StrictMath.signum((Float.MIN_VALUE * 200)));
assertTrue("signum(float)[27] ::", (float)0.9999998807907104 <= Math.signum((Float.MIN_VALUE * 200)) && (float) 1.0000001192092896 >= Math.signum((Float.MIN_VALUE * 200)));
assertEquals("signum(float)[28] ::", (float)1.0, StrictMath.signum((Float.MAX_VALUE / 500)));
assertTrue("signum(float)[29] ::", (float)0.9999998807907104 <= Math.signum((Float.MAX_VALUE / 500)) && (float) 1.0000001192092896 >= Math.signum((Float.MAX_VALUE / 500)));
assertEquals("signum(float)[30] ::", (float)1.0, StrictMath.signum((Float.MAX_VALUE / 200)));
assertTrue("signum(float)[31] ::", (float)0.9999998807907104 <= Math.signum((Float.MAX_VALUE / 200)) && (float) 1.0000001192092896 >= Math.signum((Float.MAX_VALUE / 200)));
assertEquals("signum(float)[32] ::", (float)1.0, StrictMath.signum(Float.MAX_VALUE));
assertTrue("signum(float)[33] ::", (float)0.9999998807907104 <= Math.signum(Float.MAX_VALUE) && (float) 1.0000001192092896 >= Math.signum(Float.MAX_VALUE));
assertEquals("signum(float)[34] ::", (float)1.0, StrictMath.signum((Float.MAX_VALUE + 1)));
assertTrue("signum(float)[35] ::", (float)0.9999998807907104 <= Math.signum((Float.MAX_VALUE + 1)) && (float) 1.0000001192092896 >= Math.signum((Float.MAX_VALUE + 1)));
}

public void testSin()
{
assertEquals("sin(double)[0] ::", -0.004961954789184062, StrictMath.sin(-Double.MAX_VALUE));
assertTrue("sin(double)[1] ::", -0.004961954789184063 <= Math.sin(-Double.MAX_VALUE) && -0.004961954789184061 >= Math.sin(-Double.MAX_VALUE));
assertEquals("sin(double)[2] ::", -0.22938612616130435, StrictMath.sin((-Double.MAX_VALUE / 200)));
assertTrue("sin(double)[3] ::", -0.22938612616130438 <= Math.sin((-Double.MAX_VALUE / 200)) && -0.22938612616130433 >= Math.sin((-Double.MAX_VALUE / 200)));
assertEquals("sin(double)[4] ::", -0.013889411248912811, StrictMath.sin((-Double.MAX_VALUE / 500)));
assertTrue("sin(double)[5] ::", -0.013889411248912813 <= Math.sin((-Double.MAX_VALUE / 500)) && -0.01388941124891281 >= Math.sin((-Double.MAX_VALUE / 500)));
assertEquals("sin(double)[6] ::", -9.88E-321, StrictMath.sin((-Double.MIN_VALUE * 2000)));
assertTrue("sin(double)[7] ::", -9.886E-321 <= Math.sin((-Double.MIN_VALUE * 2000)) && -9.876E-321 >= Math.sin((-Double.MIN_VALUE * 2000)));
assertEquals("sin(double)[8] ::", -4.94E-321, StrictMath.sin((-Double.MIN_VALUE * 1000)));
assertTrue("sin(double)[9] ::", -4.946E-321 <= Math.sin((-Double.MIN_VALUE * 1000)) && -4.936E-321 >= Math.sin((-Double.MIN_VALUE * 1000)));
assertEquals("sin(double)[10] ::", -0.41892510283303325, StrictMath.sin(-2929112212.129231481346));
assertTrue("sin(double)[11] ::", -0.4189251028330333 <= Math.sin(-2929112212.129231481346) && -0.4189251028330332 >= Math.sin(-2929112212.129231481346));
assertEquals("sin(double)[12] ::", 0.32002752462922074, StrictMath.sin(-2372.228212D));
assertTrue("sin(double)[13] ::", 0.3200275246292207 <= Math.sin(-2372.228212D) && 0.3200275246292208 >= Math.sin(-2372.228212D));
assertEquals("sin(double)[14] ::", -0.9401942126459146, StrictMath.sin(-1.2232D));
assertTrue("sin(double)[15] ::", -0.9401942126459147 <= Math.sin(-1.2232D) && -0.9401942126459145 >= Math.sin(-1.2232D));
assertEquals("sin(double)[16] ::", 0.0, StrictMath.sin(0D));
assertTrue("sin(double)[17] ::", -4.9E-324 <= Math.sin(0D) && 4.9E-324 >= Math.sin(0D));
assertEquals("sin(double)[18] ::", 0.6513502994441202, StrictMath.sin(2.43223D));
assertTrue("sin(double)[19] ::", 0.65135029944412 <= Math.sin(2.43223D) && 0.6513502994441203 >= Math.sin(2.43223D));
assertEquals("sin(double)[20] ::", -0.7876987349113835, StrictMath.sin(18232155.3323566D));
assertTrue("sin(double)[21] ::", -0.7876987349113836 <= Math.sin(18232155.3323566D) && -0.7876987349113834 >= Math.sin(18232155.3323566D));
assertEquals("sin(double)[22] ::", 4.9E-324, StrictMath.sin(Double.MIN_VALUE));
assertTrue("sin(double)[23] ::", 0.0 <= Math.sin(Double.MIN_VALUE) && 1.0E-323 >= Math.sin(Double.MIN_VALUE));
assertEquals("sin(double)[24] ::", 9.9E-322, StrictMath.sin((Double.MIN_VALUE * 200)));
assertTrue("sin(double)[25] ::", 9.83E-322 <= Math.sin((Double.MIN_VALUE * 200)) && 9.93E-322 >= Math.sin((Double.MIN_VALUE * 200)));
assertEquals("sin(double)[26] ::", 0.013889411248912811, StrictMath.sin((Double.MAX_VALUE / 500)));
assertTrue("sin(double)[27] ::", 0.01388941124891281 <= Math.sin((Double.MAX_VALUE / 500)) && 0.013889411248912813 >= Math.sin((Double.MAX_VALUE / 500)));
assertEquals("sin(double)[28] ::", 0.22938612616130435, StrictMath.sin((Double.MAX_VALUE / 200)));
assertTrue("sin(double)[29] ::", 0.22938612616130433 <= Math.sin((Double.MAX_VALUE / 200)) && 0.22938612616130438 >= Math.sin((Double.MAX_VALUE / 200)));
assertEquals("sin(double)[30] ::", 0.004961954789184062, StrictMath.sin(Double.MAX_VALUE));
assertTrue("sin(double)[31] ::", 0.004961954789184061 <= Math.sin(Double.MAX_VALUE) && 0.004961954789184063 >= Math.sin(Double.MAX_VALUE));
assertEquals("sin(double)[32] ::", 0.004961954789184062, StrictMath.sin(Double.MAX_VALUE + 1));
assertTrue("sin(double)[33] ::", 0.004961954789184061 <= Math.sin(Double.MAX_VALUE + 1) && 0.004961954789184063 >= Math.sin(Double.MAX_VALUE + 1));
}

public void testSinh()
{
assertEquals("sinh(double)[0] ::", -Infinity, StrictMath.sinh(-Double.MAX_VALUE));
assertEquals("sinh(double)[1] ::", -Infinity, Math.sinh(-Double.MAX_VALUE));
assertEquals("sinh(double)[2] ::", -Infinity, StrictMath.sinh((-Double.MAX_VALUE / 200)));
assertEquals("sinh(double)[3] ::", -Infinity, Math.sinh((-Double.MAX_VALUE / 200)));
assertEquals("sinh(double)[4] ::", -Infinity, StrictMath.sinh((-Double.MAX_VALUE / 500)));
assertEquals("sinh(double)[5] ::", -Infinity, Math.sinh((-Double.MAX_VALUE / 500)));
assertEquals("sinh(double)[6] ::", -9.88E-321, StrictMath.sinh((-Double.MIN_VALUE * 2000)));
assertTrue("sinh(double)[7] ::", -9.886E-321 <= Math.sinh((-Double.MIN_VALUE * 2000)) && -9.876E-321 >= Math.sinh((-Double.MIN_VALUE * 2000)));
assertEquals("sinh(double)[8] ::", -4.94E-321, StrictMath.sinh((-Double.MIN_VALUE * 1000)));
assertTrue("sinh(double)[9] ::", -4.946E-321 <= Math.sinh((-Double.MIN_VALUE * 1000)) && -4.936E-321 >= Math.sinh((-Double.MIN_VALUE * 1000)));
assertEquals("sinh(double)[10] ::", -Infinity, StrictMath.sinh(-2929112212.129231481346));
assertEquals("sinh(double)[11] ::", -Infinity, Math.sinh(-2929112212.129231481346));
assertEquals("sinh(double)[12] ::", -Infinity, StrictMath.sinh(-2372.228212D));
assertEquals("sinh(double)[13] ::", -Infinity, Math.sinh(-2372.228212D));
assertEquals("sinh(double)[14] ::", -1.551878577463119, StrictMath.sinh(-1.2232D));
assertTrue("sinh(double)[15] ::", -1.5518785774631192 <= Math.sinh(-1.2232D) && -1.5518785774631187 >= Math.sinh(-1.2232D));
assertEquals("sinh(double)[16] ::", 0.0, StrictMath.sinh(0D));
assertTrue("sinh(double)[17] ::", -4.9E-324 <= Math.sinh(0D) && 4.9E-324 >= Math.sinh(0D));
assertEquals("sinh(double)[18] ::", 5.648199961077914, StrictMath.sinh(2.43223D));
assertTrue("sinh(double)[19] ::", 5.648199961077913 <= Math.sinh(2.43223D) && 5.648199961077915 >= Math.sinh(2.43223D));
assertEquals("sinh(double)[20] ::", Infinity, StrictMath.sinh(18232155.3323566D));
assertEquals("sinh(double)[21] ::", Infinity, Math.sinh(18232155.3323566D));
assertEquals("sinh(double)[22] ::", 4.9E-324, StrictMath.sinh(Double.MIN_VALUE));
assertTrue("sinh(double)[23] ::", 0.0 <= Math.sinh(Double.MIN_VALUE) && 1.0E-323 >= Math.sinh(Double.MIN_VALUE));
assertEquals("sinh(double)[24] ::", 9.9E-322, StrictMath.sinh((Double.MIN_VALUE * 200)));
assertTrue("sinh(double)[25] ::", 9.83E-322 <= Math.sinh((Double.MIN_VALUE * 200)) && 9.93E-322 >= Math.sinh((Double.MIN_VALUE * 200)));
assertEquals("sinh(double)[26] ::", Infinity, StrictMath.sinh((Double.MAX_VALUE / 500)));
assertEquals("sinh(double)[27] ::", Infinity, Math.sinh((Double.MAX_VALUE / 500)));
assertEquals("sinh(double)[28] ::", Infinity, StrictMath.sinh((Double.MAX_VALUE / 200)));
assertEquals("sinh(double)[29] ::", Infinity, Math.sinh((Double.MAX_VALUE / 200)));
assertEquals("sinh(double)[30] ::", Infinity, StrictMath.sinh(Double.MAX_VALUE));
assertEquals("sinh(double)[31] ::", Infinity, Math.sinh(Double.MAX_VALUE));
assertEquals("sinh(double)[32] ::", Infinity, StrictMath.sinh(Double.MAX_VALUE + 1));
assertEquals("sinh(double)[33] ::", Infinity, Math.sinh(Double.MAX_VALUE + 1));
}

public void testSqrt()
{
assertEquals("sqrt(double)[0] ::", 0.0, StrictMath.sqrt(0D));
assertTrue("sqrt(double)[1] ::", -4.9E-324 <= Math.sqrt(0D) && 4.9E-324 >= Math.sqrt(0D));
assertEquals("sqrt(double)[2] ::", 1.5595608356200794, StrictMath.sqrt(2.43223D));
assertTrue("sqrt(double)[3] ::", 1.5595608356200792 <= Math.sqrt(2.43223D) && 1.5595608356200796 >= Math.sqrt(2.43223D));
assertEquals("sqrt(double)[4] ::", 4269.912801493328, StrictMath.sqrt(18232155.3323566D));
assertTrue("sqrt(double)[5] ::", 4269.912801493327 <= Math.sqrt(18232155.3323566D) && 4269.9128014933285 >= Math.sqrt(18232155.3323566D));
assertEquals("sqrt(double)[6] ::", 2.2227587494850775E-162, StrictMath.sqrt(Double.MIN_VALUE));
assertTrue("sqrt(double)[7] ::", 2.222758749485077E-162 <= Math.sqrt(Double.MIN_VALUE) && 2.222758749485078E-162 >= Math.sqrt(Double.MIN_VALUE));
assertEquals("sqrt(double)[8] ::", 3.1434555694052575E-161, StrictMath.sqrt((Double.MIN_VALUE * 200)));
assertTrue("sqrt(double)[9] ::", 3.143455569405257E-161 <= Math.sqrt((Double.MIN_VALUE * 200)) && 3.143455569405258E-161 >= Math.sqrt((Double.MIN_VALUE * 200)));
assertEquals("sqrt(double)[10] ::", 5.996153992122476E152, StrictMath.sqrt((Double.MAX_VALUE / 500)));
assertTrue("sqrt(double)[11] ::", 5.996153992122475E152 <= Math.sqrt((Double.MAX_VALUE / 500)) && 5.996153992122477E152 >= Math.sqrt((Double.MAX_VALUE / 500)));
assertEquals("sqrt(double)[12] ::", 9.480751908109177E152, StrictMath.sqrt((Double.MAX_VALUE / 200)));
assertTrue("sqrt(double)[13] ::", 9.480751908109175E152 <= Math.sqrt((Double.MAX_VALUE / 200)) && 9.480751908109178E152 >= Math.sqrt((Double.MAX_VALUE / 200)));
assertEquals("sqrt(double)[14] ::", 1.3407807929942596E154, StrictMath.sqrt(Double.MAX_VALUE));
assertTrue("sqrt(double)[15] ::", 1.3407807929942594E154 <= Math.sqrt(Double.MAX_VALUE) && 1.3407807929942597E154 >= Math.sqrt(Double.MAX_VALUE));
assertEquals("sqrt(double)[16] ::", 1.3407807929942596E154, StrictMath.sqrt(Double.MAX_VALUE + 1));
assertTrue("sqrt(double)[17] ::", 1.3407807929942594E154 <= Math.sqrt(Double.MAX_VALUE + 1) && 1.3407807929942597E154 >= Math.sqrt(Double.MAX_VALUE + 1));
}

public void testTan()
{
assertEquals("tan(double)[0] ::", 0.004962015874444895, StrictMath.tan(-Double.MAX_VALUE));
assertTrue("tan(double)[1] ::", 0.004962015874444894 <= Math.tan(-Double.MAX_VALUE) && 0.004962015874444896 >= Math.tan(-Double.MAX_VALUE));
assertEquals("tan(double)[2] ::", 0.23567015176514217, StrictMath.tan((-Double.MAX_VALUE / 200)));
assertTrue("tan(double)[3] ::", 0.23567015176514214 <= Math.tan((-Double.MAX_VALUE / 200)) && 0.2356701517651422 >= Math.tan((-Double.MAX_VALUE / 200)));
assertEquals("tan(double)[4] ::", -0.013890751185845374, StrictMath.tan((-Double.MAX_VALUE / 500)));
assertTrue("tan(double)[5] ::", -0.013890751185845375 <= Math.tan((-Double.MAX_VALUE / 500)) && -0.013890751185845372 >= Math.tan((-Double.MAX_VALUE / 500)));
assertEquals("tan(double)[6] ::", -9.88E-321, StrictMath.tan((-Double.MIN_VALUE * 2000)));
assertTrue("tan(double)[7] ::", -9.886E-321 <= Math.tan((-Double.MIN_VALUE * 2000)) && -9.876E-321 >= Math.tan((-Double.MIN_VALUE * 2000)));
assertEquals("tan(double)[8] ::", -4.94E-321, StrictMath.tan((-Double.MIN_VALUE * 1000)));
assertTrue("tan(double)[9] ::", -4.946E-321 <= Math.tan((-Double.MIN_VALUE * 1000)) && -4.936E-321 >= Math.tan((-Double.MIN_VALUE * 1000)));
assertEquals("tan(double)[10] ::", 0.4613606942130483, StrictMath.tan(-2929112212.129231481346));
assertTrue("tan(double)[11] ::", 0.46136069421304826 <= Math.tan(-2929112212.129231481346) && 0.4613606942130484 >= Math.tan(-2929112212.129231481346));
assertEquals("tan(double)[12] ::", -0.33779263182277885, StrictMath.tan(-2372.228212D));
assertTrue("tan(double)[13] ::", -0.3377926318227789 <= Math.tan(-2372.228212D) && -0.3377926318227788 >= Math.tan(-2372.228212D));
assertEquals("tan(double)[14] ::", -2.7600907714835787, StrictMath.tan(-1.2232D));
assertTrue("tan(double)[15] ::", -2.760090771483579 <= Math.tan(-1.2232D) && -2.7600907714835783 >= Math.tan(-1.2232D));
assertEquals("tan(double)[16] ::", 0.0, StrictMath.tan(0D));
assertTrue("tan(double)[17] ::", -4.9E-324 <= Math.tan(0D) && 4.9E-324 >= Math.tan(0D));
assertEquals("tan(double)[18] ::", -0.858421060569475, StrictMath.tan(2.43223D));
assertTrue("tan(double)[19] ::", -0.8584210605694751 <= Math.tan(2.43223D) && -0.8584210605694749 >= Math.tan(2.43223D));
assertEquals("tan(double)[20] ::", 1.2786058599594134, StrictMath.tan(18232155.3323566D));
assertTrue("tan(double)[21] ::", 1.2786058599594132 <= Math.tan(18232155.3323566D) && 1.2786058599594137 >= Math.tan(18232155.3323566D));
assertEquals("tan(double)[22] ::", 4.9E-324, StrictMath.tan(Double.MIN_VALUE));
assertTrue("tan(double)[23] ::", 0.0 <= Math.tan(Double.MIN_VALUE) && 1.0E-323 >= Math.tan(Double.MIN_VALUE));
assertEquals("tan(double)[24] ::", 9.9E-322, StrictMath.tan((Double.MIN_VALUE * 200)));
assertTrue("tan(double)[25] ::", 9.83E-322 <= Math.tan((Double.MIN_VALUE * 200)) && 9.93E-322 >= Math.tan((Double.MIN_VALUE * 200)));
assertEquals("tan(double)[26] ::", 0.013890751185845374, StrictMath.tan((Double.MAX_VALUE / 500)));
assertTrue("tan(double)[27] ::", 0.013890751185845372 <= Math.tan((Double.MAX_VALUE / 500)) && 0.013890751185845375 >= Math.tan((Double.MAX_VALUE / 500)));
assertEquals("tan(double)[28] ::", -0.23567015176514217, StrictMath.tan((Double.MAX_VALUE / 200)));
assertTrue("tan(double)[29] ::", -0.2356701517651422 <= Math.tan((Double.MAX_VALUE / 200)) && -0.23567015176514214 >= Math.tan((Double.MAX_VALUE / 200)));
assertEquals("tan(double)[30] ::", -0.004962015874444895, StrictMath.tan(Double.MAX_VALUE));
assertTrue("tan(double)[31] ::", -0.004962015874444896 <= Math.tan(Double.MAX_VALUE) && -0.004962015874444894 >= Math.tan(Double.MAX_VALUE));
assertEquals("tan(double)[32] ::", -0.004962015874444895, StrictMath.tan(Double.MAX_VALUE + 1));
assertTrue("tan(double)[33] ::", -0.004962015874444896 <= Math.tan(Double.MAX_VALUE + 1) && -0.004962015874444894 >= Math.tan(Double.MAX_VALUE + 1));
}

public void testTanh()
{
assertEquals("tanh(double)[0] ::", -1.0, StrictMath.tanh(-Double.MAX_VALUE));
assertTrue("tanh(double)[1] ::", -1.0000000000000002 <= Math.tanh(-Double.MAX_VALUE) && -0.9999999999999998 >= Math.tanh(-Double.MAX_VALUE));
assertEquals("tanh(double)[2] ::", -1.0, StrictMath.tanh((-Double.MAX_VALUE / 200)));
assertTrue("tanh(double)[3] ::", -1.0000000000000002 <= Math.tanh((-Double.MAX_VALUE / 200)) && -0.9999999999999998 >= Math.tanh((-Double.MAX_VALUE / 200)));
assertEquals("tanh(double)[4] ::", -1.0, StrictMath.tanh((-Double.MAX_VALUE / 500)));
assertTrue("tanh(double)[5] ::", -1.0000000000000002 <= Math.tanh((-Double.MAX_VALUE / 500)) && -0.9999999999999998 >= Math.tanh((-Double.MAX_VALUE / 500)));
assertEquals("tanh(double)[6] ::", -9.88E-321, StrictMath.tanh((-Double.MIN_VALUE * 2000)));
assertTrue("tanh(double)[7] ::", -9.886E-321 <= Math.tanh((-Double.MIN_VALUE * 2000)) && -9.876E-321 >= Math.tanh((-Double.MIN_VALUE * 2000)));
assertEquals("tanh(double)[8] ::", -4.94E-321, StrictMath.tanh((-Double.MIN_VALUE * 1000)));
assertTrue("tanh(double)[9] ::", -4.946E-321 <= Math.tanh((-Double.MIN_VALUE * 1000)) && -4.936E-321 >= Math.tanh((-Double.MIN_VALUE * 1000)));
assertEquals("tanh(double)[10] ::", -1.0, StrictMath.tanh(-2929112212.129231481346));
assertTrue("tanh(double)[11] ::", -1.0000000000000002 <= Math.tanh(-2929112212.129231481346) && -0.9999999999999998 >= Math.tanh(-2929112212.129231481346));
assertEquals("tanh(double)[12] ::", -1.0, StrictMath.tanh(-2372.228212D));
assertTrue("tanh(double)[13] ::", -1.0000000000000002 <= Math.tanh(-2372.228212D) && -0.9999999999999998 >= Math.tanh(-2372.228212D));
assertEquals("tanh(double)[14] ::", -0.8405955817522291, StrictMath.tanh(-1.2232D));
assertTrue("tanh(double)[15] ::", -0.8405955817522293 <= Math.tanh(-1.2232D) && -0.840595581752229 >= Math.tanh(-1.2232D));
assertEquals("tanh(double)[16] ::", 0.0, StrictMath.tanh(0D));
assertTrue("tanh(double)[17] ::", -4.9E-324 <= Math.tanh(0D) && 4.9E-324 >= Math.tanh(0D));
assertEquals("tanh(double)[18] ::", 0.9846861739786077, StrictMath.tanh(2.43223D));
assertTrue("tanh(double)[19] ::", 0.9846861739786076 <= Math.tanh(2.43223D) && 0.9846861739786078 >= Math.tanh(2.43223D));
assertEquals("tanh(double)[20] ::", 1.0, StrictMath.tanh(18232155.3323566D));
assertTrue("tanh(double)[21] ::", 0.9999999999999998 <= Math.tanh(18232155.3323566D) && 1.0000000000000002 >= Math.tanh(18232155.3323566D));
assertEquals("tanh(double)[22] ::", 4.9E-324, StrictMath.tanh(Double.MIN_VALUE));
assertTrue("tanh(double)[23] ::", 0.0 <= Math.tanh(Double.MIN_VALUE) && 1.0E-323 >= Math.tanh(Double.MIN_VALUE));
assertEquals("tanh(double)[24] ::", 9.9E-322, StrictMath.tanh((Double.MIN_VALUE * 200)));
assertTrue("tanh(double)[25] ::", 9.83E-322 <= Math.tanh((Double.MIN_VALUE * 200)) && 9.93E-322 >= Math.tanh((Double.MIN_VALUE * 200)));
assertEquals("tanh(double)[26] ::", 1.0, StrictMath.tanh((Double.MAX_VALUE / 500)));
assertTrue("tanh(double)[27] ::", 0.9999999999999998 <= Math.tanh((Double.MAX_VALUE / 500)) && 1.0000000000000002 >= Math.tanh((Double.MAX_VALUE / 500)));
assertEquals("tanh(double)[28] ::", 1.0, StrictMath.tanh((Double.MAX_VALUE / 200)));
assertTrue("tanh(double)[29] ::", 0.9999999999999998 <= Math.tanh((Double.MAX_VALUE / 200)) && 1.0000000000000002 >= Math.tanh((Double.MAX_VALUE / 200)));
assertEquals("tanh(double)[30] ::", 1.0, StrictMath.tanh(Double.MAX_VALUE));
assertTrue("tanh(double)[31] ::", 0.9999999999999998 <= Math.tanh(Double.MAX_VALUE) && 1.0000000000000002 >= Math.tanh(Double.MAX_VALUE));
assertEquals("tanh(double)[32] ::", 1.0, StrictMath.tanh(Double.MAX_VALUE + 1));
assertTrue("tanh(double)[33] ::", 0.9999999999999998 <= Math.tanh(Double.MAX_VALUE + 1) && 1.0000000000000002 >= Math.tanh(Double.MAX_VALUE + 1));
}

public void testToDegrees()
{
assertEquals("toDegrees(double)[0] ::", (double)-Infinity, StrictMath.toDegrees(-Double.MAX_VALUE));
assertEquals("toDegrees(double)[1] ::", (double)-Infinity, Math.toDegrees(-Double.MAX_VALUE));
assertEquals("toDegrees(double)[2] ::", (double)-5.15001147436265E307, StrictMath.toDegrees((-Double.MAX_VALUE / 200)));
assertTrue("toDegrees(double)[3] ::", (double)-5.150011474362651E307 <= Math.toDegrees((-Double.MAX_VALUE / 200)) &&  (double)-5.150011474362649E307 >= Math.toDegrees((-Double.MAX_VALUE / 200)));
assertEquals("toDegrees(double)[4] ::", (double)-2.06000458974506E307, StrictMath.toDegrees((-Double.MAX_VALUE / 500)));
assertTrue("toDegrees(double)[5] ::", (double)-2.0600045897450602E307 <= Math.toDegrees((-Double.MAX_VALUE / 500)) &&  (double)-2.0600045897450597E307 >= Math.toDegrees((-Double.MAX_VALUE / 500)));
assertEquals("toDegrees(double)[6] ::", (double)-5.6616E-319, StrictMath.toDegrees((-Double.MIN_VALUE * 2000)));
assertTrue("toDegrees(double)[7] ::", (double)-5.66165E-319 <= Math.toDegrees((-Double.MIN_VALUE * 2000)) &&  (double)-5.66155E-319 >= Math.toDegrees((-Double.MIN_VALUE * 2000)));
assertEquals("toDegrees(double)[8] ::", (double)-2.8308E-319, StrictMath.toDegrees((-Double.MIN_VALUE * 1000)));
assertTrue("toDegrees(double)[9] ::", (double)-2.83085E-319 <= Math.toDegrees((-Double.MIN_VALUE * 1000)) &&  (double)-2.83075E-319 >= Math.toDegrees((-Double.MIN_VALUE * 1000)));
assertEquals("toDegrees(double)[10] ::", (double)-1.6782576747523328E11, StrictMath.toDegrees(-2929112212.129231481346));
assertTrue("toDegrees(double)[11] ::", (double)-1.678257674752333E11 <= Math.toDegrees(-2929112212.129231481346) &&  (double)-1.6782576747523325E11 >= Math.toDegrees(-2929112212.129231481346));
assertEquals("toDegrees(double)[12] ::", (double)-135918.6645894655, StrictMath.toDegrees(-2372.228212D));
assertTrue("toDegrees(double)[13] ::", (double)-135918.66458946554 <= Math.toDegrees(-2372.228212D) &&  (double)-135918.66458946548 >= Math.toDegrees(-2372.228212D));
assertEquals("toDegrees(double)[14] ::", (double)-70.0841975004023, StrictMath.toDegrees(-1.2232D));
assertTrue("toDegrees(double)[15] ::", (double)-70.08419750040231 <= Math.toDegrees(-1.2232D) &&  (double)-70.08419750040228 >= Math.toDegrees(-1.2232D));
assertEquals("toDegrees(double)[16] ::", (double)0.0, StrictMath.toDegrees(0D));
assertTrue("toDegrees(double)[17] ::", (double)-4.9E-324 <= Math.toDegrees(0D) &&  (double)4.9E-324 >= Math.toDegrees(0D));
assertEquals("toDegrees(double)[18] ::", (double)139.3565138051042, StrictMath.toDegrees(2.43223D));
assertTrue("toDegrees(double)[19] ::", (double)139.35651380510419 <= Math.toDegrees(2.43223D) &&  (double)139.35651380510424 >= Math.toDegrees(2.43223D));
assertEquals("toDegrees(double)[20] ::", (double)1.0446255519709718E9, StrictMath.toDegrees(18232155.3323566D));
assertTrue("toDegrees(double)[21] ::", (double)1.0446255519709717E9 <= Math.toDegrees(18232155.3323566D) &&  (double)1.044625551970972E9 >= Math.toDegrees(18232155.3323566D));
assertEquals("toDegrees(double)[22] ::", (double)2.8E-322, StrictMath.toDegrees(Double.MIN_VALUE));
assertTrue("toDegrees(double)[23] ::", (double)2.77E-322 <= Math.toDegrees(Double.MIN_VALUE) &&  (double)2.87E-322 >= Math.toDegrees(Double.MIN_VALUE));
assertEquals("toDegrees(double)[24] ::", (double)5.6615E-320, StrictMath.toDegrees((Double.MIN_VALUE * 200)));
assertTrue("toDegrees(double)[25] ::", (double)5.661E-320 <= Math.toDegrees((Double.MIN_VALUE * 200)) &&  (double)5.662E-320 >= Math.toDegrees((Double.MIN_VALUE * 200)));
assertEquals("toDegrees(double)[26] ::", (double)2.06000458974506E307, StrictMath.toDegrees((Double.MAX_VALUE / 500)));
assertTrue("toDegrees(double)[27] ::", (double)2.0600045897450597E307 <= Math.toDegrees((Double.MAX_VALUE / 500)) &&  (double)2.0600045897450602E307 >= Math.toDegrees((Double.MAX_VALUE / 500)));
assertEquals("toDegrees(double)[28] ::", (double)5.15001147436265E307, StrictMath.toDegrees((Double.MAX_VALUE / 200)));
assertTrue("toDegrees(double)[29] ::", (double)5.150011474362649E307 <= Math.toDegrees((Double.MAX_VALUE / 200)) &&  (double)5.150011474362651E307 >= Math.toDegrees((Double.MAX_VALUE / 200)));
assertEquals("toDegrees(double)[30] ::", (double)Infinity, StrictMath.toDegrees(Double.MAX_VALUE));
assertEquals("toDegrees(double)[31] ::", (double)Infinity, Math.toDegrees(Double.MAX_VALUE));
assertEquals("toDegrees(double)[32] ::", (double)Infinity, StrictMath.toDegrees(Double.MAX_VALUE + 1));
assertEquals("toDegrees(double)[33] ::", (double)Infinity, Math.toDegrees(Double.MAX_VALUE + 1));
}

public void testToRadians()
{
if ( generatorJdkRange.equals(runtimeJdkRange) ) {
assertEquals("toRadians(double)[0] ::", (double)-3.1375664143845866E306, StrictMath.toRadians(-Double.MAX_VALUE));
assertTrue("toRadians(double)[1] ::", (double)-3.137566414384587E306 <= Math.toRadians(-Double.MAX_VALUE) &&  (double)-3.137566414384586E306 >= Math.toRadians(-Double.MAX_VALUE));
}
else {
assertTrue("toRadians(double)[0] ::", (double)-3.137566414384588E306 <= StrictMath.toRadians(-Double.MAX_VALUE) &&  (double)-3.1375664143845853E306 >= StrictMath.toRadians(-Double.MAX_VALUE));
assertTrue("toRadians(double)[1] ::", (double)-3.137566414384588E306 <= Math.toRadians(-Double.MAX_VALUE) &&  (double)-3.1375664143845853E306 >= Math.toRadians(-Double.MAX_VALUE));
}
if ( generatorJdkRange.equals(runtimeJdkRange) ) {
assertEquals("toRadians(double)[2] ::", (double)-1.5687832071922932E304, StrictMath.toRadians((-Double.MAX_VALUE / 200)));
assertTrue("toRadians(double)[3] ::", (double)-1.5687832071922935E304 <= Math.toRadians((-Double.MAX_VALUE / 200)) &&  (double)-1.568783207192293E304 >= Math.toRadians((-Double.MAX_VALUE / 200)));
}
else {
assertTrue("toRadians(double)[2] ::", (double)-1.5687832071922937E304 <= StrictMath.toRadians((-Double.MAX_VALUE / 200)) &&  (double)-1.5687832071922927E304 >= StrictMath.toRadians((-Double.MAX_VALUE / 200)));
assertTrue("toRadians(double)[3] ::", (double)-1.5687832071922937E304 <= Math.toRadians((-Double.MAX_VALUE / 200)) &&  (double)-1.5687832071922927E304 >= Math.toRadians((-Double.MAX_VALUE / 200)));
}
if ( generatorJdkRange.equals(runtimeJdkRange) ) {
assertEquals("toRadians(double)[4] ::", (double)-6.275132828769172E303, StrictMath.toRadians((-Double.MAX_VALUE / 500)));
assertTrue("toRadians(double)[5] ::", (double)-6.275132828769174E303 <= Math.toRadians((-Double.MAX_VALUE / 500)) &&  (double)-6.275132828769171E303 >= Math.toRadians((-Double.MAX_VALUE / 500)));
}
else {
assertTrue("toRadians(double)[4] ::", (double)-6.275132828769175E303 <= StrictMath.toRadians((-Double.MAX_VALUE / 500)) &&  (double)-6.27513282876917E303 >= StrictMath.toRadians((-Double.MAX_VALUE / 500)));
assertTrue("toRadians(double)[5] ::", (double)-6.275132828769175E303 <= Math.toRadians((-Double.MAX_VALUE / 500)) &&  (double)-6.27513282876917E303 >= Math.toRadians((-Double.MAX_VALUE / 500)));
}
if ( generatorJdkRange.equals(runtimeJdkRange) ) {
assertEquals("toRadians(double)[6] ::", (double)-1.73E-322, StrictMath.toRadians((-Double.MIN_VALUE * 2000)));
assertTrue("toRadians(double)[7] ::", (double)-1.8E-322 <= Math.toRadians((-Double.MIN_VALUE * 2000)) &&  (double)-1.7E-322 >= Math.toRadians((-Double.MIN_VALUE * 2000)));
}
else {
assertTrue("toRadians(double)[6] ::", (double)-1.83E-322 <= StrictMath.toRadians((-Double.MIN_VALUE * 2000)) &&  (double)-1.63E-322 >= StrictMath.toRadians((-Double.MIN_VALUE * 2000)));
assertTrue("toRadians(double)[7] ::", (double)-1.83E-322 <= Math.toRadians((-Double.MIN_VALUE * 2000)) &&  (double)-1.63E-322 >= Math.toRadians((-Double.MIN_VALUE * 2000)));
}
if ( generatorJdkRange.equals(runtimeJdkRange) ) {
assertEquals("toRadians(double)[8] ::", (double)-9.4E-323, StrictMath.toRadians((-Double.MIN_VALUE * 1000)));
assertTrue("toRadians(double)[9] ::", (double)-1.0E-322 <= Math.toRadians((-Double.MIN_VALUE * 1000)) &&  (double)-8.9E-323 >= Math.toRadians((-Double.MIN_VALUE * 1000)));
}
else {
assertTrue("toRadians(double)[8] ::", (double)-1.04E-322 <= StrictMath.toRadians((-Double.MIN_VALUE * 1000)) &&  (double)-8.4E-323 >= StrictMath.toRadians((-Double.MIN_VALUE * 1000)));
assertTrue("toRadians(double)[9] ::", (double)-1.04E-322 <= Math.toRadians((-Double.MIN_VALUE * 1000)) &&  (double)-8.4E-323 >= Math.toRadians((-Double.MIN_VALUE * 1000)));
}
if ( generatorJdkRange.equals(runtimeJdkRange) ) {
assertEquals("toRadians(double)[10] ::", (double)-5.112265226202968E7, StrictMath.toRadians(-2929112212.129231481346));
assertTrue("toRadians(double)[11] ::", (double)-5.1122652262029685E7 <= Math.toRadians(-2929112212.129231481346) &&  (double)-5.112265226202967E7 >= Math.toRadians(-2929112212.129231481346));
}
else {
assertTrue("toRadians(double)[10] ::", (double)-5.112265226202969E7 <= StrictMath.toRadians(-2929112212.129231481346) &&  (double)-5.112265226202966E7 >= StrictMath.toRadians(-2929112212.129231481346));
assertTrue("toRadians(double)[11] ::", (double)-5.112265226202969E7 <= Math.toRadians(-2929112212.129231481346) &&  (double)-5.112265226202966E7 >= Math.toRadians(-2929112212.129231481346));
}
if ( generatorJdkRange.equals(runtimeJdkRange) ) {
assertEquals("toRadians(double)[12] ::", (double)-41.403192908098056, StrictMath.toRadians(-2372.228212D));
assertTrue("toRadians(double)[13] ::", (double)-41.40319290809806 <= Math.toRadians(-2372.228212D) &&  (double)-41.40319290809805 >= Math.toRadians(-2372.228212D));
}
else {
assertTrue("toRadians(double)[12] ::", (double)-41.40319290809807 <= StrictMath.toRadians(-2372.228212D) &&  (double)-41.40319290809804 >= StrictMath.toRadians(-2372.228212D));
assertTrue("toRadians(double)[13] ::", (double)-41.40319290809807 <= Math.toRadians(-2372.228212D) &&  (double)-41.40319290809804 >= Math.toRadians(-2372.228212D));
}
if ( generatorJdkRange.equals(runtimeJdkRange) ) {
assertEquals("toRadians(double)[14] ::", (double)-0.02134886741039464, StrictMath.toRadians(-1.2232D));
assertTrue("toRadians(double)[15] ::", (double)-0.021348867410394642 <= Math.toRadians(-1.2232D) &&  (double)-0.021348867410394635 >= Math.toRadians(-1.2232D));
}
else {
assertTrue("toRadians(double)[14] ::", (double)-0.021348867410394646 <= StrictMath.toRadians(-1.2232D) &&  (double)-0.021348867410394632 >= StrictMath.toRadians(-1.2232D));
assertTrue("toRadians(double)[15] ::", (double)-0.021348867410394646 <= Math.toRadians(-1.2232D) &&  (double)-0.021348867410394632 >= Math.toRadians(-1.2232D));
}
if ( generatorJdkRange.equals(runtimeJdkRange) ) {
assertEquals("toRadians(double)[16] ::", (double)0.0, StrictMath.toRadians(0D));
assertTrue("toRadians(double)[17] ::", (double)-4.9E-324 <= Math.toRadians(0D) &&  (double)4.9E-324 >= Math.toRadians(0D));
}
else {
assertTrue("toRadians(double)[16] ::", (double)-1.0E-323 <= StrictMath.toRadians(0D) &&  (double)1.0E-323 >= StrictMath.toRadians(0D));
assertTrue("toRadians(double)[17] ::", (double)-1.0E-323 <= Math.toRadians(0D) &&  (double)1.0E-323 >= Math.toRadians(0D));
}
if ( generatorJdkRange.equals(runtimeJdkRange) ) {
assertEquals("toRadians(double)[18] ::", (double)0.04245042166578168, StrictMath.toRadians(2.43223D));
assertTrue("toRadians(double)[19] ::", (double)0.042450421665781675 <= Math.toRadians(2.43223D) &&  (double)0.04245042166578169 >= Math.toRadians(2.43223D));
}
else {
assertTrue("toRadians(double)[18] ::", (double)0.04245042166578167 <= StrictMath.toRadians(2.43223D) &&  (double)0.042450421665781696 >= StrictMath.toRadians(2.43223D));
assertTrue("toRadians(double)[19] ::", (double)0.04245042166578167 <= Math.toRadians(2.43223D) &&  (double)0.042450421665781696 >= Math.toRadians(2.43223D));
}
if ( generatorJdkRange.equals(runtimeJdkRange) ) {
assertEquals("toRadians(double)[20] ::", (double)318211.14028466365, StrictMath.toRadians(18232155.3323566D));
assertTrue("toRadians(double)[21] ::", (double)318211.1402846636 <= Math.toRadians(18232155.3323566D) &&  (double)318211.1402846637 >= Math.toRadians(18232155.3323566D));
}
else {
assertTrue("toRadians(double)[20] ::", (double)318211.14028466353 <= StrictMath.toRadians(18232155.3323566D) &&  (double)318211.14028466376 >= StrictMath.toRadians(18232155.3323566D));
assertTrue("toRadians(double)[21] ::", (double)318211.14028466353 <= Math.toRadians(18232155.3323566D) &&  (double)318211.14028466376 >= Math.toRadians(18232155.3323566D));
}
if ( generatorJdkRange.equals(runtimeJdkRange) ) {
assertEquals("toRadians(double)[22] ::", (double)0.0, StrictMath.toRadians(Double.MIN_VALUE));
assertTrue("toRadians(double)[23] ::", (double)-4.9E-324 <= Math.toRadians(Double.MIN_VALUE) &&  (double)4.9E-324 >= Math.toRadians(Double.MIN_VALUE));
}
else {
assertTrue("toRadians(double)[22] ::", (double)-1.0E-323 <= StrictMath.toRadians(Double.MIN_VALUE) &&  (double)1.0E-323 >= StrictMath.toRadians(Double.MIN_VALUE));
assertTrue("toRadians(double)[23] ::", (double)-1.0E-323 <= Math.toRadians(Double.MIN_VALUE) &&  (double)1.0E-323 >= Math.toRadians(Double.MIN_VALUE));
}
if ( generatorJdkRange.equals(runtimeJdkRange) ) {
assertEquals("toRadians(double)[24] ::", (double)1.5E-323, StrictMath.toRadians((Double.MIN_VALUE * 200)));
assertTrue("toRadians(double)[25] ::", (double)1.0E-323 <= Math.toRadians((Double.MIN_VALUE * 200)) &&  (double)2.0E-323 >= Math.toRadians((Double.MIN_VALUE * 200)));
}
else {
assertTrue("toRadians(double)[24] ::", (double)4.9E-324 <= StrictMath.toRadians((Double.MIN_VALUE * 200)) &&  (double)2.5E-323 >= StrictMath.toRadians((Double.MIN_VALUE * 200)));
assertTrue("toRadians(double)[25] ::", (double)4.9E-324 <= Math.toRadians((Double.MIN_VALUE * 200)) &&  (double)2.5E-323 >= Math.toRadians((Double.MIN_VALUE * 200)));
}
if ( generatorJdkRange.equals(runtimeJdkRange) ) {
assertEquals("toRadians(double)[26] ::", (double)6.275132828769172E303, StrictMath.toRadians((Double.MAX_VALUE / 500)));
assertTrue("toRadians(double)[27] ::", (double)6.275132828769171E303 <= Math.toRadians((Double.MAX_VALUE / 500)) &&  (double)6.275132828769174E303 >= Math.toRadians((Double.MAX_VALUE / 500)));
}
else {
assertTrue("toRadians(double)[26] ::", (double)6.27513282876917E303 <= StrictMath.toRadians((Double.MAX_VALUE / 500)) &&  (double)6.275132828769175E303 >= StrictMath.toRadians((Double.MAX_VALUE / 500)));
assertTrue("toRadians(double)[27] ::", (double)6.27513282876917E303 <= Math.toRadians((Double.MAX_VALUE / 500)) &&  (double)6.275132828769175E303 >= Math.toRadians((Double.MAX_VALUE / 500)));
}
if ( generatorJdkRange.equals(runtimeJdkRange) ) {
assertEquals("toRadians(double)[28] ::", (double)1.5687832071922932E304, StrictMath.toRadians((Double.MAX_VALUE / 200)));
assertTrue("toRadians(double)[29] ::", (double)1.568783207192293E304 <= Math.toRadians((Double.MAX_VALUE / 200)) &&  (double)1.5687832071922935E304 >= Math.toRadians((Double.MAX_VALUE / 200)));
}
else {
assertTrue("toRadians(double)[28] ::", (double)1.5687832071922927E304 <= StrictMath.toRadians((Double.MAX_VALUE / 200)) &&  (double)1.5687832071922937E304 >= StrictMath.toRadians((Double.MAX_VALUE / 200)));
assertTrue("toRadians(double)[29] ::", (double)1.5687832071922927E304 <= Math.toRadians((Double.MAX_VALUE / 200)) &&  (double)1.5687832071922937E304 >= Math.toRadians((Double.MAX_VALUE / 200)));
}
if ( generatorJdkRange.equals(runtimeJdkRange) ) {
assertEquals("toRadians(double)[30] ::", (double)3.1375664143845866E306, StrictMath.toRadians(Double.MAX_VALUE));
assertTrue("toRadians(double)[31] ::", (double)3.137566414384586E306 <= Math.toRadians(Double.MAX_VALUE) &&  (double)3.137566414384587E306 >= Math.toRadians(Double.MAX_VALUE));
}
else {
assertTrue("toRadians(double)[30] ::", (double)3.1375664143845853E306 <= StrictMath.toRadians(Double.MAX_VALUE) &&  (double)3.137566414384588E306 >= StrictMath.toRadians(Double.MAX_VALUE));
assertTrue("toRadians(double)[31] ::", (double)3.1375664143845853E306 <= Math.toRadians(Double.MAX_VALUE) &&  (double)3.137566414384588E306 >= Math.toRadians(Double.MAX_VALUE));
}
if ( generatorJdkRange.equals(runtimeJdkRange) ) {
assertEquals("toRadians(double)[32] ::", (double)3.1375664143845866E306, StrictMath.toRadians(Double.MAX_VALUE + 1));
assertTrue("toRadians(double)[33] ::", (double)3.137566414384586E306 <= Math.toRadians(Double.MAX_VALUE + 1) &&  (double)3.137566414384587E306 >= Math.toRadians(Double.MAX_VALUE + 1));
}
else {
assertTrue("toRadians(double)[32] ::", (double)3.1375664143845853E306 <= StrictMath.toRadians(Double.MAX_VALUE + 1) &&  (double)3.137566414384588E306 >= StrictMath.toRadians(Double.MAX_VALUE + 1));
assertTrue("toRadians(double)[33] ::", (double)3.1375664143845853E306 <= Math.toRadians(Double.MAX_VALUE + 1) &&  (double)3.137566414384588E306 >= Math.toRadians(Double.MAX_VALUE + 1));
}
}

public void testUlp_double()
{
assertEquals("ulp(double)[0] ::", (double)1.9958403095347198E292, StrictMath.ulp(-Double.MAX_VALUE));
assertEquals("ulp(double)[1] ::", (double)1.9958403095347198E292, Math.ulp(-Double.MAX_VALUE));
assertEquals("ulp(double)[2] ::", (double)1.5592502418239999E290, StrictMath.ulp((-Double.MAX_VALUE / 200)));
assertEquals("ulp(double)[3] ::", (double)1.5592502418239999E290, Math.ulp((-Double.MAX_VALUE / 200)));
assertEquals("ulp(double)[4] ::", (double)7.796251209119999E289, StrictMath.ulp((-Double.MAX_VALUE / 500)));
assertEquals("ulp(double)[5] ::", (double)7.796251209119999E289, Math.ulp((-Double.MAX_VALUE / 500)));
assertEquals("ulp(double)[6] ::", (double)4.9E-324, StrictMath.ulp((-Double.MIN_VALUE * 2000)));
assertEquals("ulp(double)[7] ::", (double)4.9E-324, Math.ulp((-Double.MIN_VALUE * 2000)));
assertEquals("ulp(double)[8] ::", (double)4.9E-324, StrictMath.ulp((-Double.MIN_VALUE * 1000)));
assertEquals("ulp(double)[9] ::", (double)4.9E-324, Math.ulp((-Double.MIN_VALUE * 1000)));
assertEquals("ulp(double)[10] ::", (double)4.76837158203125E-7, StrictMath.ulp(-2929112212.129231481346));
assertEquals("ulp(double)[11] ::", (double)4.76837158203125E-7, Math.ulp(-2929112212.129231481346));
assertEquals("ulp(double)[12] ::", (double)4.547473508864641E-13, StrictMath.ulp(-2372.228212D));
assertEquals("ulp(double)[13] ::", (double)4.547473508864641E-13, Math.ulp(-2372.228212D));
assertEquals("ulp(double)[14] ::", (double)2.220446049250313E-16, StrictMath.ulp(-1.2232D));
assertEquals("ulp(double)[15] ::", (double)2.220446049250313E-16, Math.ulp(-1.2232D));
assertEquals("ulp(double)[16] ::", (double)4.9E-324, StrictMath.ulp(0D));
assertEquals("ulp(double)[17] ::", (double)4.9E-324, Math.ulp(0D));
assertEquals("ulp(double)[18] ::", (double)4.440892098500626E-16, StrictMath.ulp(2.43223D));
assertEquals("ulp(double)[19] ::", (double)4.440892098500626E-16, Math.ulp(2.43223D));
assertEquals("ulp(double)[20] ::", (double)3.725290298461914E-9, StrictMath.ulp(18232155.3323566D));
assertEquals("ulp(double)[21] ::", (double)3.725290298461914E-9, Math.ulp(18232155.3323566D));
assertEquals("ulp(double)[22] ::", (double)4.9E-324, StrictMath.ulp(Double.MIN_VALUE));
assertEquals("ulp(double)[23] ::", (double)4.9E-324, Math.ulp(Double.MIN_VALUE));
assertEquals("ulp(double)[24] ::", (double)4.9E-324, StrictMath.ulp((Double.MIN_VALUE * 200)));
assertEquals("ulp(double)[25] ::", (double)4.9E-324, Math.ulp((Double.MIN_VALUE * 200)));
assertEquals("ulp(double)[26] ::", (double)7.796251209119999E289, StrictMath.ulp((Double.MAX_VALUE / 500)));
assertEquals("ulp(double)[27] ::", (double)7.796251209119999E289, Math.ulp((Double.MAX_VALUE / 500)));
assertEquals("ulp(double)[28] ::", (double)1.5592502418239999E290, StrictMath.ulp((Double.MAX_VALUE / 200)));
assertEquals("ulp(double)[29] ::", (double)1.5592502418239999E290, Math.ulp((Double.MAX_VALUE / 200)));
assertEquals("ulp(double)[30] ::", (double)1.9958403095347198E292, StrictMath.ulp(Double.MAX_VALUE));
assertEquals("ulp(double)[31] ::", (double)1.9958403095347198E292, Math.ulp(Double.MAX_VALUE));
assertEquals("ulp(double)[32] ::", (double)1.9958403095347198E292, StrictMath.ulp(Double.MAX_VALUE + 1));
assertEquals("ulp(double)[33] ::", (double)1.9958403095347198E292, Math.ulp(Double.MAX_VALUE + 1));
}

public void testUlp_float()
{
assertEquals("ulp(float)[0] ::", (float)2.028241E31, StrictMath.ulp(-Float.MAX_VALUE));
assertEquals("ulp(float)[1] ::", (float)2.028241E31, Math.ulp(-Float.MAX_VALUE));
assertEquals("ulp(float)[2] ::", (float)1.58456325E29, StrictMath.ulp((-Float.MAX_VALUE / 200)));
assertEquals("ulp(float)[3] ::", (float)1.58456325E29, Math.ulp((-Float.MAX_VALUE / 200)));
assertEquals("ulp(float)[4] ::", (float)7.9228163E28, StrictMath.ulp((-Float.MAX_VALUE / 500)));
assertEquals("ulp(float)[5] ::", (float)7.9228163E28, Math.ulp((-Float.MAX_VALUE / 500)));
assertEquals("ulp(float)[6] ::", (float)1.4E-45, StrictMath.ulp((-Float.MIN_VALUE * 2000)));
assertEquals("ulp(float)[7] ::", (float)1.4E-45, Math.ulp((-Float.MIN_VALUE * 2000)));
assertEquals("ulp(float)[8] ::", (float)1.4E-45, StrictMath.ulp((-Float.MIN_VALUE * 1000)));
assertEquals("ulp(float)[9] ::", (float)1.4E-45, Math.ulp((-Float.MIN_VALUE * 1000)));
assertEquals("ulp(float)[10] ::", (float)2.0, StrictMath.ulp(-32948748.958324F));
assertEquals("ulp(float)[11] ::", (float)2.0, Math.ulp(-32948748.958324F));
assertEquals("ulp(float)[12] ::", (float)8.881784E-16, StrictMath.ulp(-0.000000009F));
assertEquals("ulp(float)[13] ::", (float)8.881784E-16, Math.ulp(-0.000000009F));
assertEquals("ulp(float)[14] ::", (float)1.4210855E-14, StrictMath.ulp(-0.0000002F));
assertEquals("ulp(float)[15] ::", (float)1.4210855E-14, Math.ulp(-0.0000002F));
assertEquals("ulp(float)[16] ::", (float)1.4E-45, StrictMath.ulp(0F));
assertEquals("ulp(float)[17] ::", (float)1.4E-45, Math.ulp(0F));
assertEquals("ulp(float)[18] ::", (float)2.9802322E-8, StrictMath.ulp(0.456232334F));
assertEquals("ulp(float)[19] ::", (float)2.9802322E-8, Math.ulp(0.456232334F));
assertEquals("ulp(float)[20] ::", (float)0.125, StrictMath.ulp(1224257.312321263F));
assertEquals("ulp(float)[21] ::", (float)0.125, Math.ulp(1224257.312321263F));
assertEquals("ulp(float)[22] ::", (float)1024.0, StrictMath.ulp(9999832342.12365F));
assertEquals("ulp(float)[23] ::", (float)1024.0, Math.ulp(9999832342.12365F));
assertEquals("ulp(float)[24] ::", (float)1.4E-45, StrictMath.ulp(Float.MIN_VALUE));
assertEquals("ulp(float)[25] ::", (float)1.4E-45, Math.ulp(Float.MIN_VALUE));
assertEquals("ulp(float)[26] ::", (float)1.4E-45, StrictMath.ulp((Float.MIN_VALUE * 200)));
assertEquals("ulp(float)[27] ::", (float)1.4E-45, Math.ulp((Float.MIN_VALUE * 200)));
assertEquals("ulp(float)[28] ::", (float)7.9228163E28, StrictMath.ulp((Float.MAX_VALUE / 500)));
assertEquals("ulp(float)[29] ::", (float)7.9228163E28, Math.ulp((Float.MAX_VALUE / 500)));
assertEquals("ulp(float)[30] ::", (float)1.58456325E29, StrictMath.ulp((Float.MAX_VALUE / 200)));
assertEquals("ulp(float)[31] ::", (float)1.58456325E29, Math.ulp((Float.MAX_VALUE / 200)));
assertEquals("ulp(float)[32] ::", (float)2.028241E31, StrictMath.ulp(Float.MAX_VALUE));
assertEquals("ulp(float)[33] ::", (float)2.028241E31, Math.ulp(Float.MAX_VALUE));
assertEquals("ulp(float)[34] ::", (float)2.028241E31, StrictMath.ulp((Float.MAX_VALUE + 1)));
assertEquals("ulp(float)[35] ::", (float)2.028241E31, Math.ulp((Float.MAX_VALUE + 1)));
}

}
