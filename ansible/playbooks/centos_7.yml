########################################
# AdoptOpenJDK - Ansible Playbook for: #
# --------- CentOS 7 on x86 ---------  #
########################################

- hosts: all
  remote_user: root
  become: yes
  tasks:
  - block:

    ######################
    # Load variable file #
    ######################
    - name: Load AdoptOpenJDKs variable file
      include_vars: adoptopenjdk_variables.yml

    ###############################
    # Update and Install Packages #
    ###############################
    - name: Enable EPEL release
      yum: 
        name: epel-release
        state: installed 
        update_cache: yes
        validate_certs: no
      tags: patch_update

    - name: YUM upgrade all packages
      yum: name='*' state=latest
      tags: patch_update

    - name: Install Build tools
      yum: name={{item}} state=installed
      with_items:
        - alsa-lib-devel
        - bind-utils
        - bison
        - cpanminus
        - cpio
        - cups-devel
        - elfutils-libelf-devel
        - flex
        - freetype-devel
        - gcc
        - gcc-c++
        - git
        - glibc
        - glibc-common
        - java-1.8.0-openjdk-devel
        - libdwarf-devel
        - libXext-devel
        - libXrender-devel
        - libXt-devel
        - libXtst-devel
        - make
        - mesa-libGL-devel
        - ntp
        - openssl-devel
        - perl-CPAN
        - perl-devel
        - unzip
        - wget
        - zip
      tags: build_tools

    - name: Install Test tools
      yum: name={{item}} state=installed
      with_items:
        - ant
        - perl
        - xorg-x11-xauth
        - xorg-x11-server-Xorg  
      tags: test_tools 

    - name: Create symlink for gmake to make
      file:
        src: /usr/bin/make
        dest: /usr/bin/gmake
        owner: root
        group: root
        state: link
      tags: build_tools
        
    ################
    # Jenkins user #
    ################
    - name: Create Jenkins user
      action: user name={{ Jenkins_Username }} state=present
      ignore_errors: yes
      tags: jenkins_user
          
    - name: Set authorized key for Jenkins user
      authorized_key:
        user: "{{ Jenkins_Username }}"
        state: present
        key: "{{ lookup('file', '{{ Jenkins_User_SSHKey }}') }}"
      tags: jenkins_user
          
    #######################
    # Additional Packages #
    #######################
    - name: Download ccache.tar.gz
      get_url:
        url: https://www.samba.org/ftp/ccache/ccache-3.1.9.tar.gz
        dest: /home/{{ Jenkins_Username }}/ccache.tar.gz
        mode: 0440
      tags: ccache

    - name: Extract ccache
      unarchive:
        src: /home/{{ Jenkins_Username }}/ccache.tar.gz
        dest: /home/{{ Jenkins_Username }}
        copy: False
      tags: ccache

    - name: Running ./configure & make for CCACHE
      shell: cd /home/{{ Jenkins_Username }}/ccache-3.1.9 && ./configure && make -j {{ ansible_processor_vcpus }} && sudo make install
      become: yes
      tags: ccache

    - name: Install JSON
      shell: |
        cpanm --with-recommends JSON
      tags: json

    - name: Install Text::CSV
      shell: |
        cpanm --with-recommends Text::CSV  
      tags: text_csv
  
    #########
    # cmake #
    #########
    - name: Download cmake
      get_url:
        url: https://cmake.org/files/v3.7/cmake-3.7.2.tar.gz
        dest: /tmp/cmake-3.7.2.tar.gz
        mode: 0440
        force: no
        validate_certs: no
      tags: cmake 
      
    - name: Extract ccache
      unarchive:
        src: /tmp/cmake-3.7.2.tar.gz
        dest: /tmp
        copy: False 
      tags: cmake  

    - name: Running ./configure & make for cmake
      shell: cd /tmp/cmake-3.7.2 && ./configure && make -j {{ ansible_processor_vcpus }} && make install
      tags: cmake 

    - name: Cleanup cmake
      file:
        path: "{{ item }}"
        state: absent
      with_items:
        - /tmp/cmake-3.7.2.tar.gz
        - /tmp/cmake-3.7.2
      tags: cmake

    ###############
    # ant-contrib #
    ###############
    - name: Download ant-contrib
      get_url:
        url: https://sourceforge.net/projects/ant-contrib/files/ant-contrib/ant-contrib-1.0b2/ant-contrib-1.0b2-bin.tar.gz
        dest: /tmp/
        mode: 0440
        timeout: 25
      tags: ant

    - name: Extract ant-contrib
      unarchive:
        src: /tmp/ant-contrib-1.0b2-bin.tar.gz 
        dest: /tmp/
        copy: False
      tags: ant

    - name: Move ant-contrib.jar to lib folder
      command: mv /tmp/ant-contrib/lib/ant-contrib.jar /usr/share/ant/lib/
      tags: ant

    - name: Clean ant-contrib tmp files
      file:
        state: absent
        path: "/tmp/ant-contrib/"
      tags: ant

    - file:
        state: absent
        path: "/tmp/ant-contrib-1.0b2-bin.tar.gz"
      tags: ant

    ##########
    # Docker #
    ##########
    - name: Install EPEL repo
      yum:
        name: https://dl.fedoraproject.org/pub/epel/epel-release-latest-7.noarch.rpm
        state: present
      ignore_errors: yes
      tags: docker

    - name: Import Docker Repo key
      rpm_key:
        key: https://download.docker.com/linux/centos/gpg
        state: present
      tags: docker

    - name: Add Docker Repo
      get_url:
        url: https://download.docker.com/linux/centos/docker-ce.repo
        dest: /etc/yum.repos.d/docker-ce.repo
        force: yes
        owner: root
        group: root
        mode: 0644
      tags: docker

    - name: Install Docker CE
      yum:
        name: docker-ce
        state: present
        update_cache: yes
      tags: docker

    - name: Add jenkins user to the docker group
      user: name="{{ Jenkins_Username }}"
            groups=docker
            append=yes
      tags: docker
        
    - name: Enable and Start Docker Service
      service:
        name: docker
        state: started
        enabled: yes
      tags: docker

    #######################
    # NVidia Cuda Toolkit #
    #######################
    - name: Check if NVidia CUDA toolkit is already installed
      stat: 
          path: /usr/local/cuda-9.0
      register: cuda_installed
      tags: Cuda_Toolkit
        
    - name: Download NVidia CUDA toolkit
      get_url: 
        url="https://developer.nvidia.com/compute/cuda/9.0/Prod/local_installers/cuda_9.0.176_384.81_linux-run"
        dest="/tmp/cuda9_linux-run"
      when: 
        - cuda_installed.stat.islnk is not defined
      tags: Cuda_Toolkit

    - name: Install NVidia CUDA toolkit
      shell: sh /tmp/cuda9_linux-run --silent --toolkit --override
      when: 
        - cuda_installed.stat.islnk is not defined
      tags: Cuda_Toolkit

    - name: Cleanup NVidia CUDA toolkit
      file:
        path: /tmp/cuda9_linux-run
        state: absent
      when:
        - cuda_installed.stat.islnk is not defined
      tags: Cuda_Toolkit

    ##################
    # Nagios plugins #
    ##################
#    - name: Include Nagios Playbook
#      include_tasks: nagios/nagios_centos.yml
#      when: Nagios_Plugins == "Enabled"

    #####################
    # superuser account #
    #####################
    - name: Setup zeus user
      shell: useradd zeus --shell /bin/bash -m 
      ignore_errors: yes
      when: Superuser_Account == "Enabled"
      tags: supperuser

    - name: Create SSH Key folder for zeus
      file: 
        path: /home/zeus/.ssh
        owner: zeus
        group: zeus
        mode: 0700
        state: directory
      when: Superuser_Account == "Enabled"
      tags: supperuser

    - name: Add key
      authorized_key:
        user: zeus
        state: present
        key: "{{ lookup('file', '/home/ubuntu/keys/zeus.key') }}"
      when: Superuser_Account == "Enabled"
      tags: supperuser

    - name: Grant zeus sudo powers
      lineinfile:
        dest: /etc/sudoers
        state: present
        regexp: '^zeus'
        line: 'zeus ALL=(ALL) NOPASSWD: ALL'
      when: Superuser_Account == "Enabled"
      tags: supperuser

    #############
    # swap file #
    #############
    - stat: path=/swapfile
      register: swap_test
      tags: swap

    - name: Create swap file
      command: dd if=/dev/zero of=/swapfile bs=250M count=8
      when: swap_test.stat.exists == false 
      tags: swap

    - name: Set swap file permissions
      file: path=/swapfile
            owner=root
            group=root
            mode=0600
      when: swap_test.stat.exists == false
      tags: swap

    - name: Create swap area device
      command: mkswap /swapfile
      when: swap_test.stat.exists == false
      tags: swap

    - name: Mount swap file
      command: swapon /swapfile
      when: swap_test.stat.exists == false
      tags: swap

    - name: Add swap to fstab
      mount: src=/swapfile
        name=none
        fstype=swap
        opts=sw
        passno=0
        dump=0
        state=present
      when: swap_test.stat.exists == false
      tags: swap

    ####################
    # Auto OS patching #
    ####################    
    - name: Add cron job to check for updates
      cron: name="Check for Updates every Sunday at 5am"
            weekday="6"
            minute="0"
            hour="5"
            user=root
            job="/usr/bin/dnf -y update"
            state=present
      tags: cron

    ###############
    # X11 Support #
    ###############
    - name: Create X11 Wrapper config file
      copy:
        content: |
          allowed_users=anybody
          needs_root_rights=yes
        dest: /etc/X11/Xwrapper.config
        group: root
        owner: root
        mode: 0644
      tags: x11

    - name: Start X11
      become: yes
      become_user: "{{ Jenkins_Username }}"
      shell: startx -- :1 &
      ignore_errors: yes
      no_log: True
      tags: x11
                  
    ###################
    # NTP Time Server #
    ###################
    - name: Set timedatectl set-ntp no
      shell: timedatectl set-ntp no
      tags: ntp

    - name: Configure NTP server pools
      shell: "cat /etc/ntp.conf | grep '1.pool.ntp.org' && echo NTP || echo -e 'pool 1.pool.ntp.org\npool 2.pool.ntp.org\npool 3.pool.ntp.org' >> /etc/ntp.conf"
      tags: ntp

    - name: Start NTP
      service:
        name: ntpd
        state: restarted
      tags: ntp

    ############
    # Clean up #
    ############
    - name: Remove yum dependencies that are no longer required
      command: yum -y autoremove
      args:
         warn: no
      tags: cleanup

    ################
    # Pass or Fail #
    ################
    - name: Send Slack notification, successful
      include_tasks: slack_notification/successful_slack.yml
      when: Slack_Notification == "Enabled"
      tags: slack

    rescue:
    - name: Send Slack notification, failure
      include_tasks: slack_notification/failure_slack.yml
      when: Slack_Notification == "Enabled"
      tags: slack
